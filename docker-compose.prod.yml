version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-init:
    image: postgres:15-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    command: >
      sh -c "
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c \"SELECT 1 FROM pg_database WHERE datname = '${ANALABIT_DB_NAME}'\" | grep -q 1 || 
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c \"CREATE DATABASE ${ANALABIT_DB_NAME};\";
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c \"SELECT 1 FROM pg_roles WHERE rolname = '${ANALABIT_DB_USER}'\" | grep -q 1 || 
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c \"CREATE USER ${ANALABIT_DB_USER} WITH PASSWORD '${ANALABIT_DB_PASSWORD}';\";
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c \"GRANT ALL PRIVILEGES ON DATABASE ${ANALABIT_DB_NAME} TO ${ANALABIT_DB_USER};\";
      psql -h postgres -U ${POSTGRES_USER} -d ${ANALABIT_DB_NAME} -c \"GRANT ALL ON SCHEMA public TO ${ANALABIT_DB_USER};\";
      psql -h postgres -U ${POSTGRES_USER} -d ${ANALABIT_DB_NAME} -c \"GRANT CREATE ON SCHEMA public TO ${ANALABIT_DB_USER};\";
      psql -h postgres -U ${POSTGRES_USER} -d ${ANALABIT_DB_NAME} -c \"GRANT USAGE ON SCHEMA public TO ${ANALABIT_DB_USER};\";
      psql -h postgres -U ${POSTGRES_USER} -d ${ANALABIT_DB_NAME} -c \"ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${ANALABIT_DB_USER};\";
      psql -h postgres -U ${POSTGRES_USER} -d ${ANALABIT_DB_NAME} -c \"ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${ANALABIT_DB_USER};\";
      psql -h postgres -U ${POSTGRES_USER} -d ${ANALABIT_DB_NAME} -c \"ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO ${ANALABIT_DB_USER};\";
      "
    restart: "no"

  api:
    image: ${API_IMAGE:-ghcr.io/analabit/analabit-api:latest}
    depends_on:
      - rabbitmq
      - minio
      - postgres
      - postgres-init
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - MINIO_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_USE_SSL=false
      - MINIO_BUCKET_NAME=analabit-results
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${ANALABIT_DB_USER}
      - DATABASE_PASSWORD=${ANALABIT_DB_PASSWORD}
      - DATABASE_DBNAME=${ANALABIT_DB_NAME}
      - DATABASE_SSLMODE=disable
    ports:
      - "127.0.0.1:8080:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  aggregator:
    image: ${AGGREGATOR_IMAGE:-ghcr.io/analabit/analabit-aggregator:latest}
    depends_on:
      - rabbitmq
      - minio
      - postgres
      - postgres-init
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - MINIO_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_USE_SSL=false
      - MINIO_BUCKET_NAME=analabit-results
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${ANALABIT_DB_USER}
      - DATABASE_PASSWORD=${ANALABIT_DB_PASSWORD}
      - DATABASE_DBNAME=${ANALABIT_DB_NAME}
      - DATABASE_SSLMODE=disable
    restart: unless-stopped

  producer-cache-init:
    image: alpine:latest
    volumes:
      - producer_cache:/app/cache
    command: sh -c "mkdir -p /app/cache && chmod 777 /app/cache"
    restart: "no"

  producer:
    image: ${PRODUCER_IMAGE:-ghcr.io/analabit/analabit-producer:latest}
    depends_on:
      - rabbitmq
      - minio
      - postgres
      - postgres-init
      - producer-cache-init
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - MINIO_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_USE_SSL=false
      - MINIO_BUCKET_NAME=analabit-results
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${ANALABIT_DB_USER}
      - DATABASE_PASSWORD=${ANALABIT_DB_PASSWORD}
      - DATABASE_DBNAME=${ANALABIT_DB_NAME}
      - DATABASE_SSLMODE=disable
    volumes:
      - producer_cache:/app/cache
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.53.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://analabit.ru/prometheus/'
      - '--web.route-prefix=/prometheus/'
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: "${GRAFANA_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD}"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: "https://analabit.ru/grafana/"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    ports:
      - "127.0.0.1:3500:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  rabbitmq_data:
  minio_data:
  postgres_data:
  producer_cache:
  prometheus_data:
  grafana_data:
