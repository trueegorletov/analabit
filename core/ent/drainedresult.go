// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/drainedresult"
	"analabit/core/ent/heading"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DrainedResult is the model entity for the DrainedResult schema.
type DrainedResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DrainedPercent holds the value of the "drained_percent" field.
	DrainedPercent int `json:"drained_percent,omitempty"`
	// PassingScore holds the value of the "passing_score" field.
	PassingScore int `json:"passing_score,omitempty"`
	// LastAdmittedRatingPlace holds the value of the "last_admitted_rating_place" field.
	LastAdmittedRatingPlace int `json:"last_admitted_rating_place,omitempty"`
	// Iteration holds the value of the "iteration" field.
	Iteration int `json:"iteration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DrainedResultQuery when eager-loading is set.
	Edges                   DrainedResultEdges `json:"edges"`
	heading_drained_results *int
	selectValues            sql.SelectValues
}

// DrainedResultEdges holds the relations/edges for other nodes in the graph.
type DrainedResultEdges struct {
	// Heading holds the value of the heading edge.
	Heading *Heading `json:"heading,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HeadingOrErr returns the Heading value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrainedResultEdges) HeadingOrErr() (*Heading, error) {
	if e.Heading != nil {
		return e.Heading, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: heading.Label}
	}
	return nil, &NotLoadedError{edge: "heading"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DrainedResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case drainedresult.FieldID, drainedresult.FieldDrainedPercent, drainedresult.FieldPassingScore, drainedresult.FieldLastAdmittedRatingPlace, drainedresult.FieldIteration:
			values[i] = new(sql.NullInt64)
		case drainedresult.ForeignKeys[0]: // heading_drained_results
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DrainedResult fields.
func (dr *DrainedResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case drainedresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dr.ID = int(value.Int64)
		case drainedresult.FieldDrainedPercent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field drained_percent", values[i])
			} else if value.Valid {
				dr.DrainedPercent = int(value.Int64)
			}
		case drainedresult.FieldPassingScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passing_score", values[i])
			} else if value.Valid {
				dr.PassingScore = int(value.Int64)
			}
		case drainedresult.FieldLastAdmittedRatingPlace:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_admitted_rating_place", values[i])
			} else if value.Valid {
				dr.LastAdmittedRatingPlace = int(value.Int64)
			}
		case drainedresult.FieldIteration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field iteration", values[i])
			} else if value.Valid {
				dr.Iteration = int(value.Int64)
			}
		case drainedresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field heading_drained_results", value)
			} else if value.Valid {
				dr.heading_drained_results = new(int)
				*dr.heading_drained_results = int(value.Int64)
			}
		default:
			dr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DrainedResult.
// This includes values selected through modifiers, order, etc.
func (dr *DrainedResult) Value(name string) (ent.Value, error) {
	return dr.selectValues.Get(name)
}

// QueryHeading queries the "heading" edge of the DrainedResult entity.
func (dr *DrainedResult) QueryHeading() *HeadingQuery {
	return NewDrainedResultClient(dr.config).QueryHeading(dr)
}

// Update returns a builder for updating this DrainedResult.
// Note that you need to call DrainedResult.Unwrap() before calling this method if this DrainedResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DrainedResult) Update() *DrainedResultUpdateOne {
	return NewDrainedResultClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DrainedResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DrainedResult) Unwrap() *DrainedResult {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DrainedResult is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DrainedResult) String() string {
	var builder strings.Builder
	builder.WriteString("DrainedResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dr.ID))
	builder.WriteString("drained_percent=")
	builder.WriteString(fmt.Sprintf("%v", dr.DrainedPercent))
	builder.WriteString(", ")
	builder.WriteString("passing_score=")
	builder.WriteString(fmt.Sprintf("%v", dr.PassingScore))
	builder.WriteString(", ")
	builder.WriteString("last_admitted_rating_place=")
	builder.WriteString(fmt.Sprintf("%v", dr.LastAdmittedRatingPlace))
	builder.WriteString(", ")
	builder.WriteString("iteration=")
	builder.WriteString(fmt.Sprintf("%v", dr.Iteration))
	builder.WriteByte(')')
	return builder.String()
}

// DrainedResults is a parsable slice of DrainedResult.
type DrainedResults []*DrainedResult
