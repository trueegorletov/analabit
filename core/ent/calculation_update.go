// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/calculation"
	"analabit/core/ent/heading"
	"analabit/core/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CalculationUpdate is the builder for updating Calculation entities.
type CalculationUpdate struct {
	config
	hooks    []Hook
	mutation *CalculationMutation
}

// Where appends a list predicates to the CalculationUpdate builder.
func (cu *CalculationUpdate) Where(ps ...predicate.Calculation) *CalculationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStudentID sets the "student_id" field.
func (cu *CalculationUpdate) SetStudentID(s string) *CalculationUpdate {
	cu.mutation.SetStudentID(s)
	return cu
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (cu *CalculationUpdate) SetNillableStudentID(s *string) *CalculationUpdate {
	if s != nil {
		cu.SetStudentID(*s)
	}
	return cu
}

// SetAdmittedPlace sets the "admitted_place" field.
func (cu *CalculationUpdate) SetAdmittedPlace(i int) *CalculationUpdate {
	cu.mutation.ResetAdmittedPlace()
	cu.mutation.SetAdmittedPlace(i)
	return cu
}

// SetNillableAdmittedPlace sets the "admitted_place" field if the given value is not nil.
func (cu *CalculationUpdate) SetNillableAdmittedPlace(i *int) *CalculationUpdate {
	if i != nil {
		cu.SetAdmittedPlace(*i)
	}
	return cu
}

// AddAdmittedPlace adds i to the "admitted_place" field.
func (cu *CalculationUpdate) AddAdmittedPlace(i int) *CalculationUpdate {
	cu.mutation.AddAdmittedPlace(i)
	return cu
}

// SetIteration sets the "iteration" field.
func (cu *CalculationUpdate) SetIteration(i int) *CalculationUpdate {
	cu.mutation.ResetIteration()
	cu.mutation.SetIteration(i)
	return cu
}

// SetNillableIteration sets the "iteration" field if the given value is not nil.
func (cu *CalculationUpdate) SetNillableIteration(i *int) *CalculationUpdate {
	if i != nil {
		cu.SetIteration(*i)
	}
	return cu
}

// AddIteration adds i to the "iteration" field.
func (cu *CalculationUpdate) AddIteration(i int) *CalculationUpdate {
	cu.mutation.AddIteration(i)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CalculationUpdate) SetUpdatedAt(t time.Time) *CalculationUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetHeadingID sets the "heading" edge to the Heading entity by ID.
func (cu *CalculationUpdate) SetHeadingID(id int) *CalculationUpdate {
	cu.mutation.SetHeadingID(id)
	return cu
}

// SetHeading sets the "heading" edge to the Heading entity.
func (cu *CalculationUpdate) SetHeading(h *Heading) *CalculationUpdate {
	return cu.SetHeadingID(h.ID)
}

// Mutation returns the CalculationMutation object of the builder.
func (cu *CalculationUpdate) Mutation() *CalculationMutation {
	return cu.mutation
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (cu *CalculationUpdate) ClearHeading() *CalculationUpdate {
	cu.mutation.ClearHeading()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CalculationUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CalculationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CalculationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CalculationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CalculationUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := calculation.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CalculationUpdate) check() error {
	if cu.mutation.HeadingCleared() && len(cu.mutation.HeadingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Calculation.heading"`)
	}
	return nil
}

func (cu *CalculationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(calculation.Table, calculation.Columns, sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.StudentID(); ok {
		_spec.SetField(calculation.FieldStudentID, field.TypeString, value)
	}
	if value, ok := cu.mutation.AdmittedPlace(); ok {
		_spec.SetField(calculation.FieldAdmittedPlace, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedAdmittedPlace(); ok {
		_spec.AddField(calculation.FieldAdmittedPlace, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Iteration(); ok {
		_spec.SetField(calculation.FieldIteration, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIteration(); ok {
		_spec.AddField(calculation.FieldIteration, field.TypeInt, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(calculation.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.HeadingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   calculation.HeadingTable,
			Columns: []string{calculation.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.HeadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   calculation.HeadingTable,
			Columns: []string{calculation.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{calculation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CalculationUpdateOne is the builder for updating a single Calculation entity.
type CalculationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CalculationMutation
}

// SetStudentID sets the "student_id" field.
func (cuo *CalculationUpdateOne) SetStudentID(s string) *CalculationUpdateOne {
	cuo.mutation.SetStudentID(s)
	return cuo
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (cuo *CalculationUpdateOne) SetNillableStudentID(s *string) *CalculationUpdateOne {
	if s != nil {
		cuo.SetStudentID(*s)
	}
	return cuo
}

// SetAdmittedPlace sets the "admitted_place" field.
func (cuo *CalculationUpdateOne) SetAdmittedPlace(i int) *CalculationUpdateOne {
	cuo.mutation.ResetAdmittedPlace()
	cuo.mutation.SetAdmittedPlace(i)
	return cuo
}

// SetNillableAdmittedPlace sets the "admitted_place" field if the given value is not nil.
func (cuo *CalculationUpdateOne) SetNillableAdmittedPlace(i *int) *CalculationUpdateOne {
	if i != nil {
		cuo.SetAdmittedPlace(*i)
	}
	return cuo
}

// AddAdmittedPlace adds i to the "admitted_place" field.
func (cuo *CalculationUpdateOne) AddAdmittedPlace(i int) *CalculationUpdateOne {
	cuo.mutation.AddAdmittedPlace(i)
	return cuo
}

// SetIteration sets the "iteration" field.
func (cuo *CalculationUpdateOne) SetIteration(i int) *CalculationUpdateOne {
	cuo.mutation.ResetIteration()
	cuo.mutation.SetIteration(i)
	return cuo
}

// SetNillableIteration sets the "iteration" field if the given value is not nil.
func (cuo *CalculationUpdateOne) SetNillableIteration(i *int) *CalculationUpdateOne {
	if i != nil {
		cuo.SetIteration(*i)
	}
	return cuo
}

// AddIteration adds i to the "iteration" field.
func (cuo *CalculationUpdateOne) AddIteration(i int) *CalculationUpdateOne {
	cuo.mutation.AddIteration(i)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CalculationUpdateOne) SetUpdatedAt(t time.Time) *CalculationUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetHeadingID sets the "heading" edge to the Heading entity by ID.
func (cuo *CalculationUpdateOne) SetHeadingID(id int) *CalculationUpdateOne {
	cuo.mutation.SetHeadingID(id)
	return cuo
}

// SetHeading sets the "heading" edge to the Heading entity.
func (cuo *CalculationUpdateOne) SetHeading(h *Heading) *CalculationUpdateOne {
	return cuo.SetHeadingID(h.ID)
}

// Mutation returns the CalculationMutation object of the builder.
func (cuo *CalculationUpdateOne) Mutation() *CalculationMutation {
	return cuo.mutation
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (cuo *CalculationUpdateOne) ClearHeading() *CalculationUpdateOne {
	cuo.mutation.ClearHeading()
	return cuo
}

// Where appends a list predicates to the CalculationUpdate builder.
func (cuo *CalculationUpdateOne) Where(ps ...predicate.Calculation) *CalculationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CalculationUpdateOne) Select(field string, fields ...string) *CalculationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Calculation entity.
func (cuo *CalculationUpdateOne) Save(ctx context.Context) (*Calculation, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CalculationUpdateOne) SaveX(ctx context.Context) *Calculation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CalculationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CalculationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CalculationUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := calculation.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CalculationUpdateOne) check() error {
	if cuo.mutation.HeadingCleared() && len(cuo.mutation.HeadingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Calculation.heading"`)
	}
	return nil
}

func (cuo *CalculationUpdateOne) sqlSave(ctx context.Context) (_node *Calculation, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(calculation.Table, calculation.Columns, sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Calculation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, calculation.FieldID)
		for _, f := range fields {
			if !calculation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != calculation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.StudentID(); ok {
		_spec.SetField(calculation.FieldStudentID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AdmittedPlace(); ok {
		_spec.SetField(calculation.FieldAdmittedPlace, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedAdmittedPlace(); ok {
		_spec.AddField(calculation.FieldAdmittedPlace, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Iteration(); ok {
		_spec.SetField(calculation.FieldIteration, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIteration(); ok {
		_spec.AddField(calculation.FieldIteration, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(calculation.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.HeadingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   calculation.HeadingTable,
			Columns: []string{calculation.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.HeadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   calculation.HeadingTable,
			Columns: []string{calculation.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Calculation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{calculation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
