// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/heading"
	"analabit/core/ent/varsity"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VarsityCreate is the builder for creating a Varsity entity.
type VarsityCreate struct {
	config
	mutation *VarsityMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (vc *VarsityCreate) SetCode(s string) *VarsityCreate {
	vc.mutation.SetCode(s)
	return vc
}

// SetName sets the "name" field.
func (vc *VarsityCreate) SetName(s string) *VarsityCreate {
	vc.mutation.SetName(s)
	return vc
}

// AddHeadingIDs adds the "headings" edge to the Heading entity by IDs.
func (vc *VarsityCreate) AddHeadingIDs(ids ...int) *VarsityCreate {
	vc.mutation.AddHeadingIDs(ids...)
	return vc
}

// AddHeadings adds the "headings" edges to the Heading entity.
func (vc *VarsityCreate) AddHeadings(h ...*Heading) *VarsityCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vc.AddHeadingIDs(ids...)
}

// Mutation returns the VarsityMutation object of the builder.
func (vc *VarsityCreate) Mutation() *VarsityMutation {
	return vc.mutation
}

// Save creates the Varsity in the database.
func (vc *VarsityCreate) Save(ctx context.Context) (*Varsity, error) {
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VarsityCreate) SaveX(ctx context.Context) *Varsity {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VarsityCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VarsityCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VarsityCreate) check() error {
	if _, ok := vc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Varsity.code"`)}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Varsity.name"`)}
	}
	return nil
}

func (vc *VarsityCreate) sqlSave(ctx context.Context) (*Varsity, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VarsityCreate) createSpec() (*Varsity, *sqlgraph.CreateSpec) {
	var (
		_node = &Varsity{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(varsity.Table, sqlgraph.NewFieldSpec(varsity.FieldID, field.TypeInt))
	)
	if value, ok := vc.mutation.Code(); ok {
		_spec.SetField(varsity.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(varsity.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := vc.mutation.HeadingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varsity.HeadingsTable,
			Columns: []string{varsity.HeadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VarsityCreateBulk is the builder for creating many Varsity entities in bulk.
type VarsityCreateBulk struct {
	config
	err      error
	builders []*VarsityCreate
}

// Save creates the Varsity entities in the database.
func (vcb *VarsityCreateBulk) Save(ctx context.Context) ([]*Varsity, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Varsity, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VarsityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VarsityCreateBulk) SaveX(ctx context.Context) []*Varsity {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VarsityCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VarsityCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
