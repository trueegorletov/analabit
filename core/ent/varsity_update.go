// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/trueegorletov/analabit/core/ent/heading"
	"github.com/trueegorletov/analabit/core/ent/predicate"
	"github.com/trueegorletov/analabit/core/ent/varsity"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VarsityUpdate is the builder for updating Varsity entities.
type VarsityUpdate struct {
	config
	hooks    []Hook
	mutation *VarsityMutation
}

// Where appends a list predicates to the VarsityUpdate builder.
func (vu *VarsityUpdate) Where(ps ...predicate.Varsity) *VarsityUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetCode sets the "code" field.
func (vu *VarsityUpdate) SetCode(s string) *VarsityUpdate {
	vu.mutation.SetCode(s)
	return vu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (vu *VarsityUpdate) SetNillableCode(s *string) *VarsityUpdate {
	if s != nil {
		vu.SetCode(*s)
	}
	return vu
}

// SetName sets the "name" field.
func (vu *VarsityUpdate) SetName(s string) *VarsityUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VarsityUpdate) SetNillableName(s *string) *VarsityUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// AddHeadingIDs adds the "headings" edge to the Heading entity by IDs.
func (vu *VarsityUpdate) AddHeadingIDs(ids ...int) *VarsityUpdate {
	vu.mutation.AddHeadingIDs(ids...)
	return vu
}

// AddHeadings adds the "headings" edges to the Heading entity.
func (vu *VarsityUpdate) AddHeadings(h ...*Heading) *VarsityUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vu.AddHeadingIDs(ids...)
}

// Mutation returns the VarsityMutation object of the builder.
func (vu *VarsityUpdate) Mutation() *VarsityMutation {
	return vu.mutation
}

// ClearHeadings clears all "headings" edges to the Heading entity.
func (vu *VarsityUpdate) ClearHeadings() *VarsityUpdate {
	vu.mutation.ClearHeadings()
	return vu
}

// RemoveHeadingIDs removes the "headings" edge to Heading entities by IDs.
func (vu *VarsityUpdate) RemoveHeadingIDs(ids ...int) *VarsityUpdate {
	vu.mutation.RemoveHeadingIDs(ids...)
	return vu
}

// RemoveHeadings removes "headings" edges to Heading entities.
func (vu *VarsityUpdate) RemoveHeadings(h ...*Heading) *VarsityUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vu.RemoveHeadingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VarsityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VarsityUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VarsityUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VarsityUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VarsityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(varsity.Table, varsity.Columns, sqlgraph.NewFieldSpec(varsity.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Code(); ok {
		_spec.SetField(varsity.FieldCode, field.TypeString, value)
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(varsity.FieldName, field.TypeString, value)
	}
	if vu.mutation.HeadingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varsity.HeadingsTable,
			Columns: []string{varsity.HeadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedHeadingsIDs(); len(nodes) > 0 && !vu.mutation.HeadingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varsity.HeadingsTable,
			Columns: []string{varsity.HeadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.HeadingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varsity.HeadingsTable,
			Columns: []string{varsity.HeadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{varsity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VarsityUpdateOne is the builder for updating a single Varsity entity.
type VarsityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VarsityMutation
}

// SetCode sets the "code" field.
func (vuo *VarsityUpdateOne) SetCode(s string) *VarsityUpdateOne {
	vuo.mutation.SetCode(s)
	return vuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (vuo *VarsityUpdateOne) SetNillableCode(s *string) *VarsityUpdateOne {
	if s != nil {
		vuo.SetCode(*s)
	}
	return vuo
}

// SetName sets the "name" field.
func (vuo *VarsityUpdateOne) SetName(s string) *VarsityUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VarsityUpdateOne) SetNillableName(s *string) *VarsityUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// AddHeadingIDs adds the "headings" edge to the Heading entity by IDs.
func (vuo *VarsityUpdateOne) AddHeadingIDs(ids ...int) *VarsityUpdateOne {
	vuo.mutation.AddHeadingIDs(ids...)
	return vuo
}

// AddHeadings adds the "headings" edges to the Heading entity.
func (vuo *VarsityUpdateOne) AddHeadings(h ...*Heading) *VarsityUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vuo.AddHeadingIDs(ids...)
}

// Mutation returns the VarsityMutation object of the builder.
func (vuo *VarsityUpdateOne) Mutation() *VarsityMutation {
	return vuo.mutation
}

// ClearHeadings clears all "headings" edges to the Heading entity.
func (vuo *VarsityUpdateOne) ClearHeadings() *VarsityUpdateOne {
	vuo.mutation.ClearHeadings()
	return vuo
}

// RemoveHeadingIDs removes the "headings" edge to Heading entities by IDs.
func (vuo *VarsityUpdateOne) RemoveHeadingIDs(ids ...int) *VarsityUpdateOne {
	vuo.mutation.RemoveHeadingIDs(ids...)
	return vuo
}

// RemoveHeadings removes "headings" edges to Heading entities.
func (vuo *VarsityUpdateOne) RemoveHeadings(h ...*Heading) *VarsityUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vuo.RemoveHeadingIDs(ids...)
}

// Where appends a list predicates to the VarsityUpdate builder.
func (vuo *VarsityUpdateOne) Where(ps ...predicate.Varsity) *VarsityUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VarsityUpdateOne) Select(field string, fields ...string) *VarsityUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Varsity entity.
func (vuo *VarsityUpdateOne) Save(ctx context.Context) (*Varsity, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VarsityUpdateOne) SaveX(ctx context.Context) *Varsity {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VarsityUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VarsityUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VarsityUpdateOne) sqlSave(ctx context.Context) (_node *Varsity, err error) {
	_spec := sqlgraph.NewUpdateSpec(varsity.Table, varsity.Columns, sqlgraph.NewFieldSpec(varsity.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Varsity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, varsity.FieldID)
		for _, f := range fields {
			if !varsity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != varsity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Code(); ok {
		_spec.SetField(varsity.FieldCode, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(varsity.FieldName, field.TypeString, value)
	}
	if vuo.mutation.HeadingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varsity.HeadingsTable,
			Columns: []string{varsity.HeadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedHeadingsIDs(); len(nodes) > 0 && !vuo.mutation.HeadingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varsity.HeadingsTable,
			Columns: []string{varsity.HeadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.HeadingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varsity.HeadingsTable,
			Columns: []string{varsity.HeadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Varsity{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{varsity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
