// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core"
	"analabit/core/ent/application"
	"analabit/core/ent/heading"
	"analabit/core/ent/run"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Application is the model entity for the Application schema.
type Application struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID string `json:"student_id,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// CompetitionType holds the value of the "competition_type" field.
	CompetitionType core.Competition `json:"competition_type,omitempty"`
	// RatingPlace holds the value of the "rating_place" field.
	RatingPlace int `json:"rating_place,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// Iteration holds the value of the "iteration" field.
	Iteration int `json:"iteration,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID int `json:"run_id,omitempty"`
	// OriginalSubmitted holds the value of the "original_submitted" field.
	OriginalSubmitted bool `json:"original_submitted,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationQuery when eager-loading is set.
	Edges                ApplicationEdges `json:"edges"`
	heading_applications *int
	selectValues         sql.SelectValues
}

// ApplicationEdges holds the relations/edges for other nodes in the graph.
type ApplicationEdges struct {
	// Heading holds the value of the heading edge.
	Heading *Heading `json:"heading,omitempty"`
	// Run holds the value of the run edge.
	Run *Run `json:"run,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HeadingOrErr returns the Heading value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) HeadingOrErr() (*Heading, error) {
	if e.Heading != nil {
		return e.Heading, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: heading.Label}
	}
	return nil, &NotLoadedError{edge: "heading"}
}

// RunOrErr returns the Run value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) RunOrErr() (*Run, error) {
	if e.Run != nil {
		return e.Run, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: run.Label}
	}
	return nil, &NotLoadedError{edge: "run"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Application) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case application.FieldOriginalSubmitted:
			values[i] = new(sql.NullBool)
		case application.FieldID, application.FieldPriority, application.FieldCompetitionType, application.FieldRatingPlace, application.FieldScore, application.FieldIteration, application.FieldRunID:
			values[i] = new(sql.NullInt64)
		case application.FieldStudentID:
			values[i] = new(sql.NullString)
		case application.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case application.ForeignKeys[0]: // heading_applications
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Application fields.
func (a *Application) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case application.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case application.FieldStudentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value.Valid {
				a.StudentID = value.String
			}
		case application.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				a.Priority = int(value.Int64)
			}
		case application.FieldCompetitionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field competition_type", values[i])
			} else if value.Valid {
				a.CompetitionType = core.Competition(value.Int64)
			}
		case application.FieldRatingPlace:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating_place", values[i])
			} else if value.Valid {
				a.RatingPlace = int(value.Int64)
			}
		case application.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				a.Score = int(value.Int64)
			}
		case application.FieldIteration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field iteration", values[i])
			} else if value.Valid {
				a.Iteration = int(value.Int64)
			}
		case application.FieldRunID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				a.RunID = int(value.Int64)
			}
		case application.FieldOriginalSubmitted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field original_submitted", values[i])
			} else if value.Valid {
				a.OriginalSubmitted = value.Bool
			}
		case application.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case application.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field heading_applications", value)
			} else if value.Valid {
				a.heading_applications = new(int)
				*a.heading_applications = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Application.
// This includes values selected through modifiers, order, etc.
func (a *Application) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryHeading queries the "heading" edge of the Application entity.
func (a *Application) QueryHeading() *HeadingQuery {
	return NewApplicationClient(a.config).QueryHeading(a)
}

// QueryRun queries the "run" edge of the Application entity.
func (a *Application) QueryRun() *RunQuery {
	return NewApplicationClient(a.config).QueryRun(a)
}

// Update returns a builder for updating this Application.
// Note that you need to call Application.Unwrap() before calling this method if this Application
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Application) Update() *ApplicationUpdateOne {
	return NewApplicationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Application entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Application) Unwrap() *Application {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Application is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Application) String() string {
	var builder strings.Builder
	builder.WriteString("Application(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("student_id=")
	builder.WriteString(a.StudentID)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", a.Priority))
	builder.WriteString(", ")
	builder.WriteString("competition_type=")
	builder.WriteString(fmt.Sprintf("%v", a.CompetitionType))
	builder.WriteString(", ")
	builder.WriteString("rating_place=")
	builder.WriteString(fmt.Sprintf("%v", a.RatingPlace))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", a.Score))
	builder.WriteString(", ")
	builder.WriteString("iteration=")
	builder.WriteString(fmt.Sprintf("%v", a.Iteration))
	builder.WriteString(", ")
	builder.WriteString("run_id=")
	builder.WriteString(fmt.Sprintf("%v", a.RunID))
	builder.WriteString(", ")
	builder.WriteString("original_submitted=")
	builder.WriteString(fmt.Sprintf("%v", a.OriginalSubmitted))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Applications is a parsable slice of Application.
type Applications []*Application
