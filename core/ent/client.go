// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"analabit/core/ent/migrate"

	"analabit/core/ent/application"
	"analabit/core/ent/calculation"
	"analabit/core/ent/heading"
	"analabit/core/ent/metadata"
	"analabit/core/ent/varsity"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// Calculation is the client for interacting with the Calculation builders.
	Calculation *CalculationClient
	// Heading is the client for interacting with the Heading builders.
	Heading *HeadingClient
	// Metadata is the client for interacting with the Metadata builders.
	Metadata *MetadataClient
	// Varsity is the client for interacting with the Varsity builders.
	Varsity *VarsityClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Application = NewApplicationClient(c.config)
	c.Calculation = NewCalculationClient(c.config)
	c.Heading = NewHeadingClient(c.config)
	c.Metadata = NewMetadataClient(c.config)
	c.Varsity = NewVarsityClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Application: NewApplicationClient(cfg),
		Calculation: NewCalculationClient(cfg),
		Heading:     NewHeadingClient(cfg),
		Metadata:    NewMetadataClient(cfg),
		Varsity:     NewVarsityClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Application: NewApplicationClient(cfg),
		Calculation: NewCalculationClient(cfg),
		Heading:     NewHeadingClient(cfg),
		Metadata:    NewMetadataClient(cfg),
		Varsity:     NewVarsityClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Application.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Application.Use(hooks...)
	c.Calculation.Use(hooks...)
	c.Heading.Use(hooks...)
	c.Metadata.Use(hooks...)
	c.Varsity.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Application.Intercept(interceptors...)
	c.Calculation.Intercept(interceptors...)
	c.Heading.Intercept(interceptors...)
	c.Metadata.Intercept(interceptors...)
	c.Varsity.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApplicationMutation:
		return c.Application.mutate(ctx, m)
	case *CalculationMutation:
		return c.Calculation.mutate(ctx, m)
	case *HeadingMutation:
		return c.Heading.mutate(ctx, m)
	case *MetadataMutation:
		return c.Metadata.mutate(ctx, m)
	case *VarsityMutation:
		return c.Varsity.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApplicationClient is a client for the Application schema.
type ApplicationClient struct {
	config
}

// NewApplicationClient returns a client for the Application from the given config.
func NewApplicationClient(c config) *ApplicationClient {
	return &ApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `application.Hooks(f(g(h())))`.
func (c *ApplicationClient) Use(hooks ...Hook) {
	c.hooks.Application = append(c.hooks.Application, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `application.Intercept(f(g(h())))`.
func (c *ApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Application = append(c.inters.Application, interceptors...)
}

// Create returns a builder for creating a Application entity.
func (c *ApplicationClient) Create() *ApplicationCreate {
	mutation := newApplicationMutation(c.config, OpCreate)
	return &ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Application entities.
func (c *ApplicationClient) CreateBulk(builders ...*ApplicationCreate) *ApplicationCreateBulk {
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApplicationClient) MapCreateBulk(slice any, setFunc func(*ApplicationCreate, int)) *ApplicationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApplicationCreateBulk{err: fmt.Errorf("calling to ApplicationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApplicationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Application.
func (c *ApplicationClient) Update() *ApplicationUpdate {
	mutation := newApplicationMutation(c.config, OpUpdate)
	return &ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationClient) UpdateOne(a *Application) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplication(a))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationClient) UpdateOneID(id int) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplicationID(id))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Application.
func (c *ApplicationClient) Delete() *ApplicationDelete {
	mutation := newApplicationMutation(c.config, OpDelete)
	return &ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationClient) DeleteOne(a *Application) *ApplicationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationClient) DeleteOneID(id int) *ApplicationDeleteOne {
	builder := c.Delete().Where(application.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDeleteOne{builder}
}

// Query returns a query builder for Application.
func (c *ApplicationClient) Query() *ApplicationQuery {
	return &ApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a Application entity by its id.
func (c *ApplicationClient) Get(ctx context.Context, id int) (*Application, error) {
	return c.Query().Where(application.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationClient) GetX(ctx context.Context, id int) *Application {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHeading queries the heading edge of a Application.
func (c *ApplicationClient) QueryHeading(a *Application) *HeadingQuery {
	query := (&HeadingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(heading.Table, heading.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.HeadingTable, application.HeadingColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationClient) Hooks() []Hook {
	return c.hooks.Application
}

// Interceptors returns the client interceptors.
func (c *ApplicationClient) Interceptors() []Interceptor {
	return c.inters.Application
}

func (c *ApplicationClient) mutate(ctx context.Context, m *ApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Application mutation op: %q", m.Op())
	}
}

// CalculationClient is a client for the Calculation schema.
type CalculationClient struct {
	config
}

// NewCalculationClient returns a client for the Calculation from the given config.
func NewCalculationClient(c config) *CalculationClient {
	return &CalculationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `calculation.Hooks(f(g(h())))`.
func (c *CalculationClient) Use(hooks ...Hook) {
	c.hooks.Calculation = append(c.hooks.Calculation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `calculation.Intercept(f(g(h())))`.
func (c *CalculationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Calculation = append(c.inters.Calculation, interceptors...)
}

// Create returns a builder for creating a Calculation entity.
func (c *CalculationClient) Create() *CalculationCreate {
	mutation := newCalculationMutation(c.config, OpCreate)
	return &CalculationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Calculation entities.
func (c *CalculationClient) CreateBulk(builders ...*CalculationCreate) *CalculationCreateBulk {
	return &CalculationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CalculationClient) MapCreateBulk(slice any, setFunc func(*CalculationCreate, int)) *CalculationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CalculationCreateBulk{err: fmt.Errorf("calling to CalculationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CalculationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CalculationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Calculation.
func (c *CalculationClient) Update() *CalculationUpdate {
	mutation := newCalculationMutation(c.config, OpUpdate)
	return &CalculationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CalculationClient) UpdateOne(ca *Calculation) *CalculationUpdateOne {
	mutation := newCalculationMutation(c.config, OpUpdateOne, withCalculation(ca))
	return &CalculationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CalculationClient) UpdateOneID(id int) *CalculationUpdateOne {
	mutation := newCalculationMutation(c.config, OpUpdateOne, withCalculationID(id))
	return &CalculationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Calculation.
func (c *CalculationClient) Delete() *CalculationDelete {
	mutation := newCalculationMutation(c.config, OpDelete)
	return &CalculationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CalculationClient) DeleteOne(ca *Calculation) *CalculationDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CalculationClient) DeleteOneID(id int) *CalculationDeleteOne {
	builder := c.Delete().Where(calculation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CalculationDeleteOne{builder}
}

// Query returns a query builder for Calculation.
func (c *CalculationClient) Query() *CalculationQuery {
	return &CalculationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCalculation},
		inters: c.Interceptors(),
	}
}

// Get returns a Calculation entity by its id.
func (c *CalculationClient) Get(ctx context.Context, id int) (*Calculation, error) {
	return c.Query().Where(calculation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CalculationClient) GetX(ctx context.Context, id int) *Calculation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHeading queries the heading edge of a Calculation.
func (c *CalculationClient) QueryHeading(ca *Calculation) *HeadingQuery {
	query := (&HeadingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(calculation.Table, calculation.FieldID, id),
			sqlgraph.To(heading.Table, heading.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, calculation.HeadingTable, calculation.HeadingColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CalculationClient) Hooks() []Hook {
	return c.hooks.Calculation
}

// Interceptors returns the client interceptors.
func (c *CalculationClient) Interceptors() []Interceptor {
	return c.inters.Calculation
}

func (c *CalculationClient) mutate(ctx context.Context, m *CalculationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CalculationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CalculationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CalculationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CalculationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Calculation mutation op: %q", m.Op())
	}
}

// HeadingClient is a client for the Heading schema.
type HeadingClient struct {
	config
}

// NewHeadingClient returns a client for the Heading from the given config.
func NewHeadingClient(c config) *HeadingClient {
	return &HeadingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `heading.Hooks(f(g(h())))`.
func (c *HeadingClient) Use(hooks ...Hook) {
	c.hooks.Heading = append(c.hooks.Heading, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `heading.Intercept(f(g(h())))`.
func (c *HeadingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Heading = append(c.inters.Heading, interceptors...)
}

// Create returns a builder for creating a Heading entity.
func (c *HeadingClient) Create() *HeadingCreate {
	mutation := newHeadingMutation(c.config, OpCreate)
	return &HeadingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Heading entities.
func (c *HeadingClient) CreateBulk(builders ...*HeadingCreate) *HeadingCreateBulk {
	return &HeadingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HeadingClient) MapCreateBulk(slice any, setFunc func(*HeadingCreate, int)) *HeadingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HeadingCreateBulk{err: fmt.Errorf("calling to HeadingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HeadingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HeadingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Heading.
func (c *HeadingClient) Update() *HeadingUpdate {
	mutation := newHeadingMutation(c.config, OpUpdate)
	return &HeadingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HeadingClient) UpdateOne(h *Heading) *HeadingUpdateOne {
	mutation := newHeadingMutation(c.config, OpUpdateOne, withHeading(h))
	return &HeadingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HeadingClient) UpdateOneID(id int) *HeadingUpdateOne {
	mutation := newHeadingMutation(c.config, OpUpdateOne, withHeadingID(id))
	return &HeadingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Heading.
func (c *HeadingClient) Delete() *HeadingDelete {
	mutation := newHeadingMutation(c.config, OpDelete)
	return &HeadingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HeadingClient) DeleteOne(h *Heading) *HeadingDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HeadingClient) DeleteOneID(id int) *HeadingDeleteOne {
	builder := c.Delete().Where(heading.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HeadingDeleteOne{builder}
}

// Query returns a query builder for Heading.
func (c *HeadingClient) Query() *HeadingQuery {
	return &HeadingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHeading},
		inters: c.Interceptors(),
	}
}

// Get returns a Heading entity by its id.
func (c *HeadingClient) Get(ctx context.Context, id int) (*Heading, error) {
	return c.Query().Where(heading.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HeadingClient) GetX(ctx context.Context, id int) *Heading {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVarsity queries the varsity edge of a Heading.
func (c *HeadingClient) QueryVarsity(h *Heading) *VarsityQuery {
	query := (&VarsityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(heading.Table, heading.FieldID, id),
			sqlgraph.To(varsity.Table, varsity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, heading.VarsityTable, heading.VarsityColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplications queries the applications edge of a Heading.
func (c *HeadingClient) QueryApplications(h *Heading) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(heading.Table, heading.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, heading.ApplicationsTable, heading.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCalculations queries the calculations edge of a Heading.
func (c *HeadingClient) QueryCalculations(h *Heading) *CalculationQuery {
	query := (&CalculationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(heading.Table, heading.FieldID, id),
			sqlgraph.To(calculation.Table, calculation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, heading.CalculationsTable, heading.CalculationsColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HeadingClient) Hooks() []Hook {
	return c.hooks.Heading
}

// Interceptors returns the client interceptors.
func (c *HeadingClient) Interceptors() []Interceptor {
	return c.inters.Heading
}

func (c *HeadingClient) mutate(ctx context.Context, m *HeadingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HeadingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HeadingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HeadingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HeadingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Heading mutation op: %q", m.Op())
	}
}

// MetadataClient is a client for the Metadata schema.
type MetadataClient struct {
	config
}

// NewMetadataClient returns a client for the Metadata from the given config.
func NewMetadataClient(c config) *MetadataClient {
	return &MetadataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `metadata.Hooks(f(g(h())))`.
func (c *MetadataClient) Use(hooks ...Hook) {
	c.hooks.Metadata = append(c.hooks.Metadata, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `metadata.Intercept(f(g(h())))`.
func (c *MetadataClient) Intercept(interceptors ...Interceptor) {
	c.inters.Metadata = append(c.inters.Metadata, interceptors...)
}

// Create returns a builder for creating a Metadata entity.
func (c *MetadataClient) Create() *MetadataCreate {
	mutation := newMetadataMutation(c.config, OpCreate)
	return &MetadataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Metadata entities.
func (c *MetadataClient) CreateBulk(builders ...*MetadataCreate) *MetadataCreateBulk {
	return &MetadataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MetadataClient) MapCreateBulk(slice any, setFunc func(*MetadataCreate, int)) *MetadataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MetadataCreateBulk{err: fmt.Errorf("calling to MetadataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MetadataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MetadataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Metadata.
func (c *MetadataClient) Update() *MetadataUpdate {
	mutation := newMetadataMutation(c.config, OpUpdate)
	return &MetadataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetadataClient) UpdateOne(m *Metadata) *MetadataUpdateOne {
	mutation := newMetadataMutation(c.config, OpUpdateOne, withMetadata(m))
	return &MetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetadataClient) UpdateOneID(id int) *MetadataUpdateOne {
	mutation := newMetadataMutation(c.config, OpUpdateOne, withMetadataID(id))
	return &MetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Metadata.
func (c *MetadataClient) Delete() *MetadataDelete {
	mutation := newMetadataMutation(c.config, OpDelete)
	return &MetadataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MetadataClient) DeleteOne(m *Metadata) *MetadataDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MetadataClient) DeleteOneID(id int) *MetadataDeleteOne {
	builder := c.Delete().Where(metadata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetadataDeleteOne{builder}
}

// Query returns a query builder for Metadata.
func (c *MetadataClient) Query() *MetadataQuery {
	return &MetadataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMetadata},
		inters: c.Interceptors(),
	}
}

// Get returns a Metadata entity by its id.
func (c *MetadataClient) Get(ctx context.Context, id int) (*Metadata, error) {
	return c.Query().Where(metadata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetadataClient) GetX(ctx context.Context, id int) *Metadata {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MetadataClient) Hooks() []Hook {
	return c.hooks.Metadata
}

// Interceptors returns the client interceptors.
func (c *MetadataClient) Interceptors() []Interceptor {
	return c.inters.Metadata
}

func (c *MetadataClient) mutate(ctx context.Context, m *MetadataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MetadataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MetadataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MetadataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown metadata mutation op: %q", m.Op())
	}
}

// VarsityClient is a client for the Varsity schema.
type VarsityClient struct {
	config
}

// NewVarsityClient returns a client for the Varsity from the given config.
func NewVarsityClient(c config) *VarsityClient {
	return &VarsityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `varsity.Hooks(f(g(h())))`.
func (c *VarsityClient) Use(hooks ...Hook) {
	c.hooks.Varsity = append(c.hooks.Varsity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `varsity.Intercept(f(g(h())))`.
func (c *VarsityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Varsity = append(c.inters.Varsity, interceptors...)
}

// Create returns a builder for creating a Varsity entity.
func (c *VarsityClient) Create() *VarsityCreate {
	mutation := newVarsityMutation(c.config, OpCreate)
	return &VarsityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Varsity entities.
func (c *VarsityClient) CreateBulk(builders ...*VarsityCreate) *VarsityCreateBulk {
	return &VarsityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VarsityClient) MapCreateBulk(slice any, setFunc func(*VarsityCreate, int)) *VarsityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VarsityCreateBulk{err: fmt.Errorf("calling to VarsityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VarsityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VarsityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Varsity.
func (c *VarsityClient) Update() *VarsityUpdate {
	mutation := newVarsityMutation(c.config, OpUpdate)
	return &VarsityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VarsityClient) UpdateOne(v *Varsity) *VarsityUpdateOne {
	mutation := newVarsityMutation(c.config, OpUpdateOne, withVarsity(v))
	return &VarsityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VarsityClient) UpdateOneID(id int) *VarsityUpdateOne {
	mutation := newVarsityMutation(c.config, OpUpdateOne, withVarsityID(id))
	return &VarsityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Varsity.
func (c *VarsityClient) Delete() *VarsityDelete {
	mutation := newVarsityMutation(c.config, OpDelete)
	return &VarsityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VarsityClient) DeleteOne(v *Varsity) *VarsityDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VarsityClient) DeleteOneID(id int) *VarsityDeleteOne {
	builder := c.Delete().Where(varsity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VarsityDeleteOne{builder}
}

// Query returns a query builder for Varsity.
func (c *VarsityClient) Query() *VarsityQuery {
	return &VarsityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVarsity},
		inters: c.Interceptors(),
	}
}

// Get returns a Varsity entity by its id.
func (c *VarsityClient) Get(ctx context.Context, id int) (*Varsity, error) {
	return c.Query().Where(varsity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VarsityClient) GetX(ctx context.Context, id int) *Varsity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHeadings queries the headings edge of a Varsity.
func (c *VarsityClient) QueryHeadings(v *Varsity) *HeadingQuery {
	query := (&HeadingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(varsity.Table, varsity.FieldID, id),
			sqlgraph.To(heading.Table, heading.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, varsity.HeadingsTable, varsity.HeadingsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VarsityClient) Hooks() []Hook {
	return c.hooks.Varsity
}

// Interceptors returns the client interceptors.
func (c *VarsityClient) Interceptors() []Interceptor {
	return c.inters.Varsity
}

func (c *VarsityClient) mutate(ctx context.Context, m *VarsityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VarsityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VarsityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VarsityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VarsityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Varsity mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Application, Calculation, Heading, Metadata, Varsity []ent.Hook
	}
	inters struct {
		Application, Calculation, Heading, Metadata, Varsity []ent.Interceptor
	}
)
