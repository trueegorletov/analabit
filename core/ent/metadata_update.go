// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/metadata"
	"analabit/core/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MetadataUpdate is the builder for updating Metadata entities.
type MetadataUpdate struct {
	config
	hooks    []Hook
	mutation *MetadataMutation
}

// Where appends a list predicates to the MetadataUpdate builder.
func (mu *MetadataUpdate) Where(ps ...predicate.Metadata) *MetadataUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetLastApplicationsIteration sets the "last_applications_iteration" field.
func (mu *MetadataUpdate) SetLastApplicationsIteration(i int) *MetadataUpdate {
	mu.mutation.ResetLastApplicationsIteration()
	mu.mutation.SetLastApplicationsIteration(i)
	return mu
}

// SetNillableLastApplicationsIteration sets the "last_applications_iteration" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableLastApplicationsIteration(i *int) *MetadataUpdate {
	if i != nil {
		mu.SetLastApplicationsIteration(*i)
	}
	return mu
}

// AddLastApplicationsIteration adds i to the "last_applications_iteration" field.
func (mu *MetadataUpdate) AddLastApplicationsIteration(i int) *MetadataUpdate {
	mu.mutation.AddLastApplicationsIteration(i)
	return mu
}

// SetLastCalculationsIteration sets the "last_calculations_iteration" field.
func (mu *MetadataUpdate) SetLastCalculationsIteration(i int) *MetadataUpdate {
	mu.mutation.ResetLastCalculationsIteration()
	mu.mutation.SetLastCalculationsIteration(i)
	return mu
}

// SetNillableLastCalculationsIteration sets the "last_calculations_iteration" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableLastCalculationsIteration(i *int) *MetadataUpdate {
	if i != nil {
		mu.SetLastCalculationsIteration(*i)
	}
	return mu
}

// AddLastCalculationsIteration adds i to the "last_calculations_iteration" field.
func (mu *MetadataUpdate) AddLastCalculationsIteration(i int) *MetadataUpdate {
	mu.mutation.AddLastCalculationsIteration(i)
	return mu
}

// SetUploadingLock sets the "uploading_lock" field.
func (mu *MetadataUpdate) SetUploadingLock(b bool) *MetadataUpdate {
	mu.mutation.SetUploadingLock(b)
	return mu
}

// SetNillableUploadingLock sets the "uploading_lock" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableUploadingLock(b *bool) *MetadataUpdate {
	if b != nil {
		mu.SetUploadingLock(*b)
	}
	return mu
}

// Mutation returns the MetadataMutation object of the builder.
func (mu *MetadataUpdate) Mutation() *MetadataMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetadataUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetadataUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(metadata.Table, metadata.Columns, sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.LastApplicationsIteration(); ok {
		_spec.SetField(metadata.FieldLastApplicationsIteration, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedLastApplicationsIteration(); ok {
		_spec.AddField(metadata.FieldLastApplicationsIteration, field.TypeInt, value)
	}
	if value, ok := mu.mutation.LastCalculationsIteration(); ok {
		_spec.SetField(metadata.FieldLastCalculationsIteration, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedLastCalculationsIteration(); ok {
		_spec.AddField(metadata.FieldLastCalculationsIteration, field.TypeInt, value)
	}
	if value, ok := mu.mutation.UploadingLock(); ok {
		_spec.SetField(metadata.FieldUploadingLock, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MetadataUpdateOne is the builder for updating a single Metadata entity.
type MetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetadataMutation
}

// SetLastApplicationsIteration sets the "last_applications_iteration" field.
func (muo *MetadataUpdateOne) SetLastApplicationsIteration(i int) *MetadataUpdateOne {
	muo.mutation.ResetLastApplicationsIteration()
	muo.mutation.SetLastApplicationsIteration(i)
	return muo
}

// SetNillableLastApplicationsIteration sets the "last_applications_iteration" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableLastApplicationsIteration(i *int) *MetadataUpdateOne {
	if i != nil {
		muo.SetLastApplicationsIteration(*i)
	}
	return muo
}

// AddLastApplicationsIteration adds i to the "last_applications_iteration" field.
func (muo *MetadataUpdateOne) AddLastApplicationsIteration(i int) *MetadataUpdateOne {
	muo.mutation.AddLastApplicationsIteration(i)
	return muo
}

// SetLastCalculationsIteration sets the "last_calculations_iteration" field.
func (muo *MetadataUpdateOne) SetLastCalculationsIteration(i int) *MetadataUpdateOne {
	muo.mutation.ResetLastCalculationsIteration()
	muo.mutation.SetLastCalculationsIteration(i)
	return muo
}

// SetNillableLastCalculationsIteration sets the "last_calculations_iteration" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableLastCalculationsIteration(i *int) *MetadataUpdateOne {
	if i != nil {
		muo.SetLastCalculationsIteration(*i)
	}
	return muo
}

// AddLastCalculationsIteration adds i to the "last_calculations_iteration" field.
func (muo *MetadataUpdateOne) AddLastCalculationsIteration(i int) *MetadataUpdateOne {
	muo.mutation.AddLastCalculationsIteration(i)
	return muo
}

// SetUploadingLock sets the "uploading_lock" field.
func (muo *MetadataUpdateOne) SetUploadingLock(b bool) *MetadataUpdateOne {
	muo.mutation.SetUploadingLock(b)
	return muo
}

// SetNillableUploadingLock sets the "uploading_lock" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableUploadingLock(b *bool) *MetadataUpdateOne {
	if b != nil {
		muo.SetUploadingLock(*b)
	}
	return muo
}

// Mutation returns the MetadataMutation object of the builder.
func (muo *MetadataUpdateOne) Mutation() *MetadataMutation {
	return muo.mutation
}

// Where appends a list predicates to the MetadataUpdate builder.
func (muo *MetadataUpdateOne) Where(ps ...predicate.Metadata) *MetadataUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetadataUpdateOne) Select(field string, fields ...string) *MetadataUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Metadata entity.
func (muo *MetadataUpdateOne) Save(ctx context.Context) (*Metadata, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetadataUpdateOne) SaveX(ctx context.Context) *Metadata {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetadataUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MetadataUpdateOne) sqlSave(ctx context.Context) (_node *Metadata, err error) {
	_spec := sqlgraph.NewUpdateSpec(metadata.Table, metadata.Columns, sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "metadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metadata.FieldID)
		for _, f := range fields {
			if !metadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.LastApplicationsIteration(); ok {
		_spec.SetField(metadata.FieldLastApplicationsIteration, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedLastApplicationsIteration(); ok {
		_spec.AddField(metadata.FieldLastApplicationsIteration, field.TypeInt, value)
	}
	if value, ok := muo.mutation.LastCalculationsIteration(); ok {
		_spec.SetField(metadata.FieldLastCalculationsIteration, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedLastCalculationsIteration(); ok {
		_spec.AddField(metadata.FieldLastCalculationsIteration, field.TypeInt, value)
	}
	if value, ok := muo.mutation.UploadingLock(); ok {
		_spec.SetField(metadata.FieldUploadingLock, field.TypeBool, value)
	}
	_node = &Metadata{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
