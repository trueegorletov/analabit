// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/application"
	"analabit/core/ent/calculation"
	"analabit/core/ent/heading"
	"analabit/core/ent/varsity"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HeadingCreate is the builder for creating a Heading entity.
type HeadingCreate struct {
	config
	mutation *HeadingMutation
	hooks    []Hook
}

// SetRegularCapacity sets the "regular_capacity" field.
func (hc *HeadingCreate) SetRegularCapacity(i int) *HeadingCreate {
	hc.mutation.SetRegularCapacity(i)
	return hc
}

// SetTargetQuotaCapacity sets the "target_quota_capacity" field.
func (hc *HeadingCreate) SetTargetQuotaCapacity(i int) *HeadingCreate {
	hc.mutation.SetTargetQuotaCapacity(i)
	return hc
}

// SetDedicatedQuotaCapacity sets the "dedicated_quota_capacity" field.
func (hc *HeadingCreate) SetDedicatedQuotaCapacity(i int) *HeadingCreate {
	hc.mutation.SetDedicatedQuotaCapacity(i)
	return hc
}

// SetSpecialQuotaCapacity sets the "special_quota_capacity" field.
func (hc *HeadingCreate) SetSpecialQuotaCapacity(i int) *HeadingCreate {
	hc.mutation.SetSpecialQuotaCapacity(i)
	return hc
}

// SetCode sets the "code" field.
func (hc *HeadingCreate) SetCode(s string) *HeadingCreate {
	hc.mutation.SetCode(s)
	return hc
}

// SetName sets the "name" field.
func (hc *HeadingCreate) SetName(s string) *HeadingCreate {
	hc.mutation.SetName(s)
	return hc
}

// SetVarsityID sets the "varsity" edge to the Varsity entity by ID.
func (hc *HeadingCreate) SetVarsityID(id int) *HeadingCreate {
	hc.mutation.SetVarsityID(id)
	return hc
}

// SetVarsity sets the "varsity" edge to the Varsity entity.
func (hc *HeadingCreate) SetVarsity(v *Varsity) *HeadingCreate {
	return hc.SetVarsityID(v.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (hc *HeadingCreate) AddApplicationIDs(ids ...int) *HeadingCreate {
	hc.mutation.AddApplicationIDs(ids...)
	return hc
}

// AddApplications adds the "applications" edges to the Application entity.
func (hc *HeadingCreate) AddApplications(a ...*Application) *HeadingCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return hc.AddApplicationIDs(ids...)
}

// AddCalculationIDs adds the "calculations" edge to the Calculation entity by IDs.
func (hc *HeadingCreate) AddCalculationIDs(ids ...int) *HeadingCreate {
	hc.mutation.AddCalculationIDs(ids...)
	return hc
}

// AddCalculations adds the "calculations" edges to the Calculation entity.
func (hc *HeadingCreate) AddCalculations(c ...*Calculation) *HeadingCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hc.AddCalculationIDs(ids...)
}

// Mutation returns the HeadingMutation object of the builder.
func (hc *HeadingCreate) Mutation() *HeadingMutation {
	return hc.mutation
}

// Save creates the Heading in the database.
func (hc *HeadingCreate) Save(ctx context.Context) (*Heading, error) {
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HeadingCreate) SaveX(ctx context.Context) *Heading {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HeadingCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HeadingCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HeadingCreate) check() error {
	if _, ok := hc.mutation.RegularCapacity(); !ok {
		return &ValidationError{Name: "regular_capacity", err: errors.New(`ent: missing required field "Heading.regular_capacity"`)}
	}
	if _, ok := hc.mutation.TargetQuotaCapacity(); !ok {
		return &ValidationError{Name: "target_quota_capacity", err: errors.New(`ent: missing required field "Heading.target_quota_capacity"`)}
	}
	if _, ok := hc.mutation.DedicatedQuotaCapacity(); !ok {
		return &ValidationError{Name: "dedicated_quota_capacity", err: errors.New(`ent: missing required field "Heading.dedicated_quota_capacity"`)}
	}
	if _, ok := hc.mutation.SpecialQuotaCapacity(); !ok {
		return &ValidationError{Name: "special_quota_capacity", err: errors.New(`ent: missing required field "Heading.special_quota_capacity"`)}
	}
	if _, ok := hc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Heading.code"`)}
	}
	if _, ok := hc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Heading.name"`)}
	}
	if len(hc.mutation.VarsityIDs()) == 0 {
		return &ValidationError{Name: "varsity", err: errors.New(`ent: missing required edge "Heading.varsity"`)}
	}
	return nil
}

func (hc *HeadingCreate) sqlSave(ctx context.Context) (*Heading, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HeadingCreate) createSpec() (*Heading, *sqlgraph.CreateSpec) {
	var (
		_node = &Heading{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(heading.Table, sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.RegularCapacity(); ok {
		_spec.SetField(heading.FieldRegularCapacity, field.TypeInt, value)
		_node.RegularCapacity = value
	}
	if value, ok := hc.mutation.TargetQuotaCapacity(); ok {
		_spec.SetField(heading.FieldTargetQuotaCapacity, field.TypeInt, value)
		_node.TargetQuotaCapacity = value
	}
	if value, ok := hc.mutation.DedicatedQuotaCapacity(); ok {
		_spec.SetField(heading.FieldDedicatedQuotaCapacity, field.TypeInt, value)
		_node.DedicatedQuotaCapacity = value
	}
	if value, ok := hc.mutation.SpecialQuotaCapacity(); ok {
		_spec.SetField(heading.FieldSpecialQuotaCapacity, field.TypeInt, value)
		_node.SpecialQuotaCapacity = value
	}
	if value, ok := hc.mutation.Code(); ok {
		_spec.SetField(heading.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := hc.mutation.Name(); ok {
		_spec.SetField(heading.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := hc.mutation.VarsityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heading.VarsityTable,
			Columns: []string{heading.VarsityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(varsity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.varsity_headings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.ApplicationsTable,
			Columns: []string{heading.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.CalculationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.CalculationsTable,
			Columns: []string{heading.CalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HeadingCreateBulk is the builder for creating many Heading entities in bulk.
type HeadingCreateBulk struct {
	config
	err      error
	builders []*HeadingCreate
}

// Save creates the Heading entities in the database.
func (hcb *HeadingCreateBulk) Save(ctx context.Context) ([]*Heading, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Heading, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HeadingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HeadingCreateBulk) SaveX(ctx context.Context) []*Heading {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HeadingCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HeadingCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
