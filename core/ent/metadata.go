// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/metadata"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Metadata is the model entity for the Metadata schema.
type Metadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LastApplicationsIteration holds the value of the "last_applications_iteration" field.
	LastApplicationsIteration int `json:"last_applications_iteration,omitempty"`
	// LastCalculationsIteration holds the value of the "last_calculations_iteration" field.
	LastCalculationsIteration int `json:"last_calculations_iteration,omitempty"`
	// LastDrainedResultsIteration holds the value of the "last_drained_results_iteration" field.
	LastDrainedResultsIteration int `json:"last_drained_results_iteration,omitempty"`
	// UploadingLock holds the value of the "uploading_lock" field.
	UploadingLock bool `json:"uploading_lock,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metadata.FieldUploadingLock:
			values[i] = new(sql.NullBool)
		case metadata.FieldID, metadata.FieldLastApplicationsIteration, metadata.FieldLastCalculationsIteration, metadata.FieldLastDrainedResultsIteration:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metadata fields.
func (m *Metadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case metadata.FieldLastApplicationsIteration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_applications_iteration", values[i])
			} else if value.Valid {
				m.LastApplicationsIteration = int(value.Int64)
			}
		case metadata.FieldLastCalculationsIteration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_calculations_iteration", values[i])
			} else if value.Valid {
				m.LastCalculationsIteration = int(value.Int64)
			}
		case metadata.FieldLastDrainedResultsIteration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_drained_results_iteration", values[i])
			} else if value.Valid {
				m.LastDrainedResultsIteration = int(value.Int64)
			}
		case metadata.FieldUploadingLock:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field uploading_lock", values[i])
			} else if value.Valid {
				m.UploadingLock = value.Bool
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Metadata.
// This includes values selected through modifiers, order, etc.
func (m *Metadata) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Metadata.
// Note that you need to call Metadata.Unwrap() before calling this method if this Metadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metadata) Update() *MetadataUpdateOne {
	return NewMetadataClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Metadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metadata) Unwrap() *Metadata {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metadata is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metadata) String() string {
	var builder strings.Builder
	builder.WriteString("Metadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("last_applications_iteration=")
	builder.WriteString(fmt.Sprintf("%v", m.LastApplicationsIteration))
	builder.WriteString(", ")
	builder.WriteString("last_calculations_iteration=")
	builder.WriteString(fmt.Sprintf("%v", m.LastCalculationsIteration))
	builder.WriteString(", ")
	builder.WriteString("last_drained_results_iteration=")
	builder.WriteString(fmt.Sprintf("%v", m.LastDrainedResultsIteration))
	builder.WriteString(", ")
	builder.WriteString("uploading_lock=")
	builder.WriteString(fmt.Sprintf("%v", m.UploadingLock))
	builder.WriteByte(')')
	return builder.String()
}

// MetadataSlice is a parsable slice of Metadata.
type MetadataSlice []*Metadata
