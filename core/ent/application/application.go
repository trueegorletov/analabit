// Code generated by ent, DO NOT EDIT.

package application

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the application type in the database.
	Label = "application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStudentID holds the string denoting the student_id field in the database.
	FieldStudentID = "student_id"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldCompetitionType holds the string denoting the competition_type field in the database.
	FieldCompetitionType = "competition_type"
	// FieldRatingPlace holds the string denoting the rating_place field in the database.
	FieldRatingPlace = "rating_place"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldIteration holds the string denoting the iteration field in the database.
	FieldIteration = "iteration"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeHeading holds the string denoting the heading edge name in mutations.
	EdgeHeading = "heading"
	// Table holds the table name of the application in the database.
	Table = "applications"
	// HeadingTable is the table that holds the heading relation/edge.
	HeadingTable = "applications"
	// HeadingInverseTable is the table name for the Heading entity.
	// It exists in this package in order to avoid circular dependency with the "heading" package.
	HeadingInverseTable = "headings"
	// HeadingColumn is the table column denoting the heading relation/edge.
	HeadingColumn = "heading_applications"
)

// Columns holds all SQL columns for application fields.
var Columns = []string{
	FieldID,
	FieldStudentID,
	FieldPriority,
	FieldCompetitionType,
	FieldRatingPlace,
	FieldScore,
	FieldIteration,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "applications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"heading_applications",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Application queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStudentID orders the results by the student_id field.
func ByStudentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStudentID, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByCompetitionType orders the results by the competition_type field.
func ByCompetitionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitionType, opts...).ToFunc()
}

// ByRatingPlace orders the results by the rating_place field.
func ByRatingPlace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRatingPlace, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByIteration orders the results by the iteration field.
func ByIteration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIteration, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByHeadingField orders the results by heading field.
func ByHeadingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHeadingStep(), sql.OrderByField(field, opts...))
	}
}
func newHeadingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HeadingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HeadingTable, HeadingColumn),
	)
}
