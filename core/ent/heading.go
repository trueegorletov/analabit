// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/heading"
	"analabit/core/ent/varsity"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Heading is the model entity for the Heading schema.
type Heading struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RegularCapacity holds the value of the "regular_capacity" field.
	RegularCapacity int `json:"regular_capacity,omitempty"`
	// TargetQuotaCapacity holds the value of the "target_quota_capacity" field.
	TargetQuotaCapacity int `json:"target_quota_capacity,omitempty"`
	// DedicatedQuotaCapacity holds the value of the "dedicated_quota_capacity" field.
	DedicatedQuotaCapacity int `json:"dedicated_quota_capacity,omitempty"`
	// SpecialQuotaCapacity holds the value of the "special_quota_capacity" field.
	SpecialQuotaCapacity int `json:"special_quota_capacity,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HeadingQuery when eager-loading is set.
	Edges            HeadingEdges `json:"edges"`
	varsity_headings *int
	selectValues     sql.SelectValues
}

// HeadingEdges holds the relations/edges for other nodes in the graph.
type HeadingEdges struct {
	// Varsity holds the value of the varsity edge.
	Varsity *Varsity `json:"varsity,omitempty"`
	// Applications holds the value of the applications edge.
	Applications []*Application `json:"applications,omitempty"`
	// Calculations holds the value of the calculations edge.
	Calculations []*Calculation `json:"calculations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// VarsityOrErr returns the Varsity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HeadingEdges) VarsityOrErr() (*Varsity, error) {
	if e.Varsity != nil {
		return e.Varsity, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: varsity.Label}
	}
	return nil, &NotLoadedError{edge: "varsity"}
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e HeadingEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[1] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// CalculationsOrErr returns the Calculations value or an error if the edge
// was not loaded in eager-loading.
func (e HeadingEdges) CalculationsOrErr() ([]*Calculation, error) {
	if e.loadedTypes[2] {
		return e.Calculations, nil
	}
	return nil, &NotLoadedError{edge: "calculations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Heading) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case heading.FieldID, heading.FieldRegularCapacity, heading.FieldTargetQuotaCapacity, heading.FieldDedicatedQuotaCapacity, heading.FieldSpecialQuotaCapacity:
			values[i] = new(sql.NullInt64)
		case heading.FieldCode, heading.FieldName:
			values[i] = new(sql.NullString)
		case heading.ForeignKeys[0]: // varsity_headings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Heading fields.
func (h *Heading) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case heading.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case heading.FieldRegularCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field regular_capacity", values[i])
			} else if value.Valid {
				h.RegularCapacity = int(value.Int64)
			}
		case heading.FieldTargetQuotaCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_quota_capacity", values[i])
			} else if value.Valid {
				h.TargetQuotaCapacity = int(value.Int64)
			}
		case heading.FieldDedicatedQuotaCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dedicated_quota_capacity", values[i])
			} else if value.Valid {
				h.DedicatedQuotaCapacity = int(value.Int64)
			}
		case heading.FieldSpecialQuotaCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special_quota_capacity", values[i])
			} else if value.Valid {
				h.SpecialQuotaCapacity = int(value.Int64)
			}
		case heading.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				h.Code = value.String
			}
		case heading.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case heading.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field varsity_headings", value)
			} else if value.Valid {
				h.varsity_headings = new(int)
				*h.varsity_headings = int(value.Int64)
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Heading.
// This includes values selected through modifiers, order, etc.
func (h *Heading) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryVarsity queries the "varsity" edge of the Heading entity.
func (h *Heading) QueryVarsity() *VarsityQuery {
	return NewHeadingClient(h.config).QueryVarsity(h)
}

// QueryApplications queries the "applications" edge of the Heading entity.
func (h *Heading) QueryApplications() *ApplicationQuery {
	return NewHeadingClient(h.config).QueryApplications(h)
}

// QueryCalculations queries the "calculations" edge of the Heading entity.
func (h *Heading) QueryCalculations() *CalculationQuery {
	return NewHeadingClient(h.config).QueryCalculations(h)
}

// Update returns a builder for updating this Heading.
// Note that you need to call Heading.Unwrap() before calling this method if this Heading
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Heading) Update() *HeadingUpdateOne {
	return NewHeadingClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Heading entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Heading) Unwrap() *Heading {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Heading is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Heading) String() string {
	var builder strings.Builder
	builder.WriteString("Heading(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("regular_capacity=")
	builder.WriteString(fmt.Sprintf("%v", h.RegularCapacity))
	builder.WriteString(", ")
	builder.WriteString("target_quota_capacity=")
	builder.WriteString(fmt.Sprintf("%v", h.TargetQuotaCapacity))
	builder.WriteString(", ")
	builder.WriteString("dedicated_quota_capacity=")
	builder.WriteString(fmt.Sprintf("%v", h.DedicatedQuotaCapacity))
	builder.WriteString(", ")
	builder.WriteString("special_quota_capacity=")
	builder.WriteString(fmt.Sprintf("%v", h.SpecialQuotaCapacity))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(h.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Headings is a parsable slice of Heading.
type Headings []*Heading
