// Code generated by ent, DO NOT EDIT.

package drainedresult

import (
	"analabit/core/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldID, id))
}

// DrainedPercent applies equality check predicate on the "drained_percent" field. It's identical to DrainedPercentEQ.
func DrainedPercent(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldDrainedPercent, v))
}

// AvgPassingScore applies equality check predicate on the "avg_passing_score" field. It's identical to AvgPassingScoreEQ.
func AvgPassingScore(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldAvgPassingScore, v))
}

// MinPassingScore applies equality check predicate on the "min_passing_score" field. It's identical to MinPassingScoreEQ.
func MinPassingScore(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMinPassingScore, v))
}

// MaxPassingScore applies equality check predicate on the "max_passing_score" field. It's identical to MaxPassingScoreEQ.
func MaxPassingScore(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMaxPassingScore, v))
}

// MedPassingScore applies equality check predicate on the "med_passing_score" field. It's identical to MedPassingScoreEQ.
func MedPassingScore(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMedPassingScore, v))
}

// AvgLastAdmittedRatingPlace applies equality check predicate on the "avg_last_admitted_rating_place" field. It's identical to AvgLastAdmittedRatingPlaceEQ.
func AvgLastAdmittedRatingPlace(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldAvgLastAdmittedRatingPlace, v))
}

// MinLastAdmittedRatingPlace applies equality check predicate on the "min_last_admitted_rating_place" field. It's identical to MinLastAdmittedRatingPlaceEQ.
func MinLastAdmittedRatingPlace(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMinLastAdmittedRatingPlace, v))
}

// MaxLastAdmittedRatingPlace applies equality check predicate on the "max_last_admitted_rating_place" field. It's identical to MaxLastAdmittedRatingPlaceEQ.
func MaxLastAdmittedRatingPlace(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMaxLastAdmittedRatingPlace, v))
}

// MedLastAdmittedRatingPlace applies equality check predicate on the "med_last_admitted_rating_place" field. It's identical to MedLastAdmittedRatingPlaceEQ.
func MedLastAdmittedRatingPlace(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMedLastAdmittedRatingPlace, v))
}

// Iteration applies equality check predicate on the "iteration" field. It's identical to IterationEQ.
func Iteration(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldIteration, v))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldRunID, v))
}

// DrainedPercentEQ applies the EQ predicate on the "drained_percent" field.
func DrainedPercentEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldDrainedPercent, v))
}

// DrainedPercentNEQ applies the NEQ predicate on the "drained_percent" field.
func DrainedPercentNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldDrainedPercent, v))
}

// DrainedPercentIn applies the In predicate on the "drained_percent" field.
func DrainedPercentIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldDrainedPercent, vs...))
}

// DrainedPercentNotIn applies the NotIn predicate on the "drained_percent" field.
func DrainedPercentNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldDrainedPercent, vs...))
}

// DrainedPercentGT applies the GT predicate on the "drained_percent" field.
func DrainedPercentGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldDrainedPercent, v))
}

// DrainedPercentGTE applies the GTE predicate on the "drained_percent" field.
func DrainedPercentGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldDrainedPercent, v))
}

// DrainedPercentLT applies the LT predicate on the "drained_percent" field.
func DrainedPercentLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldDrainedPercent, v))
}

// DrainedPercentLTE applies the LTE predicate on the "drained_percent" field.
func DrainedPercentLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldDrainedPercent, v))
}

// AvgPassingScoreEQ applies the EQ predicate on the "avg_passing_score" field.
func AvgPassingScoreEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldAvgPassingScore, v))
}

// AvgPassingScoreNEQ applies the NEQ predicate on the "avg_passing_score" field.
func AvgPassingScoreNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldAvgPassingScore, v))
}

// AvgPassingScoreIn applies the In predicate on the "avg_passing_score" field.
func AvgPassingScoreIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldAvgPassingScore, vs...))
}

// AvgPassingScoreNotIn applies the NotIn predicate on the "avg_passing_score" field.
func AvgPassingScoreNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldAvgPassingScore, vs...))
}

// AvgPassingScoreGT applies the GT predicate on the "avg_passing_score" field.
func AvgPassingScoreGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldAvgPassingScore, v))
}

// AvgPassingScoreGTE applies the GTE predicate on the "avg_passing_score" field.
func AvgPassingScoreGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldAvgPassingScore, v))
}

// AvgPassingScoreLT applies the LT predicate on the "avg_passing_score" field.
func AvgPassingScoreLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldAvgPassingScore, v))
}

// AvgPassingScoreLTE applies the LTE predicate on the "avg_passing_score" field.
func AvgPassingScoreLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldAvgPassingScore, v))
}

// MinPassingScoreEQ applies the EQ predicate on the "min_passing_score" field.
func MinPassingScoreEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMinPassingScore, v))
}

// MinPassingScoreNEQ applies the NEQ predicate on the "min_passing_score" field.
func MinPassingScoreNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldMinPassingScore, v))
}

// MinPassingScoreIn applies the In predicate on the "min_passing_score" field.
func MinPassingScoreIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldMinPassingScore, vs...))
}

// MinPassingScoreNotIn applies the NotIn predicate on the "min_passing_score" field.
func MinPassingScoreNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldMinPassingScore, vs...))
}

// MinPassingScoreGT applies the GT predicate on the "min_passing_score" field.
func MinPassingScoreGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldMinPassingScore, v))
}

// MinPassingScoreGTE applies the GTE predicate on the "min_passing_score" field.
func MinPassingScoreGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldMinPassingScore, v))
}

// MinPassingScoreLT applies the LT predicate on the "min_passing_score" field.
func MinPassingScoreLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldMinPassingScore, v))
}

// MinPassingScoreLTE applies the LTE predicate on the "min_passing_score" field.
func MinPassingScoreLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldMinPassingScore, v))
}

// MaxPassingScoreEQ applies the EQ predicate on the "max_passing_score" field.
func MaxPassingScoreEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMaxPassingScore, v))
}

// MaxPassingScoreNEQ applies the NEQ predicate on the "max_passing_score" field.
func MaxPassingScoreNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldMaxPassingScore, v))
}

// MaxPassingScoreIn applies the In predicate on the "max_passing_score" field.
func MaxPassingScoreIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldMaxPassingScore, vs...))
}

// MaxPassingScoreNotIn applies the NotIn predicate on the "max_passing_score" field.
func MaxPassingScoreNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldMaxPassingScore, vs...))
}

// MaxPassingScoreGT applies the GT predicate on the "max_passing_score" field.
func MaxPassingScoreGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldMaxPassingScore, v))
}

// MaxPassingScoreGTE applies the GTE predicate on the "max_passing_score" field.
func MaxPassingScoreGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldMaxPassingScore, v))
}

// MaxPassingScoreLT applies the LT predicate on the "max_passing_score" field.
func MaxPassingScoreLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldMaxPassingScore, v))
}

// MaxPassingScoreLTE applies the LTE predicate on the "max_passing_score" field.
func MaxPassingScoreLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldMaxPassingScore, v))
}

// MedPassingScoreEQ applies the EQ predicate on the "med_passing_score" field.
func MedPassingScoreEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMedPassingScore, v))
}

// MedPassingScoreNEQ applies the NEQ predicate on the "med_passing_score" field.
func MedPassingScoreNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldMedPassingScore, v))
}

// MedPassingScoreIn applies the In predicate on the "med_passing_score" field.
func MedPassingScoreIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldMedPassingScore, vs...))
}

// MedPassingScoreNotIn applies the NotIn predicate on the "med_passing_score" field.
func MedPassingScoreNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldMedPassingScore, vs...))
}

// MedPassingScoreGT applies the GT predicate on the "med_passing_score" field.
func MedPassingScoreGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldMedPassingScore, v))
}

// MedPassingScoreGTE applies the GTE predicate on the "med_passing_score" field.
func MedPassingScoreGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldMedPassingScore, v))
}

// MedPassingScoreLT applies the LT predicate on the "med_passing_score" field.
func MedPassingScoreLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldMedPassingScore, v))
}

// MedPassingScoreLTE applies the LTE predicate on the "med_passing_score" field.
func MedPassingScoreLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldMedPassingScore, v))
}

// AvgLastAdmittedRatingPlaceEQ applies the EQ predicate on the "avg_last_admitted_rating_place" field.
func AvgLastAdmittedRatingPlaceEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldAvgLastAdmittedRatingPlace, v))
}

// AvgLastAdmittedRatingPlaceNEQ applies the NEQ predicate on the "avg_last_admitted_rating_place" field.
func AvgLastAdmittedRatingPlaceNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldAvgLastAdmittedRatingPlace, v))
}

// AvgLastAdmittedRatingPlaceIn applies the In predicate on the "avg_last_admitted_rating_place" field.
func AvgLastAdmittedRatingPlaceIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldAvgLastAdmittedRatingPlace, vs...))
}

// AvgLastAdmittedRatingPlaceNotIn applies the NotIn predicate on the "avg_last_admitted_rating_place" field.
func AvgLastAdmittedRatingPlaceNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldAvgLastAdmittedRatingPlace, vs...))
}

// AvgLastAdmittedRatingPlaceGT applies the GT predicate on the "avg_last_admitted_rating_place" field.
func AvgLastAdmittedRatingPlaceGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldAvgLastAdmittedRatingPlace, v))
}

// AvgLastAdmittedRatingPlaceGTE applies the GTE predicate on the "avg_last_admitted_rating_place" field.
func AvgLastAdmittedRatingPlaceGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldAvgLastAdmittedRatingPlace, v))
}

// AvgLastAdmittedRatingPlaceLT applies the LT predicate on the "avg_last_admitted_rating_place" field.
func AvgLastAdmittedRatingPlaceLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldAvgLastAdmittedRatingPlace, v))
}

// AvgLastAdmittedRatingPlaceLTE applies the LTE predicate on the "avg_last_admitted_rating_place" field.
func AvgLastAdmittedRatingPlaceLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldAvgLastAdmittedRatingPlace, v))
}

// MinLastAdmittedRatingPlaceEQ applies the EQ predicate on the "min_last_admitted_rating_place" field.
func MinLastAdmittedRatingPlaceEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMinLastAdmittedRatingPlace, v))
}

// MinLastAdmittedRatingPlaceNEQ applies the NEQ predicate on the "min_last_admitted_rating_place" field.
func MinLastAdmittedRatingPlaceNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldMinLastAdmittedRatingPlace, v))
}

// MinLastAdmittedRatingPlaceIn applies the In predicate on the "min_last_admitted_rating_place" field.
func MinLastAdmittedRatingPlaceIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldMinLastAdmittedRatingPlace, vs...))
}

// MinLastAdmittedRatingPlaceNotIn applies the NotIn predicate on the "min_last_admitted_rating_place" field.
func MinLastAdmittedRatingPlaceNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldMinLastAdmittedRatingPlace, vs...))
}

// MinLastAdmittedRatingPlaceGT applies the GT predicate on the "min_last_admitted_rating_place" field.
func MinLastAdmittedRatingPlaceGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldMinLastAdmittedRatingPlace, v))
}

// MinLastAdmittedRatingPlaceGTE applies the GTE predicate on the "min_last_admitted_rating_place" field.
func MinLastAdmittedRatingPlaceGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldMinLastAdmittedRatingPlace, v))
}

// MinLastAdmittedRatingPlaceLT applies the LT predicate on the "min_last_admitted_rating_place" field.
func MinLastAdmittedRatingPlaceLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldMinLastAdmittedRatingPlace, v))
}

// MinLastAdmittedRatingPlaceLTE applies the LTE predicate on the "min_last_admitted_rating_place" field.
func MinLastAdmittedRatingPlaceLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldMinLastAdmittedRatingPlace, v))
}

// MaxLastAdmittedRatingPlaceEQ applies the EQ predicate on the "max_last_admitted_rating_place" field.
func MaxLastAdmittedRatingPlaceEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMaxLastAdmittedRatingPlace, v))
}

// MaxLastAdmittedRatingPlaceNEQ applies the NEQ predicate on the "max_last_admitted_rating_place" field.
func MaxLastAdmittedRatingPlaceNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldMaxLastAdmittedRatingPlace, v))
}

// MaxLastAdmittedRatingPlaceIn applies the In predicate on the "max_last_admitted_rating_place" field.
func MaxLastAdmittedRatingPlaceIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldMaxLastAdmittedRatingPlace, vs...))
}

// MaxLastAdmittedRatingPlaceNotIn applies the NotIn predicate on the "max_last_admitted_rating_place" field.
func MaxLastAdmittedRatingPlaceNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldMaxLastAdmittedRatingPlace, vs...))
}

// MaxLastAdmittedRatingPlaceGT applies the GT predicate on the "max_last_admitted_rating_place" field.
func MaxLastAdmittedRatingPlaceGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldMaxLastAdmittedRatingPlace, v))
}

// MaxLastAdmittedRatingPlaceGTE applies the GTE predicate on the "max_last_admitted_rating_place" field.
func MaxLastAdmittedRatingPlaceGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldMaxLastAdmittedRatingPlace, v))
}

// MaxLastAdmittedRatingPlaceLT applies the LT predicate on the "max_last_admitted_rating_place" field.
func MaxLastAdmittedRatingPlaceLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldMaxLastAdmittedRatingPlace, v))
}

// MaxLastAdmittedRatingPlaceLTE applies the LTE predicate on the "max_last_admitted_rating_place" field.
func MaxLastAdmittedRatingPlaceLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldMaxLastAdmittedRatingPlace, v))
}

// MedLastAdmittedRatingPlaceEQ applies the EQ predicate on the "med_last_admitted_rating_place" field.
func MedLastAdmittedRatingPlaceEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldMedLastAdmittedRatingPlace, v))
}

// MedLastAdmittedRatingPlaceNEQ applies the NEQ predicate on the "med_last_admitted_rating_place" field.
func MedLastAdmittedRatingPlaceNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldMedLastAdmittedRatingPlace, v))
}

// MedLastAdmittedRatingPlaceIn applies the In predicate on the "med_last_admitted_rating_place" field.
func MedLastAdmittedRatingPlaceIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldMedLastAdmittedRatingPlace, vs...))
}

// MedLastAdmittedRatingPlaceNotIn applies the NotIn predicate on the "med_last_admitted_rating_place" field.
func MedLastAdmittedRatingPlaceNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldMedLastAdmittedRatingPlace, vs...))
}

// MedLastAdmittedRatingPlaceGT applies the GT predicate on the "med_last_admitted_rating_place" field.
func MedLastAdmittedRatingPlaceGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldMedLastAdmittedRatingPlace, v))
}

// MedLastAdmittedRatingPlaceGTE applies the GTE predicate on the "med_last_admitted_rating_place" field.
func MedLastAdmittedRatingPlaceGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldMedLastAdmittedRatingPlace, v))
}

// MedLastAdmittedRatingPlaceLT applies the LT predicate on the "med_last_admitted_rating_place" field.
func MedLastAdmittedRatingPlaceLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldMedLastAdmittedRatingPlace, v))
}

// MedLastAdmittedRatingPlaceLTE applies the LTE predicate on the "med_last_admitted_rating_place" field.
func MedLastAdmittedRatingPlaceLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldMedLastAdmittedRatingPlace, v))
}

// IterationEQ applies the EQ predicate on the "iteration" field.
func IterationEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldIteration, v))
}

// IterationNEQ applies the NEQ predicate on the "iteration" field.
func IterationNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldIteration, v))
}

// IterationIn applies the In predicate on the "iteration" field.
func IterationIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldIteration, vs...))
}

// IterationNotIn applies the NotIn predicate on the "iteration" field.
func IterationNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldIteration, vs...))
}

// IterationGT applies the GT predicate on the "iteration" field.
func IterationGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldIteration, v))
}

// IterationGTE applies the GTE predicate on the "iteration" field.
func IterationGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldIteration, v))
}

// IterationLT applies the LT predicate on the "iteration" field.
func IterationLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldIteration, v))
}

// IterationLTE applies the LTE predicate on the "iteration" field.
func IterationLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldIteration, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldRunID, v))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldRunID, v))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldRunID, vs...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldRunID, vs...))
}

// HasHeading applies the HasEdge predicate on the "heading" edge.
func HasHeading() predicate.DrainedResult {
	return predicate.DrainedResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HeadingTable, HeadingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeadingWith applies the HasEdge predicate on the "heading" edge with a given conditions (other predicates).
func HasHeadingWith(preds ...predicate.Heading) predicate.DrainedResult {
	return predicate.DrainedResult(func(s *sql.Selector) {
		step := newHeadingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRun applies the HasEdge predicate on the "run" edge.
func HasRun() predicate.DrainedResult {
	return predicate.DrainedResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RunTable, RunColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRunWith applies the HasEdge predicate on the "run" edge with a given conditions (other predicates).
func HasRunWith(preds ...predicate.Run) predicate.DrainedResult {
	return predicate.DrainedResult(func(s *sql.Selector) {
		step := newRunStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DrainedResult) predicate.DrainedResult {
	return predicate.DrainedResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DrainedResult) predicate.DrainedResult {
	return predicate.DrainedResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DrainedResult) predicate.DrainedResult {
	return predicate.DrainedResult(sql.NotPredicates(p))
}
