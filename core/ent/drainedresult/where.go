// Code generated by ent, DO NOT EDIT.

package drainedresult

import (
	"analabit/core/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldID, id))
}

// DrainedPercent applies equality check predicate on the "drained_percent" field. It's identical to DrainedPercentEQ.
func DrainedPercent(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldDrainedPercent, v))
}

// PassingScore applies equality check predicate on the "passing_score" field. It's identical to PassingScoreEQ.
func PassingScore(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldPassingScore, v))
}

// LastAdmittedRatingPlace applies equality check predicate on the "last_admitted_rating_place" field. It's identical to LastAdmittedRatingPlaceEQ.
func LastAdmittedRatingPlace(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldLastAdmittedRatingPlace, v))
}

// Iteration applies equality check predicate on the "iteration" field. It's identical to IterationEQ.
func Iteration(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldIteration, v))
}

// DrainedPercentEQ applies the EQ predicate on the "drained_percent" field.
func DrainedPercentEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldDrainedPercent, v))
}

// DrainedPercentNEQ applies the NEQ predicate on the "drained_percent" field.
func DrainedPercentNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldDrainedPercent, v))
}

// DrainedPercentIn applies the In predicate on the "drained_percent" field.
func DrainedPercentIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldDrainedPercent, vs...))
}

// DrainedPercentNotIn applies the NotIn predicate on the "drained_percent" field.
func DrainedPercentNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldDrainedPercent, vs...))
}

// DrainedPercentGT applies the GT predicate on the "drained_percent" field.
func DrainedPercentGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldDrainedPercent, v))
}

// DrainedPercentGTE applies the GTE predicate on the "drained_percent" field.
func DrainedPercentGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldDrainedPercent, v))
}

// DrainedPercentLT applies the LT predicate on the "drained_percent" field.
func DrainedPercentLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldDrainedPercent, v))
}

// DrainedPercentLTE applies the LTE predicate on the "drained_percent" field.
func DrainedPercentLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldDrainedPercent, v))
}

// PassingScoreEQ applies the EQ predicate on the "passing_score" field.
func PassingScoreEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldPassingScore, v))
}

// PassingScoreNEQ applies the NEQ predicate on the "passing_score" field.
func PassingScoreNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldPassingScore, v))
}

// PassingScoreIn applies the In predicate on the "passing_score" field.
func PassingScoreIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldPassingScore, vs...))
}

// PassingScoreNotIn applies the NotIn predicate on the "passing_score" field.
func PassingScoreNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldPassingScore, vs...))
}

// PassingScoreGT applies the GT predicate on the "passing_score" field.
func PassingScoreGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldPassingScore, v))
}

// PassingScoreGTE applies the GTE predicate on the "passing_score" field.
func PassingScoreGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldPassingScore, v))
}

// PassingScoreLT applies the LT predicate on the "passing_score" field.
func PassingScoreLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldPassingScore, v))
}

// PassingScoreLTE applies the LTE predicate on the "passing_score" field.
func PassingScoreLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldPassingScore, v))
}

// LastAdmittedRatingPlaceEQ applies the EQ predicate on the "last_admitted_rating_place" field.
func LastAdmittedRatingPlaceEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldLastAdmittedRatingPlace, v))
}

// LastAdmittedRatingPlaceNEQ applies the NEQ predicate on the "last_admitted_rating_place" field.
func LastAdmittedRatingPlaceNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldLastAdmittedRatingPlace, v))
}

// LastAdmittedRatingPlaceIn applies the In predicate on the "last_admitted_rating_place" field.
func LastAdmittedRatingPlaceIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldLastAdmittedRatingPlace, vs...))
}

// LastAdmittedRatingPlaceNotIn applies the NotIn predicate on the "last_admitted_rating_place" field.
func LastAdmittedRatingPlaceNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldLastAdmittedRatingPlace, vs...))
}

// LastAdmittedRatingPlaceGT applies the GT predicate on the "last_admitted_rating_place" field.
func LastAdmittedRatingPlaceGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldLastAdmittedRatingPlace, v))
}

// LastAdmittedRatingPlaceGTE applies the GTE predicate on the "last_admitted_rating_place" field.
func LastAdmittedRatingPlaceGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldLastAdmittedRatingPlace, v))
}

// LastAdmittedRatingPlaceLT applies the LT predicate on the "last_admitted_rating_place" field.
func LastAdmittedRatingPlaceLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldLastAdmittedRatingPlace, v))
}

// LastAdmittedRatingPlaceLTE applies the LTE predicate on the "last_admitted_rating_place" field.
func LastAdmittedRatingPlaceLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldLastAdmittedRatingPlace, v))
}

// IterationEQ applies the EQ predicate on the "iteration" field.
func IterationEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldEQ(FieldIteration, v))
}

// IterationNEQ applies the NEQ predicate on the "iteration" field.
func IterationNEQ(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNEQ(FieldIteration, v))
}

// IterationIn applies the In predicate on the "iteration" field.
func IterationIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldIn(FieldIteration, vs...))
}

// IterationNotIn applies the NotIn predicate on the "iteration" field.
func IterationNotIn(vs ...int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldNotIn(FieldIteration, vs...))
}

// IterationGT applies the GT predicate on the "iteration" field.
func IterationGT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGT(FieldIteration, v))
}

// IterationGTE applies the GTE predicate on the "iteration" field.
func IterationGTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldGTE(FieldIteration, v))
}

// IterationLT applies the LT predicate on the "iteration" field.
func IterationLT(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLT(FieldIteration, v))
}

// IterationLTE applies the LTE predicate on the "iteration" field.
func IterationLTE(v int) predicate.DrainedResult {
	return predicate.DrainedResult(sql.FieldLTE(FieldIteration, v))
}

// HasHeading applies the HasEdge predicate on the "heading" edge.
func HasHeading() predicate.DrainedResult {
	return predicate.DrainedResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HeadingTable, HeadingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeadingWith applies the HasEdge predicate on the "heading" edge with a given conditions (other predicates).
func HasHeadingWith(preds ...predicate.Heading) predicate.DrainedResult {
	return predicate.DrainedResult(func(s *sql.Selector) {
		step := newHeadingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DrainedResult) predicate.DrainedResult {
	return predicate.DrainedResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DrainedResult) predicate.DrainedResult {
	return predicate.DrainedResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DrainedResult) predicate.DrainedResult {
	return predicate.DrainedResult(sql.NotPredicates(p))
}
