// Code generated by ent, DO NOT EDIT.

package drainedresult

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the drainedresult type in the database.
	Label = "drained_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDrainedPercent holds the string denoting the drained_percent field in the database.
	FieldDrainedPercent = "drained_percent"
	// FieldAvgPassingScore holds the string denoting the avg_passing_score field in the database.
	FieldAvgPassingScore = "avg_passing_score"
	// FieldMinPassingScore holds the string denoting the min_passing_score field in the database.
	FieldMinPassingScore = "min_passing_score"
	// FieldMaxPassingScore holds the string denoting the max_passing_score field in the database.
	FieldMaxPassingScore = "max_passing_score"
	// FieldMedPassingScore holds the string denoting the med_passing_score field in the database.
	FieldMedPassingScore = "med_passing_score"
	// FieldAvgLastAdmittedRatingPlace holds the string denoting the avg_last_admitted_rating_place field in the database.
	FieldAvgLastAdmittedRatingPlace = "avg_last_admitted_rating_place"
	// FieldMinLastAdmittedRatingPlace holds the string denoting the min_last_admitted_rating_place field in the database.
	FieldMinLastAdmittedRatingPlace = "min_last_admitted_rating_place"
	// FieldMaxLastAdmittedRatingPlace holds the string denoting the max_last_admitted_rating_place field in the database.
	FieldMaxLastAdmittedRatingPlace = "max_last_admitted_rating_place"
	// FieldMedLastAdmittedRatingPlace holds the string denoting the med_last_admitted_rating_place field in the database.
	FieldMedLastAdmittedRatingPlace = "med_last_admitted_rating_place"
	// FieldIteration holds the string denoting the iteration field in the database.
	FieldIteration = "iteration"
	// EdgeHeading holds the string denoting the heading edge name in mutations.
	EdgeHeading = "heading"
	// Table holds the table name of the drainedresult in the database.
	Table = "drained_results"
	// HeadingTable is the table that holds the heading relation/edge.
	HeadingTable = "drained_results"
	// HeadingInverseTable is the table name for the Heading entity.
	// It exists in this package in order to avoid circular dependency with the "heading" package.
	HeadingInverseTable = "headings"
	// HeadingColumn is the table column denoting the heading relation/edge.
	HeadingColumn = "heading_drained_results"
)

// Columns holds all SQL columns for drainedresult fields.
var Columns = []string{
	FieldID,
	FieldDrainedPercent,
	FieldAvgPassingScore,
	FieldMinPassingScore,
	FieldMaxPassingScore,
	FieldMedPassingScore,
	FieldAvgLastAdmittedRatingPlace,
	FieldMinLastAdmittedRatingPlace,
	FieldMaxLastAdmittedRatingPlace,
	FieldMedLastAdmittedRatingPlace,
	FieldIteration,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "drained_results"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"heading_drained_results",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DrainedResult queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDrainedPercent orders the results by the drained_percent field.
func ByDrainedPercent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrainedPercent, opts...).ToFunc()
}

// ByAvgPassingScore orders the results by the avg_passing_score field.
func ByAvgPassingScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgPassingScore, opts...).ToFunc()
}

// ByMinPassingScore orders the results by the min_passing_score field.
func ByMinPassingScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinPassingScore, opts...).ToFunc()
}

// ByMaxPassingScore orders the results by the max_passing_score field.
func ByMaxPassingScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxPassingScore, opts...).ToFunc()
}

// ByMedPassingScore orders the results by the med_passing_score field.
func ByMedPassingScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedPassingScore, opts...).ToFunc()
}

// ByAvgLastAdmittedRatingPlace orders the results by the avg_last_admitted_rating_place field.
func ByAvgLastAdmittedRatingPlace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgLastAdmittedRatingPlace, opts...).ToFunc()
}

// ByMinLastAdmittedRatingPlace orders the results by the min_last_admitted_rating_place field.
func ByMinLastAdmittedRatingPlace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinLastAdmittedRatingPlace, opts...).ToFunc()
}

// ByMaxLastAdmittedRatingPlace orders the results by the max_last_admitted_rating_place field.
func ByMaxLastAdmittedRatingPlace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxLastAdmittedRatingPlace, opts...).ToFunc()
}

// ByMedLastAdmittedRatingPlace orders the results by the med_last_admitted_rating_place field.
func ByMedLastAdmittedRatingPlace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedLastAdmittedRatingPlace, opts...).ToFunc()
}

// ByIteration orders the results by the iteration field.
func ByIteration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIteration, opts...).ToFunc()
}

// ByHeadingField orders the results by heading field.
func ByHeadingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHeadingStep(), sql.OrderByField(field, opts...))
	}
}
func newHeadingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HeadingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HeadingTable, HeadingColumn),
	)
}
