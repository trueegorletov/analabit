// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/trueegorletov/analabit/core/ent/calculation"
	"github.com/trueegorletov/analabit/core/ent/heading"
	"github.com/trueegorletov/analabit/core/ent/run"
)

// CalculationCreate is the builder for creating a Calculation entity.
type CalculationCreate struct {
	config
	mutation *CalculationMutation
	hooks    []Hook
}

// SetStudentID sets the "student_id" field.
func (cc *CalculationCreate) SetStudentID(s string) *CalculationCreate {
	cc.mutation.SetStudentID(s)
	return cc
}

// SetAdmittedPlace sets the "admitted_place" field.
func (cc *CalculationCreate) SetAdmittedPlace(i int) *CalculationCreate {
	cc.mutation.SetAdmittedPlace(i)
	return cc
}

// SetRunID sets the "run_id" field.
func (cc *CalculationCreate) SetRunID(i int) *CalculationCreate {
	cc.mutation.SetRunID(i)
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CalculationCreate) SetUpdatedAt(t time.Time) *CalculationCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CalculationCreate) SetNillableUpdatedAt(t *time.Time) *CalculationCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetHeadingID sets the "heading" edge to the Heading entity by ID.
func (cc *CalculationCreate) SetHeadingID(id int) *CalculationCreate {
	cc.mutation.SetHeadingID(id)
	return cc
}

// SetHeading sets the "heading" edge to the Heading entity.
func (cc *CalculationCreate) SetHeading(h *Heading) *CalculationCreate {
	return cc.SetHeadingID(h.ID)
}

// SetRun sets the "run" edge to the Run entity.
func (cc *CalculationCreate) SetRun(r *Run) *CalculationCreate {
	return cc.SetRunID(r.ID)
}

// Mutation returns the CalculationMutation object of the builder.
func (cc *CalculationCreate) Mutation() *CalculationMutation {
	return cc.mutation
}

// Save creates the Calculation in the database.
func (cc *CalculationCreate) Save(ctx context.Context) (*Calculation, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CalculationCreate) SaveX(ctx context.Context) *Calculation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CalculationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CalculationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CalculationCreate) defaults() {
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := calculation.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CalculationCreate) check() error {
	if _, ok := cc.mutation.StudentID(); !ok {
		return &ValidationError{Name: "student_id", err: errors.New(`ent: missing required field "Calculation.student_id"`)}
	}
	if _, ok := cc.mutation.AdmittedPlace(); !ok {
		return &ValidationError{Name: "admitted_place", err: errors.New(`ent: missing required field "Calculation.admitted_place"`)}
	}
	if _, ok := cc.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`ent: missing required field "Calculation.run_id"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Calculation.updated_at"`)}
	}
	if len(cc.mutation.HeadingIDs()) == 0 {
		return &ValidationError{Name: "heading", err: errors.New(`ent: missing required edge "Calculation.heading"`)}
	}
	if len(cc.mutation.RunIDs()) == 0 {
		return &ValidationError{Name: "run", err: errors.New(`ent: missing required edge "Calculation.run"`)}
	}
	return nil
}

func (cc *CalculationCreate) sqlSave(ctx context.Context) (*Calculation, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CalculationCreate) createSpec() (*Calculation, *sqlgraph.CreateSpec) {
	var (
		_node = &Calculation{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(calculation.Table, sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.StudentID(); ok {
		_spec.SetField(calculation.FieldStudentID, field.TypeString, value)
		_node.StudentID = value
	}
	if value, ok := cc.mutation.AdmittedPlace(); ok {
		_spec.SetField(calculation.FieldAdmittedPlace, field.TypeInt, value)
		_node.AdmittedPlace = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(calculation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.HeadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   calculation.HeadingTable,
			Columns: []string{calculation.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.heading_calculations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calculation.RunTable,
			Columns: []string{calculation.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RunID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CalculationCreateBulk is the builder for creating many Calculation entities in bulk.
type CalculationCreateBulk struct {
	config
	err      error
	builders []*CalculationCreate
}

// Save creates the Calculation entities in the database.
func (ccb *CalculationCreateBulk) Save(ctx context.Context) ([]*Calculation, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Calculation, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CalculationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CalculationCreateBulk) SaveX(ctx context.Context) []*Calculation {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CalculationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CalculationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
