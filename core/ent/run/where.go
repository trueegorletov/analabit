// Code generated by ent, DO NOT EDIT.

package run

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/trueegorletov/analabit/core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Run {
	return predicate.Run(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Run {
	return predicate.Run(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Run {
	return predicate.Run(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Run {
	return predicate.Run(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Run {
	return predicate.Run(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Run {
	return predicate.Run(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Run {
	return predicate.Run(sql.FieldLTE(FieldID, id))
}

// TriggeredAt applies equality check predicate on the "triggered_at" field. It's identical to TriggeredAtEQ.
func TriggeredAt(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldTriggeredAt, v))
}

// Finished applies equality check predicate on the "finished" field. It's identical to FinishedEQ.
func Finished(v bool) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldFinished, v))
}

// TriggeredAtEQ applies the EQ predicate on the "triggered_at" field.
func TriggeredAtEQ(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldTriggeredAt, v))
}

// TriggeredAtNEQ applies the NEQ predicate on the "triggered_at" field.
func TriggeredAtNEQ(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldNEQ(FieldTriggeredAt, v))
}

// TriggeredAtIn applies the In predicate on the "triggered_at" field.
func TriggeredAtIn(vs ...time.Time) predicate.Run {
	return predicate.Run(sql.FieldIn(FieldTriggeredAt, vs...))
}

// TriggeredAtNotIn applies the NotIn predicate on the "triggered_at" field.
func TriggeredAtNotIn(vs ...time.Time) predicate.Run {
	return predicate.Run(sql.FieldNotIn(FieldTriggeredAt, vs...))
}

// TriggeredAtGT applies the GT predicate on the "triggered_at" field.
func TriggeredAtGT(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldGT(FieldTriggeredAt, v))
}

// TriggeredAtGTE applies the GTE predicate on the "triggered_at" field.
func TriggeredAtGTE(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldGTE(FieldTriggeredAt, v))
}

// TriggeredAtLT applies the LT predicate on the "triggered_at" field.
func TriggeredAtLT(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldLT(FieldTriggeredAt, v))
}

// TriggeredAtLTE applies the LTE predicate on the "triggered_at" field.
func TriggeredAtLTE(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldLTE(FieldTriggeredAt, v))
}

// PayloadMetaIsNil applies the IsNil predicate on the "payload_meta" field.
func PayloadMetaIsNil() predicate.Run {
	return predicate.Run(sql.FieldIsNull(FieldPayloadMeta))
}

// PayloadMetaNotNil applies the NotNil predicate on the "payload_meta" field.
func PayloadMetaNotNil() predicate.Run {
	return predicate.Run(sql.FieldNotNull(FieldPayloadMeta))
}

// FinishedEQ applies the EQ predicate on the "finished" field.
func FinishedEQ(v bool) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldFinished, v))
}

// FinishedNEQ applies the NEQ predicate on the "finished" field.
func FinishedNEQ(v bool) predicate.Run {
	return predicate.Run(sql.FieldNEQ(FieldFinished, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Run) predicate.Run {
	return predicate.Run(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Run) predicate.Run {
	return predicate.Run(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Run) predicate.Run {
	return predicate.Run(sql.NotPredicates(p))
}
