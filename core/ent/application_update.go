// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/trueegorletov/analabit/core"
	"github.com/trueegorletov/analabit/core/ent/application"
	"github.com/trueegorletov/analabit/core/ent/heading"
	"github.com/trueegorletov/analabit/core/ent/predicate"
	"github.com/trueegorletov/analabit/core/ent/run"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (au *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetStudentID sets the "student_id" field.
func (au *ApplicationUpdate) SetStudentID(s string) *ApplicationUpdate {
	au.mutation.SetStudentID(s)
	return au
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableStudentID(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetStudentID(*s)
	}
	return au
}

// SetPriority sets the "priority" field.
func (au *ApplicationUpdate) SetPriority(i int) *ApplicationUpdate {
	au.mutation.ResetPriority()
	au.mutation.SetPriority(i)
	return au
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillablePriority(i *int) *ApplicationUpdate {
	if i != nil {
		au.SetPriority(*i)
	}
	return au
}

// AddPriority adds i to the "priority" field.
func (au *ApplicationUpdate) AddPriority(i int) *ApplicationUpdate {
	au.mutation.AddPriority(i)
	return au
}

// SetCompetitionType sets the "competition_type" field.
func (au *ApplicationUpdate) SetCompetitionType(c core.Competition) *ApplicationUpdate {
	au.mutation.ResetCompetitionType()
	au.mutation.SetCompetitionType(c)
	return au
}

// SetNillableCompetitionType sets the "competition_type" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableCompetitionType(c *core.Competition) *ApplicationUpdate {
	if c != nil {
		au.SetCompetitionType(*c)
	}
	return au
}

// AddCompetitionType adds c to the "competition_type" field.
func (au *ApplicationUpdate) AddCompetitionType(c core.Competition) *ApplicationUpdate {
	au.mutation.AddCompetitionType(c)
	return au
}

// SetRatingPlace sets the "rating_place" field.
func (au *ApplicationUpdate) SetRatingPlace(i int) *ApplicationUpdate {
	au.mutation.ResetRatingPlace()
	au.mutation.SetRatingPlace(i)
	return au
}

// SetNillableRatingPlace sets the "rating_place" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableRatingPlace(i *int) *ApplicationUpdate {
	if i != nil {
		au.SetRatingPlace(*i)
	}
	return au
}

// AddRatingPlace adds i to the "rating_place" field.
func (au *ApplicationUpdate) AddRatingPlace(i int) *ApplicationUpdate {
	au.mutation.AddRatingPlace(i)
	return au
}

// SetScore sets the "score" field.
func (au *ApplicationUpdate) SetScore(i int) *ApplicationUpdate {
	au.mutation.ResetScore()
	au.mutation.SetScore(i)
	return au
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableScore(i *int) *ApplicationUpdate {
	if i != nil {
		au.SetScore(*i)
	}
	return au
}

// AddScore adds i to the "score" field.
func (au *ApplicationUpdate) AddScore(i int) *ApplicationUpdate {
	au.mutation.AddScore(i)
	return au
}

// SetRunID sets the "run_id" field.
func (au *ApplicationUpdate) SetRunID(i int) *ApplicationUpdate {
	au.mutation.SetRunID(i)
	return au
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableRunID(i *int) *ApplicationUpdate {
	if i != nil {
		au.SetRunID(*i)
	}
	return au
}

// SetOriginalSubmitted sets the "original_submitted" field.
func (au *ApplicationUpdate) SetOriginalSubmitted(b bool) *ApplicationUpdate {
	au.mutation.SetOriginalSubmitted(b)
	return au
}

// SetNillableOriginalSubmitted sets the "original_submitted" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableOriginalSubmitted(b *bool) *ApplicationUpdate {
	if b != nil {
		au.SetOriginalSubmitted(*b)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ApplicationUpdate) SetUpdatedAt(t time.Time) *ApplicationUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetHeadingID sets the "heading" edge to the Heading entity by ID.
func (au *ApplicationUpdate) SetHeadingID(id int) *ApplicationUpdate {
	au.mutation.SetHeadingID(id)
	return au
}

// SetHeading sets the "heading" edge to the Heading entity.
func (au *ApplicationUpdate) SetHeading(h *Heading) *ApplicationUpdate {
	return au.SetHeadingID(h.ID)
}

// SetRun sets the "run" edge to the Run entity.
func (au *ApplicationUpdate) SetRun(r *Run) *ApplicationUpdate {
	return au.SetRunID(r.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (au *ApplicationUpdate) Mutation() *ApplicationMutation {
	return au.mutation
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (au *ApplicationUpdate) ClearHeading() *ApplicationUpdate {
	au.mutation.ClearHeading()
	return au
}

// ClearRun clears the "run" edge to the Run entity.
func (au *ApplicationUpdate) ClearRun() *ApplicationUpdate {
	au.mutation.ClearRun()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ApplicationUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := application.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ApplicationUpdate) check() error {
	if au.mutation.HeadingCleared() && len(au.mutation.HeadingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Application.heading"`)
	}
	if au.mutation.RunCleared() && len(au.mutation.RunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Application.run"`)
	}
	return nil
}

func (au *ApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.StudentID(); ok {
		_spec.SetField(application.FieldStudentID, field.TypeString, value)
	}
	if value, ok := au.mutation.Priority(); ok {
		_spec.SetField(application.FieldPriority, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedPriority(); ok {
		_spec.AddField(application.FieldPriority, field.TypeInt, value)
	}
	if value, ok := au.mutation.CompetitionType(); ok {
		_spec.SetField(application.FieldCompetitionType, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedCompetitionType(); ok {
		_spec.AddField(application.FieldCompetitionType, field.TypeInt, value)
	}
	if value, ok := au.mutation.RatingPlace(); ok {
		_spec.SetField(application.FieldRatingPlace, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedRatingPlace(); ok {
		_spec.AddField(application.FieldRatingPlace, field.TypeInt, value)
	}
	if value, ok := au.mutation.Score(); ok {
		_spec.SetField(application.FieldScore, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedScore(); ok {
		_spec.AddField(application.FieldScore, field.TypeInt, value)
	}
	if value, ok := au.mutation.OriginalSubmitted(); ok {
		_spec.SetField(application.FieldOriginalSubmitted, field.TypeBool, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(application.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.HeadingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.HeadingTable,
			Columns: []string{application.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.HeadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.HeadingTable,
			Columns: []string{application.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.RunTable,
			Columns: []string{application.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.RunTable,
			Columns: []string{application.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetStudentID sets the "student_id" field.
func (auo *ApplicationUpdateOne) SetStudentID(s string) *ApplicationUpdateOne {
	auo.mutation.SetStudentID(s)
	return auo
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableStudentID(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetStudentID(*s)
	}
	return auo
}

// SetPriority sets the "priority" field.
func (auo *ApplicationUpdateOne) SetPriority(i int) *ApplicationUpdateOne {
	auo.mutation.ResetPriority()
	auo.mutation.SetPriority(i)
	return auo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillablePriority(i *int) *ApplicationUpdateOne {
	if i != nil {
		auo.SetPriority(*i)
	}
	return auo
}

// AddPriority adds i to the "priority" field.
func (auo *ApplicationUpdateOne) AddPriority(i int) *ApplicationUpdateOne {
	auo.mutation.AddPriority(i)
	return auo
}

// SetCompetitionType sets the "competition_type" field.
func (auo *ApplicationUpdateOne) SetCompetitionType(c core.Competition) *ApplicationUpdateOne {
	auo.mutation.ResetCompetitionType()
	auo.mutation.SetCompetitionType(c)
	return auo
}

// SetNillableCompetitionType sets the "competition_type" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableCompetitionType(c *core.Competition) *ApplicationUpdateOne {
	if c != nil {
		auo.SetCompetitionType(*c)
	}
	return auo
}

// AddCompetitionType adds c to the "competition_type" field.
func (auo *ApplicationUpdateOne) AddCompetitionType(c core.Competition) *ApplicationUpdateOne {
	auo.mutation.AddCompetitionType(c)
	return auo
}

// SetRatingPlace sets the "rating_place" field.
func (auo *ApplicationUpdateOne) SetRatingPlace(i int) *ApplicationUpdateOne {
	auo.mutation.ResetRatingPlace()
	auo.mutation.SetRatingPlace(i)
	return auo
}

// SetNillableRatingPlace sets the "rating_place" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableRatingPlace(i *int) *ApplicationUpdateOne {
	if i != nil {
		auo.SetRatingPlace(*i)
	}
	return auo
}

// AddRatingPlace adds i to the "rating_place" field.
func (auo *ApplicationUpdateOne) AddRatingPlace(i int) *ApplicationUpdateOne {
	auo.mutation.AddRatingPlace(i)
	return auo
}

// SetScore sets the "score" field.
func (auo *ApplicationUpdateOne) SetScore(i int) *ApplicationUpdateOne {
	auo.mutation.ResetScore()
	auo.mutation.SetScore(i)
	return auo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableScore(i *int) *ApplicationUpdateOne {
	if i != nil {
		auo.SetScore(*i)
	}
	return auo
}

// AddScore adds i to the "score" field.
func (auo *ApplicationUpdateOne) AddScore(i int) *ApplicationUpdateOne {
	auo.mutation.AddScore(i)
	return auo
}

// SetRunID sets the "run_id" field.
func (auo *ApplicationUpdateOne) SetRunID(i int) *ApplicationUpdateOne {
	auo.mutation.SetRunID(i)
	return auo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableRunID(i *int) *ApplicationUpdateOne {
	if i != nil {
		auo.SetRunID(*i)
	}
	return auo
}

// SetOriginalSubmitted sets the "original_submitted" field.
func (auo *ApplicationUpdateOne) SetOriginalSubmitted(b bool) *ApplicationUpdateOne {
	auo.mutation.SetOriginalSubmitted(b)
	return auo
}

// SetNillableOriginalSubmitted sets the "original_submitted" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableOriginalSubmitted(b *bool) *ApplicationUpdateOne {
	if b != nil {
		auo.SetOriginalSubmitted(*b)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ApplicationUpdateOne) SetUpdatedAt(t time.Time) *ApplicationUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetHeadingID sets the "heading" edge to the Heading entity by ID.
func (auo *ApplicationUpdateOne) SetHeadingID(id int) *ApplicationUpdateOne {
	auo.mutation.SetHeadingID(id)
	return auo
}

// SetHeading sets the "heading" edge to the Heading entity.
func (auo *ApplicationUpdateOne) SetHeading(h *Heading) *ApplicationUpdateOne {
	return auo.SetHeadingID(h.ID)
}

// SetRun sets the "run" edge to the Run entity.
func (auo *ApplicationUpdateOne) SetRun(r *Run) *ApplicationUpdateOne {
	return auo.SetRunID(r.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (auo *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return auo.mutation
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (auo *ApplicationUpdateOne) ClearHeading() *ApplicationUpdateOne {
	auo.mutation.ClearHeading()
	return auo
}

// ClearRun clears the "run" edge to the Run entity.
func (auo *ApplicationUpdateOne) ClearRun() *ApplicationUpdateOne {
	auo.mutation.ClearRun()
	return auo
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (auo *ApplicationUpdateOne) Where(ps ...predicate.Application) *ApplicationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApplicationUpdateOne) Select(field string, fields ...string) *ApplicationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Application entity.
func (auo *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ApplicationUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := application.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ApplicationUpdateOne) check() error {
	if auo.mutation.HeadingCleared() && len(auo.mutation.HeadingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Application.heading"`)
	}
	if auo.mutation.RunCleared() && len(auo.mutation.RunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Application.run"`)
	}
	return nil
}

func (auo *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Application.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, application.FieldID)
		for _, f := range fields {
			if !application.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != application.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.StudentID(); ok {
		_spec.SetField(application.FieldStudentID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Priority(); ok {
		_spec.SetField(application.FieldPriority, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedPriority(); ok {
		_spec.AddField(application.FieldPriority, field.TypeInt, value)
	}
	if value, ok := auo.mutation.CompetitionType(); ok {
		_spec.SetField(application.FieldCompetitionType, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedCompetitionType(); ok {
		_spec.AddField(application.FieldCompetitionType, field.TypeInt, value)
	}
	if value, ok := auo.mutation.RatingPlace(); ok {
		_spec.SetField(application.FieldRatingPlace, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedRatingPlace(); ok {
		_spec.AddField(application.FieldRatingPlace, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Score(); ok {
		_spec.SetField(application.FieldScore, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedScore(); ok {
		_spec.AddField(application.FieldScore, field.TypeInt, value)
	}
	if value, ok := auo.mutation.OriginalSubmitted(); ok {
		_spec.SetField(application.FieldOriginalSubmitted, field.TypeBool, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(application.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.HeadingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.HeadingTable,
			Columns: []string{application.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.HeadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.HeadingTable,
			Columns: []string{application.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.RunTable,
			Columns: []string{application.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.RunTable,
			Columns: []string{application.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Application{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
