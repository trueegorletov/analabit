// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/application"
	"analabit/core/ent/calculation"
	"analabit/core/ent/heading"
	"analabit/core/ent/predicate"
	"analabit/core/ent/varsity"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HeadingUpdate is the builder for updating Heading entities.
type HeadingUpdate struct {
	config
	hooks    []Hook
	mutation *HeadingMutation
}

// Where appends a list predicates to the HeadingUpdate builder.
func (hu *HeadingUpdate) Where(ps ...predicate.Heading) *HeadingUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetRegularCapacity sets the "regular_capacity" field.
func (hu *HeadingUpdate) SetRegularCapacity(i int) *HeadingUpdate {
	hu.mutation.ResetRegularCapacity()
	hu.mutation.SetRegularCapacity(i)
	return hu
}

// SetNillableRegularCapacity sets the "regular_capacity" field if the given value is not nil.
func (hu *HeadingUpdate) SetNillableRegularCapacity(i *int) *HeadingUpdate {
	if i != nil {
		hu.SetRegularCapacity(*i)
	}
	return hu
}

// AddRegularCapacity adds i to the "regular_capacity" field.
func (hu *HeadingUpdate) AddRegularCapacity(i int) *HeadingUpdate {
	hu.mutation.AddRegularCapacity(i)
	return hu
}

// SetTargetQuotaCapacity sets the "target_quota_capacity" field.
func (hu *HeadingUpdate) SetTargetQuotaCapacity(i int) *HeadingUpdate {
	hu.mutation.ResetTargetQuotaCapacity()
	hu.mutation.SetTargetQuotaCapacity(i)
	return hu
}

// SetNillableTargetQuotaCapacity sets the "target_quota_capacity" field if the given value is not nil.
func (hu *HeadingUpdate) SetNillableTargetQuotaCapacity(i *int) *HeadingUpdate {
	if i != nil {
		hu.SetTargetQuotaCapacity(*i)
	}
	return hu
}

// AddTargetQuotaCapacity adds i to the "target_quota_capacity" field.
func (hu *HeadingUpdate) AddTargetQuotaCapacity(i int) *HeadingUpdate {
	hu.mutation.AddTargetQuotaCapacity(i)
	return hu
}

// SetDedicatedQuotaCapacity sets the "dedicated_quota_capacity" field.
func (hu *HeadingUpdate) SetDedicatedQuotaCapacity(i int) *HeadingUpdate {
	hu.mutation.ResetDedicatedQuotaCapacity()
	hu.mutation.SetDedicatedQuotaCapacity(i)
	return hu
}

// SetNillableDedicatedQuotaCapacity sets the "dedicated_quota_capacity" field if the given value is not nil.
func (hu *HeadingUpdate) SetNillableDedicatedQuotaCapacity(i *int) *HeadingUpdate {
	if i != nil {
		hu.SetDedicatedQuotaCapacity(*i)
	}
	return hu
}

// AddDedicatedQuotaCapacity adds i to the "dedicated_quota_capacity" field.
func (hu *HeadingUpdate) AddDedicatedQuotaCapacity(i int) *HeadingUpdate {
	hu.mutation.AddDedicatedQuotaCapacity(i)
	return hu
}

// SetSpecialQuotaCapacity sets the "special_quota_capacity" field.
func (hu *HeadingUpdate) SetSpecialQuotaCapacity(i int) *HeadingUpdate {
	hu.mutation.ResetSpecialQuotaCapacity()
	hu.mutation.SetSpecialQuotaCapacity(i)
	return hu
}

// SetNillableSpecialQuotaCapacity sets the "special_quota_capacity" field if the given value is not nil.
func (hu *HeadingUpdate) SetNillableSpecialQuotaCapacity(i *int) *HeadingUpdate {
	if i != nil {
		hu.SetSpecialQuotaCapacity(*i)
	}
	return hu
}

// AddSpecialQuotaCapacity adds i to the "special_quota_capacity" field.
func (hu *HeadingUpdate) AddSpecialQuotaCapacity(i int) *HeadingUpdate {
	hu.mutation.AddSpecialQuotaCapacity(i)
	return hu
}

// SetCode sets the "code" field.
func (hu *HeadingUpdate) SetCode(s string) *HeadingUpdate {
	hu.mutation.SetCode(s)
	return hu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (hu *HeadingUpdate) SetNillableCode(s *string) *HeadingUpdate {
	if s != nil {
		hu.SetCode(*s)
	}
	return hu
}

// SetName sets the "name" field.
func (hu *HeadingUpdate) SetName(s string) *HeadingUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hu *HeadingUpdate) SetNillableName(s *string) *HeadingUpdate {
	if s != nil {
		hu.SetName(*s)
	}
	return hu
}

// SetVarsityID sets the "varsity" edge to the Varsity entity by ID.
func (hu *HeadingUpdate) SetVarsityID(id int) *HeadingUpdate {
	hu.mutation.SetVarsityID(id)
	return hu
}

// SetVarsity sets the "varsity" edge to the Varsity entity.
func (hu *HeadingUpdate) SetVarsity(v *Varsity) *HeadingUpdate {
	return hu.SetVarsityID(v.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (hu *HeadingUpdate) AddApplicationIDs(ids ...int) *HeadingUpdate {
	hu.mutation.AddApplicationIDs(ids...)
	return hu
}

// AddApplications adds the "applications" edges to the Application entity.
func (hu *HeadingUpdate) AddApplications(a ...*Application) *HeadingUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return hu.AddApplicationIDs(ids...)
}

// AddCalculationIDs adds the "calculations" edge to the Calculation entity by IDs.
func (hu *HeadingUpdate) AddCalculationIDs(ids ...int) *HeadingUpdate {
	hu.mutation.AddCalculationIDs(ids...)
	return hu
}

// AddCalculations adds the "calculations" edges to the Calculation entity.
func (hu *HeadingUpdate) AddCalculations(c ...*Calculation) *HeadingUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hu.AddCalculationIDs(ids...)
}

// Mutation returns the HeadingMutation object of the builder.
func (hu *HeadingUpdate) Mutation() *HeadingMutation {
	return hu.mutation
}

// ClearVarsity clears the "varsity" edge to the Varsity entity.
func (hu *HeadingUpdate) ClearVarsity() *HeadingUpdate {
	hu.mutation.ClearVarsity()
	return hu
}

// ClearApplications clears all "applications" edges to the Application entity.
func (hu *HeadingUpdate) ClearApplications() *HeadingUpdate {
	hu.mutation.ClearApplications()
	return hu
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (hu *HeadingUpdate) RemoveApplicationIDs(ids ...int) *HeadingUpdate {
	hu.mutation.RemoveApplicationIDs(ids...)
	return hu
}

// RemoveApplications removes "applications" edges to Application entities.
func (hu *HeadingUpdate) RemoveApplications(a ...*Application) *HeadingUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return hu.RemoveApplicationIDs(ids...)
}

// ClearCalculations clears all "calculations" edges to the Calculation entity.
func (hu *HeadingUpdate) ClearCalculations() *HeadingUpdate {
	hu.mutation.ClearCalculations()
	return hu
}

// RemoveCalculationIDs removes the "calculations" edge to Calculation entities by IDs.
func (hu *HeadingUpdate) RemoveCalculationIDs(ids ...int) *HeadingUpdate {
	hu.mutation.RemoveCalculationIDs(ids...)
	return hu
}

// RemoveCalculations removes "calculations" edges to Calculation entities.
func (hu *HeadingUpdate) RemoveCalculations(c ...*Calculation) *HeadingUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hu.RemoveCalculationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HeadingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HeadingUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HeadingUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HeadingUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HeadingUpdate) check() error {
	if hu.mutation.VarsityCleared() && len(hu.mutation.VarsityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Heading.varsity"`)
	}
	return nil
}

func (hu *HeadingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(heading.Table, heading.Columns, sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.RegularCapacity(); ok {
		_spec.SetField(heading.FieldRegularCapacity, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedRegularCapacity(); ok {
		_spec.AddField(heading.FieldRegularCapacity, field.TypeInt, value)
	}
	if value, ok := hu.mutation.TargetQuotaCapacity(); ok {
		_spec.SetField(heading.FieldTargetQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedTargetQuotaCapacity(); ok {
		_spec.AddField(heading.FieldTargetQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := hu.mutation.DedicatedQuotaCapacity(); ok {
		_spec.SetField(heading.FieldDedicatedQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedDedicatedQuotaCapacity(); ok {
		_spec.AddField(heading.FieldDedicatedQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := hu.mutation.SpecialQuotaCapacity(); ok {
		_spec.SetField(heading.FieldSpecialQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedSpecialQuotaCapacity(); ok {
		_spec.AddField(heading.FieldSpecialQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := hu.mutation.Code(); ok {
		_spec.SetField(heading.FieldCode, field.TypeString, value)
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.SetField(heading.FieldName, field.TypeString, value)
	}
	if hu.mutation.VarsityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heading.VarsityTable,
			Columns: []string{heading.VarsityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(varsity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.VarsityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heading.VarsityTable,
			Columns: []string{heading.VarsityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(varsity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.ApplicationsTable,
			Columns: []string{heading.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !hu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.ApplicationsTable,
			Columns: []string{heading.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.ApplicationsTable,
			Columns: []string{heading.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.CalculationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.CalculationsTable,
			Columns: []string{heading.CalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedCalculationsIDs(); len(nodes) > 0 && !hu.mutation.CalculationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.CalculationsTable,
			Columns: []string{heading.CalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.CalculationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.CalculationsTable,
			Columns: []string{heading.CalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{heading.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HeadingUpdateOne is the builder for updating a single Heading entity.
type HeadingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HeadingMutation
}

// SetRegularCapacity sets the "regular_capacity" field.
func (huo *HeadingUpdateOne) SetRegularCapacity(i int) *HeadingUpdateOne {
	huo.mutation.ResetRegularCapacity()
	huo.mutation.SetRegularCapacity(i)
	return huo
}

// SetNillableRegularCapacity sets the "regular_capacity" field if the given value is not nil.
func (huo *HeadingUpdateOne) SetNillableRegularCapacity(i *int) *HeadingUpdateOne {
	if i != nil {
		huo.SetRegularCapacity(*i)
	}
	return huo
}

// AddRegularCapacity adds i to the "regular_capacity" field.
func (huo *HeadingUpdateOne) AddRegularCapacity(i int) *HeadingUpdateOne {
	huo.mutation.AddRegularCapacity(i)
	return huo
}

// SetTargetQuotaCapacity sets the "target_quota_capacity" field.
func (huo *HeadingUpdateOne) SetTargetQuotaCapacity(i int) *HeadingUpdateOne {
	huo.mutation.ResetTargetQuotaCapacity()
	huo.mutation.SetTargetQuotaCapacity(i)
	return huo
}

// SetNillableTargetQuotaCapacity sets the "target_quota_capacity" field if the given value is not nil.
func (huo *HeadingUpdateOne) SetNillableTargetQuotaCapacity(i *int) *HeadingUpdateOne {
	if i != nil {
		huo.SetTargetQuotaCapacity(*i)
	}
	return huo
}

// AddTargetQuotaCapacity adds i to the "target_quota_capacity" field.
func (huo *HeadingUpdateOne) AddTargetQuotaCapacity(i int) *HeadingUpdateOne {
	huo.mutation.AddTargetQuotaCapacity(i)
	return huo
}

// SetDedicatedQuotaCapacity sets the "dedicated_quota_capacity" field.
func (huo *HeadingUpdateOne) SetDedicatedQuotaCapacity(i int) *HeadingUpdateOne {
	huo.mutation.ResetDedicatedQuotaCapacity()
	huo.mutation.SetDedicatedQuotaCapacity(i)
	return huo
}

// SetNillableDedicatedQuotaCapacity sets the "dedicated_quota_capacity" field if the given value is not nil.
func (huo *HeadingUpdateOne) SetNillableDedicatedQuotaCapacity(i *int) *HeadingUpdateOne {
	if i != nil {
		huo.SetDedicatedQuotaCapacity(*i)
	}
	return huo
}

// AddDedicatedQuotaCapacity adds i to the "dedicated_quota_capacity" field.
func (huo *HeadingUpdateOne) AddDedicatedQuotaCapacity(i int) *HeadingUpdateOne {
	huo.mutation.AddDedicatedQuotaCapacity(i)
	return huo
}

// SetSpecialQuotaCapacity sets the "special_quota_capacity" field.
func (huo *HeadingUpdateOne) SetSpecialQuotaCapacity(i int) *HeadingUpdateOne {
	huo.mutation.ResetSpecialQuotaCapacity()
	huo.mutation.SetSpecialQuotaCapacity(i)
	return huo
}

// SetNillableSpecialQuotaCapacity sets the "special_quota_capacity" field if the given value is not nil.
func (huo *HeadingUpdateOne) SetNillableSpecialQuotaCapacity(i *int) *HeadingUpdateOne {
	if i != nil {
		huo.SetSpecialQuotaCapacity(*i)
	}
	return huo
}

// AddSpecialQuotaCapacity adds i to the "special_quota_capacity" field.
func (huo *HeadingUpdateOne) AddSpecialQuotaCapacity(i int) *HeadingUpdateOne {
	huo.mutation.AddSpecialQuotaCapacity(i)
	return huo
}

// SetCode sets the "code" field.
func (huo *HeadingUpdateOne) SetCode(s string) *HeadingUpdateOne {
	huo.mutation.SetCode(s)
	return huo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (huo *HeadingUpdateOne) SetNillableCode(s *string) *HeadingUpdateOne {
	if s != nil {
		huo.SetCode(*s)
	}
	return huo
}

// SetName sets the "name" field.
func (huo *HeadingUpdateOne) SetName(s string) *HeadingUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (huo *HeadingUpdateOne) SetNillableName(s *string) *HeadingUpdateOne {
	if s != nil {
		huo.SetName(*s)
	}
	return huo
}

// SetVarsityID sets the "varsity" edge to the Varsity entity by ID.
func (huo *HeadingUpdateOne) SetVarsityID(id int) *HeadingUpdateOne {
	huo.mutation.SetVarsityID(id)
	return huo
}

// SetVarsity sets the "varsity" edge to the Varsity entity.
func (huo *HeadingUpdateOne) SetVarsity(v *Varsity) *HeadingUpdateOne {
	return huo.SetVarsityID(v.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (huo *HeadingUpdateOne) AddApplicationIDs(ids ...int) *HeadingUpdateOne {
	huo.mutation.AddApplicationIDs(ids...)
	return huo
}

// AddApplications adds the "applications" edges to the Application entity.
func (huo *HeadingUpdateOne) AddApplications(a ...*Application) *HeadingUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return huo.AddApplicationIDs(ids...)
}

// AddCalculationIDs adds the "calculations" edge to the Calculation entity by IDs.
func (huo *HeadingUpdateOne) AddCalculationIDs(ids ...int) *HeadingUpdateOne {
	huo.mutation.AddCalculationIDs(ids...)
	return huo
}

// AddCalculations adds the "calculations" edges to the Calculation entity.
func (huo *HeadingUpdateOne) AddCalculations(c ...*Calculation) *HeadingUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return huo.AddCalculationIDs(ids...)
}

// Mutation returns the HeadingMutation object of the builder.
func (huo *HeadingUpdateOne) Mutation() *HeadingMutation {
	return huo.mutation
}

// ClearVarsity clears the "varsity" edge to the Varsity entity.
func (huo *HeadingUpdateOne) ClearVarsity() *HeadingUpdateOne {
	huo.mutation.ClearVarsity()
	return huo
}

// ClearApplications clears all "applications" edges to the Application entity.
func (huo *HeadingUpdateOne) ClearApplications() *HeadingUpdateOne {
	huo.mutation.ClearApplications()
	return huo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (huo *HeadingUpdateOne) RemoveApplicationIDs(ids ...int) *HeadingUpdateOne {
	huo.mutation.RemoveApplicationIDs(ids...)
	return huo
}

// RemoveApplications removes "applications" edges to Application entities.
func (huo *HeadingUpdateOne) RemoveApplications(a ...*Application) *HeadingUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return huo.RemoveApplicationIDs(ids...)
}

// ClearCalculations clears all "calculations" edges to the Calculation entity.
func (huo *HeadingUpdateOne) ClearCalculations() *HeadingUpdateOne {
	huo.mutation.ClearCalculations()
	return huo
}

// RemoveCalculationIDs removes the "calculations" edge to Calculation entities by IDs.
func (huo *HeadingUpdateOne) RemoveCalculationIDs(ids ...int) *HeadingUpdateOne {
	huo.mutation.RemoveCalculationIDs(ids...)
	return huo
}

// RemoveCalculations removes "calculations" edges to Calculation entities.
func (huo *HeadingUpdateOne) RemoveCalculations(c ...*Calculation) *HeadingUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return huo.RemoveCalculationIDs(ids...)
}

// Where appends a list predicates to the HeadingUpdate builder.
func (huo *HeadingUpdateOne) Where(ps ...predicate.Heading) *HeadingUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HeadingUpdateOne) Select(field string, fields ...string) *HeadingUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Heading entity.
func (huo *HeadingUpdateOne) Save(ctx context.Context) (*Heading, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HeadingUpdateOne) SaveX(ctx context.Context) *Heading {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HeadingUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HeadingUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HeadingUpdateOne) check() error {
	if huo.mutation.VarsityCleared() && len(huo.mutation.VarsityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Heading.varsity"`)
	}
	return nil
}

func (huo *HeadingUpdateOne) sqlSave(ctx context.Context) (_node *Heading, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(heading.Table, heading.Columns, sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Heading.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, heading.FieldID)
		for _, f := range fields {
			if !heading.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != heading.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.RegularCapacity(); ok {
		_spec.SetField(heading.FieldRegularCapacity, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedRegularCapacity(); ok {
		_spec.AddField(heading.FieldRegularCapacity, field.TypeInt, value)
	}
	if value, ok := huo.mutation.TargetQuotaCapacity(); ok {
		_spec.SetField(heading.FieldTargetQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedTargetQuotaCapacity(); ok {
		_spec.AddField(heading.FieldTargetQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := huo.mutation.DedicatedQuotaCapacity(); ok {
		_spec.SetField(heading.FieldDedicatedQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedDedicatedQuotaCapacity(); ok {
		_spec.AddField(heading.FieldDedicatedQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := huo.mutation.SpecialQuotaCapacity(); ok {
		_spec.SetField(heading.FieldSpecialQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedSpecialQuotaCapacity(); ok {
		_spec.AddField(heading.FieldSpecialQuotaCapacity, field.TypeInt, value)
	}
	if value, ok := huo.mutation.Code(); ok {
		_spec.SetField(heading.FieldCode, field.TypeString, value)
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.SetField(heading.FieldName, field.TypeString, value)
	}
	if huo.mutation.VarsityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heading.VarsityTable,
			Columns: []string{heading.VarsityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(varsity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.VarsityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   heading.VarsityTable,
			Columns: []string{heading.VarsityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(varsity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.ApplicationsTable,
			Columns: []string{heading.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !huo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.ApplicationsTable,
			Columns: []string{heading.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.ApplicationsTable,
			Columns: []string{heading.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.CalculationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.CalculationsTable,
			Columns: []string{heading.CalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedCalculationsIDs(); len(nodes) > 0 && !huo.mutation.CalculationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.CalculationsTable,
			Columns: []string{heading.CalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.CalculationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   heading.CalculationsTable,
			Columns: []string{heading.CalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calculation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Heading{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{heading.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
