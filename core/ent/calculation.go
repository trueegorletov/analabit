// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/calculation"
	"analabit/core/ent/heading"
	"analabit/core/ent/run"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Calculation is the model entity for the Calculation schema.
type Calculation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID string `json:"student_id,omitempty"`
	// AdmittedPlace holds the value of the "admitted_place" field.
	AdmittedPlace int `json:"admitted_place,omitempty"`
	// Iteration holds the value of the "iteration" field.
	Iteration int `json:"iteration,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID int `json:"run_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CalculationQuery when eager-loading is set.
	Edges                CalculationEdges `json:"edges"`
	heading_calculations *int
	selectValues         sql.SelectValues
}

// CalculationEdges holds the relations/edges for other nodes in the graph.
type CalculationEdges struct {
	// Heading holds the value of the heading edge.
	Heading *Heading `json:"heading,omitempty"`
	// Run holds the value of the run edge.
	Run *Run `json:"run,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HeadingOrErr returns the Heading value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CalculationEdges) HeadingOrErr() (*Heading, error) {
	if e.Heading != nil {
		return e.Heading, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: heading.Label}
	}
	return nil, &NotLoadedError{edge: "heading"}
}

// RunOrErr returns the Run value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CalculationEdges) RunOrErr() (*Run, error) {
	if e.Run != nil {
		return e.Run, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: run.Label}
	}
	return nil, &NotLoadedError{edge: "run"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Calculation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case calculation.FieldID, calculation.FieldAdmittedPlace, calculation.FieldIteration, calculation.FieldRunID:
			values[i] = new(sql.NullInt64)
		case calculation.FieldStudentID:
			values[i] = new(sql.NullString)
		case calculation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case calculation.ForeignKeys[0]: // heading_calculations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Calculation fields.
func (c *Calculation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case calculation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case calculation.FieldStudentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value.Valid {
				c.StudentID = value.String
			}
		case calculation.FieldAdmittedPlace:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field admitted_place", values[i])
			} else if value.Valid {
				c.AdmittedPlace = int(value.Int64)
			}
		case calculation.FieldIteration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field iteration", values[i])
			} else if value.Valid {
				c.Iteration = int(value.Int64)
			}
		case calculation.FieldRunID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				c.RunID = int(value.Int64)
			}
		case calculation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case calculation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field heading_calculations", value)
			} else if value.Valid {
				c.heading_calculations = new(int)
				*c.heading_calculations = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Calculation.
// This includes values selected through modifiers, order, etc.
func (c *Calculation) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryHeading queries the "heading" edge of the Calculation entity.
func (c *Calculation) QueryHeading() *HeadingQuery {
	return NewCalculationClient(c.config).QueryHeading(c)
}

// QueryRun queries the "run" edge of the Calculation entity.
func (c *Calculation) QueryRun() *RunQuery {
	return NewCalculationClient(c.config).QueryRun(c)
}

// Update returns a builder for updating this Calculation.
// Note that you need to call Calculation.Unwrap() before calling this method if this Calculation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Calculation) Update() *CalculationUpdateOne {
	return NewCalculationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Calculation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Calculation) Unwrap() *Calculation {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Calculation is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Calculation) String() string {
	var builder strings.Builder
	builder.WriteString("Calculation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("student_id=")
	builder.WriteString(c.StudentID)
	builder.WriteString(", ")
	builder.WriteString("admitted_place=")
	builder.WriteString(fmt.Sprintf("%v", c.AdmittedPlace))
	builder.WriteString(", ")
	builder.WriteString("iteration=")
	builder.WriteString(fmt.Sprintf("%v", c.Iteration))
	builder.WriteString(", ")
	builder.WriteString("run_id=")
	builder.WriteString(fmt.Sprintf("%v", c.RunID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Calculations is a parsable slice of Calculation.
type Calculations []*Calculation
