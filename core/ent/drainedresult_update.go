// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/drainedresult"
	"analabit/core/ent/heading"
	"analabit/core/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DrainedResultUpdate is the builder for updating DrainedResult entities.
type DrainedResultUpdate struct {
	config
	hooks    []Hook
	mutation *DrainedResultMutation
}

// Where appends a list predicates to the DrainedResultUpdate builder.
func (dru *DrainedResultUpdate) Where(ps ...predicate.DrainedResult) *DrainedResultUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetDrainedPercent sets the "drained_percent" field.
func (dru *DrainedResultUpdate) SetDrainedPercent(i int) *DrainedResultUpdate {
	dru.mutation.ResetDrainedPercent()
	dru.mutation.SetDrainedPercent(i)
	return dru
}

// SetNillableDrainedPercent sets the "drained_percent" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableDrainedPercent(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetDrainedPercent(*i)
	}
	return dru
}

// AddDrainedPercent adds i to the "drained_percent" field.
func (dru *DrainedResultUpdate) AddDrainedPercent(i int) *DrainedResultUpdate {
	dru.mutation.AddDrainedPercent(i)
	return dru
}

// SetAvgPassingScore sets the "avg_passing_score" field.
func (dru *DrainedResultUpdate) SetAvgPassingScore(i int) *DrainedResultUpdate {
	dru.mutation.ResetAvgPassingScore()
	dru.mutation.SetAvgPassingScore(i)
	return dru
}

// SetNillableAvgPassingScore sets the "avg_passing_score" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableAvgPassingScore(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetAvgPassingScore(*i)
	}
	return dru
}

// AddAvgPassingScore adds i to the "avg_passing_score" field.
func (dru *DrainedResultUpdate) AddAvgPassingScore(i int) *DrainedResultUpdate {
	dru.mutation.AddAvgPassingScore(i)
	return dru
}

// SetMinPassingScore sets the "min_passing_score" field.
func (dru *DrainedResultUpdate) SetMinPassingScore(i int) *DrainedResultUpdate {
	dru.mutation.ResetMinPassingScore()
	dru.mutation.SetMinPassingScore(i)
	return dru
}

// SetNillableMinPassingScore sets the "min_passing_score" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableMinPassingScore(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetMinPassingScore(*i)
	}
	return dru
}

// AddMinPassingScore adds i to the "min_passing_score" field.
func (dru *DrainedResultUpdate) AddMinPassingScore(i int) *DrainedResultUpdate {
	dru.mutation.AddMinPassingScore(i)
	return dru
}

// SetMaxPassingScore sets the "max_passing_score" field.
func (dru *DrainedResultUpdate) SetMaxPassingScore(i int) *DrainedResultUpdate {
	dru.mutation.ResetMaxPassingScore()
	dru.mutation.SetMaxPassingScore(i)
	return dru
}

// SetNillableMaxPassingScore sets the "max_passing_score" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableMaxPassingScore(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetMaxPassingScore(*i)
	}
	return dru
}

// AddMaxPassingScore adds i to the "max_passing_score" field.
func (dru *DrainedResultUpdate) AddMaxPassingScore(i int) *DrainedResultUpdate {
	dru.mutation.AddMaxPassingScore(i)
	return dru
}

// SetMedPassingScore sets the "med_passing_score" field.
func (dru *DrainedResultUpdate) SetMedPassingScore(i int) *DrainedResultUpdate {
	dru.mutation.ResetMedPassingScore()
	dru.mutation.SetMedPassingScore(i)
	return dru
}

// SetNillableMedPassingScore sets the "med_passing_score" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableMedPassingScore(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetMedPassingScore(*i)
	}
	return dru
}

// AddMedPassingScore adds i to the "med_passing_score" field.
func (dru *DrainedResultUpdate) AddMedPassingScore(i int) *DrainedResultUpdate {
	dru.mutation.AddMedPassingScore(i)
	return dru
}

// SetAvgLastAdmittedRatingPlace sets the "avg_last_admitted_rating_place" field.
func (dru *DrainedResultUpdate) SetAvgLastAdmittedRatingPlace(i int) *DrainedResultUpdate {
	dru.mutation.ResetAvgLastAdmittedRatingPlace()
	dru.mutation.SetAvgLastAdmittedRatingPlace(i)
	return dru
}

// SetNillableAvgLastAdmittedRatingPlace sets the "avg_last_admitted_rating_place" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableAvgLastAdmittedRatingPlace(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetAvgLastAdmittedRatingPlace(*i)
	}
	return dru
}

// AddAvgLastAdmittedRatingPlace adds i to the "avg_last_admitted_rating_place" field.
func (dru *DrainedResultUpdate) AddAvgLastAdmittedRatingPlace(i int) *DrainedResultUpdate {
	dru.mutation.AddAvgLastAdmittedRatingPlace(i)
	return dru
}

// SetMinLastAdmittedRatingPlace sets the "min_last_admitted_rating_place" field.
func (dru *DrainedResultUpdate) SetMinLastAdmittedRatingPlace(i int) *DrainedResultUpdate {
	dru.mutation.ResetMinLastAdmittedRatingPlace()
	dru.mutation.SetMinLastAdmittedRatingPlace(i)
	return dru
}

// SetNillableMinLastAdmittedRatingPlace sets the "min_last_admitted_rating_place" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableMinLastAdmittedRatingPlace(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetMinLastAdmittedRatingPlace(*i)
	}
	return dru
}

// AddMinLastAdmittedRatingPlace adds i to the "min_last_admitted_rating_place" field.
func (dru *DrainedResultUpdate) AddMinLastAdmittedRatingPlace(i int) *DrainedResultUpdate {
	dru.mutation.AddMinLastAdmittedRatingPlace(i)
	return dru
}

// SetMaxLastAdmittedRatingPlace sets the "max_last_admitted_rating_place" field.
func (dru *DrainedResultUpdate) SetMaxLastAdmittedRatingPlace(i int) *DrainedResultUpdate {
	dru.mutation.ResetMaxLastAdmittedRatingPlace()
	dru.mutation.SetMaxLastAdmittedRatingPlace(i)
	return dru
}

// SetNillableMaxLastAdmittedRatingPlace sets the "max_last_admitted_rating_place" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableMaxLastAdmittedRatingPlace(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetMaxLastAdmittedRatingPlace(*i)
	}
	return dru
}

// AddMaxLastAdmittedRatingPlace adds i to the "max_last_admitted_rating_place" field.
func (dru *DrainedResultUpdate) AddMaxLastAdmittedRatingPlace(i int) *DrainedResultUpdate {
	dru.mutation.AddMaxLastAdmittedRatingPlace(i)
	return dru
}

// SetMedLastAdmittedRatingPlace sets the "med_last_admitted_rating_place" field.
func (dru *DrainedResultUpdate) SetMedLastAdmittedRatingPlace(i int) *DrainedResultUpdate {
	dru.mutation.ResetMedLastAdmittedRatingPlace()
	dru.mutation.SetMedLastAdmittedRatingPlace(i)
	return dru
}

// SetNillableMedLastAdmittedRatingPlace sets the "med_last_admitted_rating_place" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableMedLastAdmittedRatingPlace(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetMedLastAdmittedRatingPlace(*i)
	}
	return dru
}

// AddMedLastAdmittedRatingPlace adds i to the "med_last_admitted_rating_place" field.
func (dru *DrainedResultUpdate) AddMedLastAdmittedRatingPlace(i int) *DrainedResultUpdate {
	dru.mutation.AddMedLastAdmittedRatingPlace(i)
	return dru
}

// SetIteration sets the "iteration" field.
func (dru *DrainedResultUpdate) SetIteration(i int) *DrainedResultUpdate {
	dru.mutation.ResetIteration()
	dru.mutation.SetIteration(i)
	return dru
}

// SetNillableIteration sets the "iteration" field if the given value is not nil.
func (dru *DrainedResultUpdate) SetNillableIteration(i *int) *DrainedResultUpdate {
	if i != nil {
		dru.SetIteration(*i)
	}
	return dru
}

// AddIteration adds i to the "iteration" field.
func (dru *DrainedResultUpdate) AddIteration(i int) *DrainedResultUpdate {
	dru.mutation.AddIteration(i)
	return dru
}

// SetHeadingID sets the "heading" edge to the Heading entity by ID.
func (dru *DrainedResultUpdate) SetHeadingID(id int) *DrainedResultUpdate {
	dru.mutation.SetHeadingID(id)
	return dru
}

// SetHeading sets the "heading" edge to the Heading entity.
func (dru *DrainedResultUpdate) SetHeading(h *Heading) *DrainedResultUpdate {
	return dru.SetHeadingID(h.ID)
}

// Mutation returns the DrainedResultMutation object of the builder.
func (dru *DrainedResultUpdate) Mutation() *DrainedResultMutation {
	return dru.mutation
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (dru *DrainedResultUpdate) ClearHeading() *DrainedResultUpdate {
	dru.mutation.ClearHeading()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DrainedResultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DrainedResultUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DrainedResultUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DrainedResultUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dru *DrainedResultUpdate) check() error {
	if dru.mutation.HeadingCleared() && len(dru.mutation.HeadingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DrainedResult.heading"`)
	}
	return nil
}

func (dru *DrainedResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(drainedresult.Table, drainedresult.Columns, sqlgraph.NewFieldSpec(drainedresult.FieldID, field.TypeInt))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.DrainedPercent(); ok {
		_spec.SetField(drainedresult.FieldDrainedPercent, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedDrainedPercent(); ok {
		_spec.AddField(drainedresult.FieldDrainedPercent, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AvgPassingScore(); ok {
		_spec.SetField(drainedresult.FieldAvgPassingScore, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedAvgPassingScore(); ok {
		_spec.AddField(drainedresult.FieldAvgPassingScore, field.TypeInt, value)
	}
	if value, ok := dru.mutation.MinPassingScore(); ok {
		_spec.SetField(drainedresult.FieldMinPassingScore, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedMinPassingScore(); ok {
		_spec.AddField(drainedresult.FieldMinPassingScore, field.TypeInt, value)
	}
	if value, ok := dru.mutation.MaxPassingScore(); ok {
		_spec.SetField(drainedresult.FieldMaxPassingScore, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedMaxPassingScore(); ok {
		_spec.AddField(drainedresult.FieldMaxPassingScore, field.TypeInt, value)
	}
	if value, ok := dru.mutation.MedPassingScore(); ok {
		_spec.SetField(drainedresult.FieldMedPassingScore, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedMedPassingScore(); ok {
		_spec.AddField(drainedresult.FieldMedPassingScore, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AvgLastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldAvgLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedAvgLastAdmittedRatingPlace(); ok {
		_spec.AddField(drainedresult.FieldAvgLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := dru.mutation.MinLastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldMinLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedMinLastAdmittedRatingPlace(); ok {
		_spec.AddField(drainedresult.FieldMinLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := dru.mutation.MaxLastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldMaxLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedMaxLastAdmittedRatingPlace(); ok {
		_spec.AddField(drainedresult.FieldMaxLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := dru.mutation.MedLastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldMedLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedMedLastAdmittedRatingPlace(); ok {
		_spec.AddField(drainedresult.FieldMedLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := dru.mutation.Iteration(); ok {
		_spec.SetField(drainedresult.FieldIteration, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedIteration(); ok {
		_spec.AddField(drainedresult.FieldIteration, field.TypeInt, value)
	}
	if dru.mutation.HeadingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drainedresult.HeadingTable,
			Columns: []string{drainedresult.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.HeadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drainedresult.HeadingTable,
			Columns: []string{drainedresult.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drainedresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DrainedResultUpdateOne is the builder for updating a single DrainedResult entity.
type DrainedResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DrainedResultMutation
}

// SetDrainedPercent sets the "drained_percent" field.
func (druo *DrainedResultUpdateOne) SetDrainedPercent(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetDrainedPercent()
	druo.mutation.SetDrainedPercent(i)
	return druo
}

// SetNillableDrainedPercent sets the "drained_percent" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableDrainedPercent(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetDrainedPercent(*i)
	}
	return druo
}

// AddDrainedPercent adds i to the "drained_percent" field.
func (druo *DrainedResultUpdateOne) AddDrainedPercent(i int) *DrainedResultUpdateOne {
	druo.mutation.AddDrainedPercent(i)
	return druo
}

// SetAvgPassingScore sets the "avg_passing_score" field.
func (druo *DrainedResultUpdateOne) SetAvgPassingScore(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetAvgPassingScore()
	druo.mutation.SetAvgPassingScore(i)
	return druo
}

// SetNillableAvgPassingScore sets the "avg_passing_score" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableAvgPassingScore(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetAvgPassingScore(*i)
	}
	return druo
}

// AddAvgPassingScore adds i to the "avg_passing_score" field.
func (druo *DrainedResultUpdateOne) AddAvgPassingScore(i int) *DrainedResultUpdateOne {
	druo.mutation.AddAvgPassingScore(i)
	return druo
}

// SetMinPassingScore sets the "min_passing_score" field.
func (druo *DrainedResultUpdateOne) SetMinPassingScore(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetMinPassingScore()
	druo.mutation.SetMinPassingScore(i)
	return druo
}

// SetNillableMinPassingScore sets the "min_passing_score" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableMinPassingScore(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetMinPassingScore(*i)
	}
	return druo
}

// AddMinPassingScore adds i to the "min_passing_score" field.
func (druo *DrainedResultUpdateOne) AddMinPassingScore(i int) *DrainedResultUpdateOne {
	druo.mutation.AddMinPassingScore(i)
	return druo
}

// SetMaxPassingScore sets the "max_passing_score" field.
func (druo *DrainedResultUpdateOne) SetMaxPassingScore(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetMaxPassingScore()
	druo.mutation.SetMaxPassingScore(i)
	return druo
}

// SetNillableMaxPassingScore sets the "max_passing_score" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableMaxPassingScore(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetMaxPassingScore(*i)
	}
	return druo
}

// AddMaxPassingScore adds i to the "max_passing_score" field.
func (druo *DrainedResultUpdateOne) AddMaxPassingScore(i int) *DrainedResultUpdateOne {
	druo.mutation.AddMaxPassingScore(i)
	return druo
}

// SetMedPassingScore sets the "med_passing_score" field.
func (druo *DrainedResultUpdateOne) SetMedPassingScore(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetMedPassingScore()
	druo.mutation.SetMedPassingScore(i)
	return druo
}

// SetNillableMedPassingScore sets the "med_passing_score" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableMedPassingScore(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetMedPassingScore(*i)
	}
	return druo
}

// AddMedPassingScore adds i to the "med_passing_score" field.
func (druo *DrainedResultUpdateOne) AddMedPassingScore(i int) *DrainedResultUpdateOne {
	druo.mutation.AddMedPassingScore(i)
	return druo
}

// SetAvgLastAdmittedRatingPlace sets the "avg_last_admitted_rating_place" field.
func (druo *DrainedResultUpdateOne) SetAvgLastAdmittedRatingPlace(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetAvgLastAdmittedRatingPlace()
	druo.mutation.SetAvgLastAdmittedRatingPlace(i)
	return druo
}

// SetNillableAvgLastAdmittedRatingPlace sets the "avg_last_admitted_rating_place" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableAvgLastAdmittedRatingPlace(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetAvgLastAdmittedRatingPlace(*i)
	}
	return druo
}

// AddAvgLastAdmittedRatingPlace adds i to the "avg_last_admitted_rating_place" field.
func (druo *DrainedResultUpdateOne) AddAvgLastAdmittedRatingPlace(i int) *DrainedResultUpdateOne {
	druo.mutation.AddAvgLastAdmittedRatingPlace(i)
	return druo
}

// SetMinLastAdmittedRatingPlace sets the "min_last_admitted_rating_place" field.
func (druo *DrainedResultUpdateOne) SetMinLastAdmittedRatingPlace(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetMinLastAdmittedRatingPlace()
	druo.mutation.SetMinLastAdmittedRatingPlace(i)
	return druo
}

// SetNillableMinLastAdmittedRatingPlace sets the "min_last_admitted_rating_place" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableMinLastAdmittedRatingPlace(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetMinLastAdmittedRatingPlace(*i)
	}
	return druo
}

// AddMinLastAdmittedRatingPlace adds i to the "min_last_admitted_rating_place" field.
func (druo *DrainedResultUpdateOne) AddMinLastAdmittedRatingPlace(i int) *DrainedResultUpdateOne {
	druo.mutation.AddMinLastAdmittedRatingPlace(i)
	return druo
}

// SetMaxLastAdmittedRatingPlace sets the "max_last_admitted_rating_place" field.
func (druo *DrainedResultUpdateOne) SetMaxLastAdmittedRatingPlace(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetMaxLastAdmittedRatingPlace()
	druo.mutation.SetMaxLastAdmittedRatingPlace(i)
	return druo
}

// SetNillableMaxLastAdmittedRatingPlace sets the "max_last_admitted_rating_place" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableMaxLastAdmittedRatingPlace(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetMaxLastAdmittedRatingPlace(*i)
	}
	return druo
}

// AddMaxLastAdmittedRatingPlace adds i to the "max_last_admitted_rating_place" field.
func (druo *DrainedResultUpdateOne) AddMaxLastAdmittedRatingPlace(i int) *DrainedResultUpdateOne {
	druo.mutation.AddMaxLastAdmittedRatingPlace(i)
	return druo
}

// SetMedLastAdmittedRatingPlace sets the "med_last_admitted_rating_place" field.
func (druo *DrainedResultUpdateOne) SetMedLastAdmittedRatingPlace(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetMedLastAdmittedRatingPlace()
	druo.mutation.SetMedLastAdmittedRatingPlace(i)
	return druo
}

// SetNillableMedLastAdmittedRatingPlace sets the "med_last_admitted_rating_place" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableMedLastAdmittedRatingPlace(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetMedLastAdmittedRatingPlace(*i)
	}
	return druo
}

// AddMedLastAdmittedRatingPlace adds i to the "med_last_admitted_rating_place" field.
func (druo *DrainedResultUpdateOne) AddMedLastAdmittedRatingPlace(i int) *DrainedResultUpdateOne {
	druo.mutation.AddMedLastAdmittedRatingPlace(i)
	return druo
}

// SetIteration sets the "iteration" field.
func (druo *DrainedResultUpdateOne) SetIteration(i int) *DrainedResultUpdateOne {
	druo.mutation.ResetIteration()
	druo.mutation.SetIteration(i)
	return druo
}

// SetNillableIteration sets the "iteration" field if the given value is not nil.
func (druo *DrainedResultUpdateOne) SetNillableIteration(i *int) *DrainedResultUpdateOne {
	if i != nil {
		druo.SetIteration(*i)
	}
	return druo
}

// AddIteration adds i to the "iteration" field.
func (druo *DrainedResultUpdateOne) AddIteration(i int) *DrainedResultUpdateOne {
	druo.mutation.AddIteration(i)
	return druo
}

// SetHeadingID sets the "heading" edge to the Heading entity by ID.
func (druo *DrainedResultUpdateOne) SetHeadingID(id int) *DrainedResultUpdateOne {
	druo.mutation.SetHeadingID(id)
	return druo
}

// SetHeading sets the "heading" edge to the Heading entity.
func (druo *DrainedResultUpdateOne) SetHeading(h *Heading) *DrainedResultUpdateOne {
	return druo.SetHeadingID(h.ID)
}

// Mutation returns the DrainedResultMutation object of the builder.
func (druo *DrainedResultUpdateOne) Mutation() *DrainedResultMutation {
	return druo.mutation
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (druo *DrainedResultUpdateOne) ClearHeading() *DrainedResultUpdateOne {
	druo.mutation.ClearHeading()
	return druo
}

// Where appends a list predicates to the DrainedResultUpdate builder.
func (druo *DrainedResultUpdateOne) Where(ps ...predicate.DrainedResult) *DrainedResultUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DrainedResultUpdateOne) Select(field string, fields ...string) *DrainedResultUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DrainedResult entity.
func (druo *DrainedResultUpdateOne) Save(ctx context.Context) (*DrainedResult, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DrainedResultUpdateOne) SaveX(ctx context.Context) *DrainedResult {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DrainedResultUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DrainedResultUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (druo *DrainedResultUpdateOne) check() error {
	if druo.mutation.HeadingCleared() && len(druo.mutation.HeadingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DrainedResult.heading"`)
	}
	return nil
}

func (druo *DrainedResultUpdateOne) sqlSave(ctx context.Context) (_node *DrainedResult, err error) {
	if err := druo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(drainedresult.Table, drainedresult.Columns, sqlgraph.NewFieldSpec(drainedresult.FieldID, field.TypeInt))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DrainedResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, drainedresult.FieldID)
		for _, f := range fields {
			if !drainedresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != drainedresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.DrainedPercent(); ok {
		_spec.SetField(drainedresult.FieldDrainedPercent, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedDrainedPercent(); ok {
		_spec.AddField(drainedresult.FieldDrainedPercent, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AvgPassingScore(); ok {
		_spec.SetField(drainedresult.FieldAvgPassingScore, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedAvgPassingScore(); ok {
		_spec.AddField(drainedresult.FieldAvgPassingScore, field.TypeInt, value)
	}
	if value, ok := druo.mutation.MinPassingScore(); ok {
		_spec.SetField(drainedresult.FieldMinPassingScore, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedMinPassingScore(); ok {
		_spec.AddField(drainedresult.FieldMinPassingScore, field.TypeInt, value)
	}
	if value, ok := druo.mutation.MaxPassingScore(); ok {
		_spec.SetField(drainedresult.FieldMaxPassingScore, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedMaxPassingScore(); ok {
		_spec.AddField(drainedresult.FieldMaxPassingScore, field.TypeInt, value)
	}
	if value, ok := druo.mutation.MedPassingScore(); ok {
		_spec.SetField(drainedresult.FieldMedPassingScore, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedMedPassingScore(); ok {
		_spec.AddField(drainedresult.FieldMedPassingScore, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AvgLastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldAvgLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedAvgLastAdmittedRatingPlace(); ok {
		_spec.AddField(drainedresult.FieldAvgLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := druo.mutation.MinLastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldMinLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedMinLastAdmittedRatingPlace(); ok {
		_spec.AddField(drainedresult.FieldMinLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := druo.mutation.MaxLastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldMaxLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedMaxLastAdmittedRatingPlace(); ok {
		_spec.AddField(drainedresult.FieldMaxLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := druo.mutation.MedLastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldMedLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedMedLastAdmittedRatingPlace(); ok {
		_spec.AddField(drainedresult.FieldMedLastAdmittedRatingPlace, field.TypeInt, value)
	}
	if value, ok := druo.mutation.Iteration(); ok {
		_spec.SetField(drainedresult.FieldIteration, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedIteration(); ok {
		_spec.AddField(drainedresult.FieldIteration, field.TypeInt, value)
	}
	if druo.mutation.HeadingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drainedresult.HeadingTable,
			Columns: []string{drainedresult.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.HeadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drainedresult.HeadingTable,
			Columns: []string{drainedresult.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DrainedResult{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drainedresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
