// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core/ent/drainedresult"
	"analabit/core/ent/heading"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DrainedResultCreate is the builder for creating a DrainedResult entity.
type DrainedResultCreate struct {
	config
	mutation *DrainedResultMutation
	hooks    []Hook
}

// SetDrainedPercent sets the "drained_percent" field.
func (drc *DrainedResultCreate) SetDrainedPercent(i int) *DrainedResultCreate {
	drc.mutation.SetDrainedPercent(i)
	return drc
}

// SetPassingScore sets the "passing_score" field.
func (drc *DrainedResultCreate) SetPassingScore(i int) *DrainedResultCreate {
	drc.mutation.SetPassingScore(i)
	return drc
}

// SetLastAdmittedRatingPlace sets the "last_admitted_rating_place" field.
func (drc *DrainedResultCreate) SetLastAdmittedRatingPlace(i int) *DrainedResultCreate {
	drc.mutation.SetLastAdmittedRatingPlace(i)
	return drc
}

// SetIteration sets the "iteration" field.
func (drc *DrainedResultCreate) SetIteration(i int) *DrainedResultCreate {
	drc.mutation.SetIteration(i)
	return drc
}

// SetHeadingID sets the "heading" edge to the Heading entity by ID.
func (drc *DrainedResultCreate) SetHeadingID(id int) *DrainedResultCreate {
	drc.mutation.SetHeadingID(id)
	return drc
}

// SetHeading sets the "heading" edge to the Heading entity.
func (drc *DrainedResultCreate) SetHeading(h *Heading) *DrainedResultCreate {
	return drc.SetHeadingID(h.ID)
}

// Mutation returns the DrainedResultMutation object of the builder.
func (drc *DrainedResultCreate) Mutation() *DrainedResultMutation {
	return drc.mutation
}

// Save creates the DrainedResult in the database.
func (drc *DrainedResultCreate) Save(ctx context.Context) (*DrainedResult, error) {
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DrainedResultCreate) SaveX(ctx context.Context) *DrainedResult {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DrainedResultCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DrainedResultCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DrainedResultCreate) check() error {
	if _, ok := drc.mutation.DrainedPercent(); !ok {
		return &ValidationError{Name: "drained_percent", err: errors.New(`ent: missing required field "DrainedResult.drained_percent"`)}
	}
	if _, ok := drc.mutation.PassingScore(); !ok {
		return &ValidationError{Name: "passing_score", err: errors.New(`ent: missing required field "DrainedResult.passing_score"`)}
	}
	if _, ok := drc.mutation.LastAdmittedRatingPlace(); !ok {
		return &ValidationError{Name: "last_admitted_rating_place", err: errors.New(`ent: missing required field "DrainedResult.last_admitted_rating_place"`)}
	}
	if _, ok := drc.mutation.Iteration(); !ok {
		return &ValidationError{Name: "iteration", err: errors.New(`ent: missing required field "DrainedResult.iteration"`)}
	}
	if len(drc.mutation.HeadingIDs()) == 0 {
		return &ValidationError{Name: "heading", err: errors.New(`ent: missing required edge "DrainedResult.heading"`)}
	}
	return nil
}

func (drc *DrainedResultCreate) sqlSave(ctx context.Context) (*DrainedResult, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DrainedResultCreate) createSpec() (*DrainedResult, *sqlgraph.CreateSpec) {
	var (
		_node = &DrainedResult{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(drainedresult.Table, sqlgraph.NewFieldSpec(drainedresult.FieldID, field.TypeInt))
	)
	if value, ok := drc.mutation.DrainedPercent(); ok {
		_spec.SetField(drainedresult.FieldDrainedPercent, field.TypeInt, value)
		_node.DrainedPercent = value
	}
	if value, ok := drc.mutation.PassingScore(); ok {
		_spec.SetField(drainedresult.FieldPassingScore, field.TypeInt, value)
		_node.PassingScore = value
	}
	if value, ok := drc.mutation.LastAdmittedRatingPlace(); ok {
		_spec.SetField(drainedresult.FieldLastAdmittedRatingPlace, field.TypeInt, value)
		_node.LastAdmittedRatingPlace = value
	}
	if value, ok := drc.mutation.Iteration(); ok {
		_spec.SetField(drainedresult.FieldIteration, field.TypeInt, value)
		_node.Iteration = value
	}
	if nodes := drc.mutation.HeadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drainedresult.HeadingTable,
			Columns: []string{drainedresult.HeadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(heading.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.heading_drained_results = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DrainedResultCreateBulk is the builder for creating many DrainedResult entities in bulk.
type DrainedResultCreateBulk struct {
	config
	err      error
	builders []*DrainedResultCreate
}

// Save creates the DrainedResult entities in the database.
func (drcb *DrainedResultCreateBulk) Save(ctx context.Context) ([]*DrainedResult, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DrainedResult, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DrainedResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DrainedResultCreateBulk) SaveX(ctx context.Context) []*DrainedResult {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DrainedResultCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DrainedResultCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}
