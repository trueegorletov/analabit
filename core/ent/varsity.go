// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/trueegorletov/analabit/core/ent/varsity"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Varsity is the model entity for the Varsity schema.
type Varsity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VarsityQuery when eager-loading is set.
	Edges        VarsityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VarsityEdges holds the relations/edges for other nodes in the graph.
type VarsityEdges struct {
	// Headings holds the value of the headings edge.
	Headings []*Heading `json:"headings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HeadingsOrErr returns the Headings value or an error if the edge
// was not loaded in eager-loading.
func (e VarsityEdges) HeadingsOrErr() ([]*Heading, error) {
	if e.loadedTypes[0] {
		return e.Headings, nil
	}
	return nil, &NotLoadedError{edge: "headings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Varsity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case varsity.FieldID:
			values[i] = new(sql.NullInt64)
		case varsity.FieldCode, varsity.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Varsity fields.
func (v *Varsity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case varsity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case varsity.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				v.Code = value.String
			}
		case varsity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Varsity.
// This includes values selected through modifiers, order, etc.
func (v *Varsity) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryHeadings queries the "headings" edge of the Varsity entity.
func (v *Varsity) QueryHeadings() *HeadingQuery {
	return NewVarsityClient(v.config).QueryHeadings(v)
}

// Update returns a builder for updating this Varsity.
// Note that you need to call Varsity.Unwrap() before calling this method if this Varsity
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Varsity) Update() *VarsityUpdateOne {
	return NewVarsityClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Varsity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Varsity) Unwrap() *Varsity {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Varsity is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Varsity) String() string {
	var builder strings.Builder
	builder.WriteString("Varsity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("code=")
	builder.WriteString(v.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Varsities is a parsable slice of Varsity.
type Varsities []*Varsity
