// Code generated by ent, DO NOT EDIT.

package ent

import (
	"analabit/core"
	"analabit/core/ent/application"
	"analabit/core/ent/calculation"
	"analabit/core/ent/drainedresult"
	"analabit/core/ent/heading"
	"analabit/core/ent/metadata"
	"analabit/core/ent/predicate"
	"analabit/core/ent/varsity"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApplication   = "Application"
	TypeCalculation   = "Calculation"
	TypeDrainedResult = "DrainedResult"
	TypeHeading       = "Heading"
	TypeMetadata      = "Metadata"
	TypeVarsity       = "Varsity"
)

// ApplicationMutation represents an operation that mutates the Application nodes in the graph.
type ApplicationMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	student_id          *string
	priority            *int
	addpriority         *int
	competition_type    *core.Competition
	addcompetition_type *core.Competition
	rating_place        *int
	addrating_place     *int
	score               *int
	addscore            *int
	iteration           *int
	additeration        *int
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	heading             *int
	clearedheading      bool
	done                bool
	oldValue            func(context.Context) (*Application, error)
	predicates          []predicate.Application
}

var _ ent.Mutation = (*ApplicationMutation)(nil)

// applicationOption allows management of the mutation configuration using functional options.
type applicationOption func(*ApplicationMutation)

// newApplicationMutation creates new mutation for the Application entity.
func newApplicationMutation(c config, op Op, opts ...applicationOption) *ApplicationMutation {
	m := &ApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationID sets the ID field of the mutation.
func withApplicationID(id int) applicationOption {
	return func(m *ApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *Application
		)
		m.oldValue = func(ctx context.Context) (*Application, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Application.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplication sets the old Application of the mutation.
func withApplication(node *Application) applicationOption {
	return func(m *ApplicationMutation) {
		m.oldValue = func(context.Context) (*Application, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Application.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentID sets the "student_id" field.
func (m *ApplicationMutation) SetStudentID(s string) {
	m.student_id = &s
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *ApplicationMutation) StudentID() (r string, exists bool) {
	v := m.student_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldStudentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *ApplicationMutation) ResetStudentID() {
	m.student_id = nil
}

// SetPriority sets the "priority" field.
func (m *ApplicationMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *ApplicationMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldPriority(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *ApplicationMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *ApplicationMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *ApplicationMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetCompetitionType sets the "competition_type" field.
func (m *ApplicationMutation) SetCompetitionType(c core.Competition) {
	m.competition_type = &c
	m.addcompetition_type = nil
}

// CompetitionType returns the value of the "competition_type" field in the mutation.
func (m *ApplicationMutation) CompetitionType() (r core.Competition, exists bool) {
	v := m.competition_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCompetitionType returns the old "competition_type" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldCompetitionType(ctx context.Context) (v core.Competition, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompetitionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompetitionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompetitionType: %w", err)
	}
	return oldValue.CompetitionType, nil
}

// AddCompetitionType adds c to the "competition_type" field.
func (m *ApplicationMutation) AddCompetitionType(c core.Competition) {
	if m.addcompetition_type != nil {
		*m.addcompetition_type += c
	} else {
		m.addcompetition_type = &c
	}
}

// AddedCompetitionType returns the value that was added to the "competition_type" field in this mutation.
func (m *ApplicationMutation) AddedCompetitionType() (r core.Competition, exists bool) {
	v := m.addcompetition_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetCompetitionType resets all changes to the "competition_type" field.
func (m *ApplicationMutation) ResetCompetitionType() {
	m.competition_type = nil
	m.addcompetition_type = nil
}

// SetRatingPlace sets the "rating_place" field.
func (m *ApplicationMutation) SetRatingPlace(i int) {
	m.rating_place = &i
	m.addrating_place = nil
}

// RatingPlace returns the value of the "rating_place" field in the mutation.
func (m *ApplicationMutation) RatingPlace() (r int, exists bool) {
	v := m.rating_place
	if v == nil {
		return
	}
	return *v, true
}

// OldRatingPlace returns the old "rating_place" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldRatingPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRatingPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRatingPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRatingPlace: %w", err)
	}
	return oldValue.RatingPlace, nil
}

// AddRatingPlace adds i to the "rating_place" field.
func (m *ApplicationMutation) AddRatingPlace(i int) {
	if m.addrating_place != nil {
		*m.addrating_place += i
	} else {
		m.addrating_place = &i
	}
}

// AddedRatingPlace returns the value that was added to the "rating_place" field in this mutation.
func (m *ApplicationMutation) AddedRatingPlace() (r int, exists bool) {
	v := m.addrating_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetRatingPlace resets all changes to the "rating_place" field.
func (m *ApplicationMutation) ResetRatingPlace() {
	m.rating_place = nil
	m.addrating_place = nil
}

// SetScore sets the "score" field.
func (m *ApplicationMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *ApplicationMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *ApplicationMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *ApplicationMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *ApplicationMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetIteration sets the "iteration" field.
func (m *ApplicationMutation) SetIteration(i int) {
	m.iteration = &i
	m.additeration = nil
}

// Iteration returns the value of the "iteration" field in the mutation.
func (m *ApplicationMutation) Iteration() (r int, exists bool) {
	v := m.iteration
	if v == nil {
		return
	}
	return *v, true
}

// OldIteration returns the old "iteration" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldIteration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIteration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIteration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIteration: %w", err)
	}
	return oldValue.Iteration, nil
}

// AddIteration adds i to the "iteration" field.
func (m *ApplicationMutation) AddIteration(i int) {
	if m.additeration != nil {
		*m.additeration += i
	} else {
		m.additeration = &i
	}
}

// AddedIteration returns the value that was added to the "iteration" field in this mutation.
func (m *ApplicationMutation) AddedIteration() (r int, exists bool) {
	v := m.additeration
	if v == nil {
		return
	}
	return *v, true
}

// ResetIteration resets all changes to the "iteration" field.
func (m *ApplicationMutation) ResetIteration() {
	m.iteration = nil
	m.additeration = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ApplicationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ApplicationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ApplicationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetHeadingID sets the "heading" edge to the Heading entity by id.
func (m *ApplicationMutation) SetHeadingID(id int) {
	m.heading = &id
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (m *ApplicationMutation) ClearHeading() {
	m.clearedheading = true
}

// HeadingCleared reports if the "heading" edge to the Heading entity was cleared.
func (m *ApplicationMutation) HeadingCleared() bool {
	return m.clearedheading
}

// HeadingID returns the "heading" edge ID in the mutation.
func (m *ApplicationMutation) HeadingID() (id int, exists bool) {
	if m.heading != nil {
		return *m.heading, true
	}
	return
}

// HeadingIDs returns the "heading" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HeadingID instead. It exists only for internal usage by the builders.
func (m *ApplicationMutation) HeadingIDs() (ids []int) {
	if id := m.heading; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHeading resets all changes to the "heading" edge.
func (m *ApplicationMutation) ResetHeading() {
	m.heading = nil
	m.clearedheading = false
}

// Where appends a list predicates to the ApplicationMutation builder.
func (m *ApplicationMutation) Where(ps ...predicate.Application) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApplicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApplicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Application, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApplicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApplicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Application).
func (m *ApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.student_id != nil {
		fields = append(fields, application.FieldStudentID)
	}
	if m.priority != nil {
		fields = append(fields, application.FieldPriority)
	}
	if m.competition_type != nil {
		fields = append(fields, application.FieldCompetitionType)
	}
	if m.rating_place != nil {
		fields = append(fields, application.FieldRatingPlace)
	}
	if m.score != nil {
		fields = append(fields, application.FieldScore)
	}
	if m.iteration != nil {
		fields = append(fields, application.FieldIteration)
	}
	if m.updated_at != nil {
		fields = append(fields, application.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case application.FieldStudentID:
		return m.StudentID()
	case application.FieldPriority:
		return m.Priority()
	case application.FieldCompetitionType:
		return m.CompetitionType()
	case application.FieldRatingPlace:
		return m.RatingPlace()
	case application.FieldScore:
		return m.Score()
	case application.FieldIteration:
		return m.Iteration()
	case application.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case application.FieldStudentID:
		return m.OldStudentID(ctx)
	case application.FieldPriority:
		return m.OldPriority(ctx)
	case application.FieldCompetitionType:
		return m.OldCompetitionType(ctx)
	case application.FieldRatingPlace:
		return m.OldRatingPlace(ctx)
	case application.FieldScore:
		return m.OldScore(ctx)
	case application.FieldIteration:
		return m.OldIteration(ctx)
	case application.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Application field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case application.FieldStudentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case application.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case application.FieldCompetitionType:
		v, ok := value.(core.Competition)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompetitionType(v)
		return nil
	case application.FieldRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRatingPlace(v)
		return nil
	case application.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case application.FieldIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIteration(v)
		return nil
	case application.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, application.FieldPriority)
	}
	if m.addcompetition_type != nil {
		fields = append(fields, application.FieldCompetitionType)
	}
	if m.addrating_place != nil {
		fields = append(fields, application.FieldRatingPlace)
	}
	if m.addscore != nil {
		fields = append(fields, application.FieldScore)
	}
	if m.additeration != nil {
		fields = append(fields, application.FieldIteration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case application.FieldPriority:
		return m.AddedPriority()
	case application.FieldCompetitionType:
		return m.AddedCompetitionType()
	case application.FieldRatingPlace:
		return m.AddedRatingPlace()
	case application.FieldScore:
		return m.AddedScore()
	case application.FieldIteration:
		return m.AddedIteration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case application.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	case application.FieldCompetitionType:
		v, ok := value.(core.Competition)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCompetitionType(v)
		return nil
	case application.FieldRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRatingPlace(v)
		return nil
	case application.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	case application.FieldIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIteration(v)
		return nil
	}
	return fmt.Errorf("unknown Application numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Application nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationMutation) ResetField(name string) error {
	switch name {
	case application.FieldStudentID:
		m.ResetStudentID()
		return nil
	case application.FieldPriority:
		m.ResetPriority()
		return nil
	case application.FieldCompetitionType:
		m.ResetCompetitionType()
		return nil
	case application.FieldRatingPlace:
		m.ResetRatingPlace()
		return nil
	case application.FieldScore:
		m.ResetScore()
		return nil
	case application.FieldIteration:
		m.ResetIteration()
		return nil
	case application.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.heading != nil {
		edges = append(edges, application.EdgeHeading)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case application.EdgeHeading:
		if id := m.heading; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedheading {
		edges = append(edges, application.EdgeHeading)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationMutation) EdgeCleared(name string) bool {
	switch name {
	case application.EdgeHeading:
		return m.clearedheading
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationMutation) ClearEdge(name string) error {
	switch name {
	case application.EdgeHeading:
		m.ClearHeading()
		return nil
	}
	return fmt.Errorf("unknown Application unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationMutation) ResetEdge(name string) error {
	switch name {
	case application.EdgeHeading:
		m.ResetHeading()
		return nil
	}
	return fmt.Errorf("unknown Application edge %s", name)
}

// CalculationMutation represents an operation that mutates the Calculation nodes in the graph.
type CalculationMutation struct {
	config
	op                Op
	typ               string
	id                *int
	student_id        *string
	admitted_place    *int
	addadmitted_place *int
	iteration         *int
	additeration      *int
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	heading           *int
	clearedheading    bool
	done              bool
	oldValue          func(context.Context) (*Calculation, error)
	predicates        []predicate.Calculation
}

var _ ent.Mutation = (*CalculationMutation)(nil)

// calculationOption allows management of the mutation configuration using functional options.
type calculationOption func(*CalculationMutation)

// newCalculationMutation creates new mutation for the Calculation entity.
func newCalculationMutation(c config, op Op, opts ...calculationOption) *CalculationMutation {
	m := &CalculationMutation{
		config:        c,
		op:            op,
		typ:           TypeCalculation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCalculationID sets the ID field of the mutation.
func withCalculationID(id int) calculationOption {
	return func(m *CalculationMutation) {
		var (
			err   error
			once  sync.Once
			value *Calculation
		)
		m.oldValue = func(ctx context.Context) (*Calculation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Calculation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCalculation sets the old Calculation of the mutation.
func withCalculation(node *Calculation) calculationOption {
	return func(m *CalculationMutation) {
		m.oldValue = func(context.Context) (*Calculation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CalculationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CalculationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CalculationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CalculationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Calculation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentID sets the "student_id" field.
func (m *CalculationMutation) SetStudentID(s string) {
	m.student_id = &s
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *CalculationMutation) StudentID() (r string, exists bool) {
	v := m.student_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the Calculation entity.
// If the Calculation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalculationMutation) OldStudentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *CalculationMutation) ResetStudentID() {
	m.student_id = nil
}

// SetAdmittedPlace sets the "admitted_place" field.
func (m *CalculationMutation) SetAdmittedPlace(i int) {
	m.admitted_place = &i
	m.addadmitted_place = nil
}

// AdmittedPlace returns the value of the "admitted_place" field in the mutation.
func (m *CalculationMutation) AdmittedPlace() (r int, exists bool) {
	v := m.admitted_place
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmittedPlace returns the old "admitted_place" field's value of the Calculation entity.
// If the Calculation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalculationMutation) OldAdmittedPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdmittedPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdmittedPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmittedPlace: %w", err)
	}
	return oldValue.AdmittedPlace, nil
}

// AddAdmittedPlace adds i to the "admitted_place" field.
func (m *CalculationMutation) AddAdmittedPlace(i int) {
	if m.addadmitted_place != nil {
		*m.addadmitted_place += i
	} else {
		m.addadmitted_place = &i
	}
}

// AddedAdmittedPlace returns the value that was added to the "admitted_place" field in this mutation.
func (m *CalculationMutation) AddedAdmittedPlace() (r int, exists bool) {
	v := m.addadmitted_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetAdmittedPlace resets all changes to the "admitted_place" field.
func (m *CalculationMutation) ResetAdmittedPlace() {
	m.admitted_place = nil
	m.addadmitted_place = nil
}

// SetIteration sets the "iteration" field.
func (m *CalculationMutation) SetIteration(i int) {
	m.iteration = &i
	m.additeration = nil
}

// Iteration returns the value of the "iteration" field in the mutation.
func (m *CalculationMutation) Iteration() (r int, exists bool) {
	v := m.iteration
	if v == nil {
		return
	}
	return *v, true
}

// OldIteration returns the old "iteration" field's value of the Calculation entity.
// If the Calculation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalculationMutation) OldIteration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIteration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIteration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIteration: %w", err)
	}
	return oldValue.Iteration, nil
}

// AddIteration adds i to the "iteration" field.
func (m *CalculationMutation) AddIteration(i int) {
	if m.additeration != nil {
		*m.additeration += i
	} else {
		m.additeration = &i
	}
}

// AddedIteration returns the value that was added to the "iteration" field in this mutation.
func (m *CalculationMutation) AddedIteration() (r int, exists bool) {
	v := m.additeration
	if v == nil {
		return
	}
	return *v, true
}

// ResetIteration resets all changes to the "iteration" field.
func (m *CalculationMutation) ResetIteration() {
	m.iteration = nil
	m.additeration = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CalculationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CalculationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Calculation entity.
// If the Calculation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalculationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CalculationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetHeadingID sets the "heading" edge to the Heading entity by id.
func (m *CalculationMutation) SetHeadingID(id int) {
	m.heading = &id
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (m *CalculationMutation) ClearHeading() {
	m.clearedheading = true
}

// HeadingCleared reports if the "heading" edge to the Heading entity was cleared.
func (m *CalculationMutation) HeadingCleared() bool {
	return m.clearedheading
}

// HeadingID returns the "heading" edge ID in the mutation.
func (m *CalculationMutation) HeadingID() (id int, exists bool) {
	if m.heading != nil {
		return *m.heading, true
	}
	return
}

// HeadingIDs returns the "heading" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HeadingID instead. It exists only for internal usage by the builders.
func (m *CalculationMutation) HeadingIDs() (ids []int) {
	if id := m.heading; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHeading resets all changes to the "heading" edge.
func (m *CalculationMutation) ResetHeading() {
	m.heading = nil
	m.clearedheading = false
}

// Where appends a list predicates to the CalculationMutation builder.
func (m *CalculationMutation) Where(ps ...predicate.Calculation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CalculationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CalculationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Calculation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CalculationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CalculationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Calculation).
func (m *CalculationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CalculationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.student_id != nil {
		fields = append(fields, calculation.FieldStudentID)
	}
	if m.admitted_place != nil {
		fields = append(fields, calculation.FieldAdmittedPlace)
	}
	if m.iteration != nil {
		fields = append(fields, calculation.FieldIteration)
	}
	if m.updated_at != nil {
		fields = append(fields, calculation.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CalculationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case calculation.FieldStudentID:
		return m.StudentID()
	case calculation.FieldAdmittedPlace:
		return m.AdmittedPlace()
	case calculation.FieldIteration:
		return m.Iteration()
	case calculation.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CalculationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case calculation.FieldStudentID:
		return m.OldStudentID(ctx)
	case calculation.FieldAdmittedPlace:
		return m.OldAdmittedPlace(ctx)
	case calculation.FieldIteration:
		return m.OldIteration(ctx)
	case calculation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Calculation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CalculationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case calculation.FieldStudentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case calculation.FieldAdmittedPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmittedPlace(v)
		return nil
	case calculation.FieldIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIteration(v)
		return nil
	case calculation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Calculation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CalculationMutation) AddedFields() []string {
	var fields []string
	if m.addadmitted_place != nil {
		fields = append(fields, calculation.FieldAdmittedPlace)
	}
	if m.additeration != nil {
		fields = append(fields, calculation.FieldIteration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CalculationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case calculation.FieldAdmittedPlace:
		return m.AddedAdmittedPlace()
	case calculation.FieldIteration:
		return m.AddedIteration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CalculationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case calculation.FieldAdmittedPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAdmittedPlace(v)
		return nil
	case calculation.FieldIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIteration(v)
		return nil
	}
	return fmt.Errorf("unknown Calculation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CalculationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CalculationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CalculationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Calculation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CalculationMutation) ResetField(name string) error {
	switch name {
	case calculation.FieldStudentID:
		m.ResetStudentID()
		return nil
	case calculation.FieldAdmittedPlace:
		m.ResetAdmittedPlace()
		return nil
	case calculation.FieldIteration:
		m.ResetIteration()
		return nil
	case calculation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Calculation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CalculationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.heading != nil {
		edges = append(edges, calculation.EdgeHeading)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CalculationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case calculation.EdgeHeading:
		if id := m.heading; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CalculationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CalculationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CalculationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedheading {
		edges = append(edges, calculation.EdgeHeading)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CalculationMutation) EdgeCleared(name string) bool {
	switch name {
	case calculation.EdgeHeading:
		return m.clearedheading
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CalculationMutation) ClearEdge(name string) error {
	switch name {
	case calculation.EdgeHeading:
		m.ClearHeading()
		return nil
	}
	return fmt.Errorf("unknown Calculation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CalculationMutation) ResetEdge(name string) error {
	switch name {
	case calculation.EdgeHeading:
		m.ResetHeading()
		return nil
	}
	return fmt.Errorf("unknown Calculation edge %s", name)
}

// DrainedResultMutation represents an operation that mutates the DrainedResult nodes in the graph.
type DrainedResultMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	drained_percent               *int
	adddrained_percent            *int
	passing_score                 *int
	addpassing_score              *int
	last_admitted_rating_place    *int
	addlast_admitted_rating_place *int
	iteration                     *int
	additeration                  *int
	clearedFields                 map[string]struct{}
	heading                       *int
	clearedheading                bool
	done                          bool
	oldValue                      func(context.Context) (*DrainedResult, error)
	predicates                    []predicate.DrainedResult
}

var _ ent.Mutation = (*DrainedResultMutation)(nil)

// drainedresultOption allows management of the mutation configuration using functional options.
type drainedresultOption func(*DrainedResultMutation)

// newDrainedResultMutation creates new mutation for the DrainedResult entity.
func newDrainedResultMutation(c config, op Op, opts ...drainedresultOption) *DrainedResultMutation {
	m := &DrainedResultMutation{
		config:        c,
		op:            op,
		typ:           TypeDrainedResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrainedResultID sets the ID field of the mutation.
func withDrainedResultID(id int) drainedresultOption {
	return func(m *DrainedResultMutation) {
		var (
			err   error
			once  sync.Once
			value *DrainedResult
		)
		m.oldValue = func(ctx context.Context) (*DrainedResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DrainedResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrainedResult sets the old DrainedResult of the mutation.
func withDrainedResult(node *DrainedResult) drainedresultOption {
	return func(m *DrainedResultMutation) {
		m.oldValue = func(context.Context) (*DrainedResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrainedResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrainedResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DrainedResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DrainedResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DrainedResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDrainedPercent sets the "drained_percent" field.
func (m *DrainedResultMutation) SetDrainedPercent(i int) {
	m.drained_percent = &i
	m.adddrained_percent = nil
}

// DrainedPercent returns the value of the "drained_percent" field in the mutation.
func (m *DrainedResultMutation) DrainedPercent() (r int, exists bool) {
	v := m.drained_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldDrainedPercent returns the old "drained_percent" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldDrainedPercent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDrainedPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDrainedPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrainedPercent: %w", err)
	}
	return oldValue.DrainedPercent, nil
}

// AddDrainedPercent adds i to the "drained_percent" field.
func (m *DrainedResultMutation) AddDrainedPercent(i int) {
	if m.adddrained_percent != nil {
		*m.adddrained_percent += i
	} else {
		m.adddrained_percent = &i
	}
}

// AddedDrainedPercent returns the value that was added to the "drained_percent" field in this mutation.
func (m *DrainedResultMutation) AddedDrainedPercent() (r int, exists bool) {
	v := m.adddrained_percent
	if v == nil {
		return
	}
	return *v, true
}

// ResetDrainedPercent resets all changes to the "drained_percent" field.
func (m *DrainedResultMutation) ResetDrainedPercent() {
	m.drained_percent = nil
	m.adddrained_percent = nil
}

// SetPassingScore sets the "passing_score" field.
func (m *DrainedResultMutation) SetPassingScore(i int) {
	m.passing_score = &i
	m.addpassing_score = nil
}

// PassingScore returns the value of the "passing_score" field in the mutation.
func (m *DrainedResultMutation) PassingScore() (r int, exists bool) {
	v := m.passing_score
	if v == nil {
		return
	}
	return *v, true
}

// OldPassingScore returns the old "passing_score" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldPassingScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassingScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassingScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassingScore: %w", err)
	}
	return oldValue.PassingScore, nil
}

// AddPassingScore adds i to the "passing_score" field.
func (m *DrainedResultMutation) AddPassingScore(i int) {
	if m.addpassing_score != nil {
		*m.addpassing_score += i
	} else {
		m.addpassing_score = &i
	}
}

// AddedPassingScore returns the value that was added to the "passing_score" field in this mutation.
func (m *DrainedResultMutation) AddedPassingScore() (r int, exists bool) {
	v := m.addpassing_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetPassingScore resets all changes to the "passing_score" field.
func (m *DrainedResultMutation) ResetPassingScore() {
	m.passing_score = nil
	m.addpassing_score = nil
}

// SetLastAdmittedRatingPlace sets the "last_admitted_rating_place" field.
func (m *DrainedResultMutation) SetLastAdmittedRatingPlace(i int) {
	m.last_admitted_rating_place = &i
	m.addlast_admitted_rating_place = nil
}

// LastAdmittedRatingPlace returns the value of the "last_admitted_rating_place" field in the mutation.
func (m *DrainedResultMutation) LastAdmittedRatingPlace() (r int, exists bool) {
	v := m.last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// OldLastAdmittedRatingPlace returns the old "last_admitted_rating_place" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldLastAdmittedRatingPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastAdmittedRatingPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastAdmittedRatingPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastAdmittedRatingPlace: %w", err)
	}
	return oldValue.LastAdmittedRatingPlace, nil
}

// AddLastAdmittedRatingPlace adds i to the "last_admitted_rating_place" field.
func (m *DrainedResultMutation) AddLastAdmittedRatingPlace(i int) {
	if m.addlast_admitted_rating_place != nil {
		*m.addlast_admitted_rating_place += i
	} else {
		m.addlast_admitted_rating_place = &i
	}
}

// AddedLastAdmittedRatingPlace returns the value that was added to the "last_admitted_rating_place" field in this mutation.
func (m *DrainedResultMutation) AddedLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.addlast_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastAdmittedRatingPlace resets all changes to the "last_admitted_rating_place" field.
func (m *DrainedResultMutation) ResetLastAdmittedRatingPlace() {
	m.last_admitted_rating_place = nil
	m.addlast_admitted_rating_place = nil
}

// SetIteration sets the "iteration" field.
func (m *DrainedResultMutation) SetIteration(i int) {
	m.iteration = &i
	m.additeration = nil
}

// Iteration returns the value of the "iteration" field in the mutation.
func (m *DrainedResultMutation) Iteration() (r int, exists bool) {
	v := m.iteration
	if v == nil {
		return
	}
	return *v, true
}

// OldIteration returns the old "iteration" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldIteration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIteration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIteration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIteration: %w", err)
	}
	return oldValue.Iteration, nil
}

// AddIteration adds i to the "iteration" field.
func (m *DrainedResultMutation) AddIteration(i int) {
	if m.additeration != nil {
		*m.additeration += i
	} else {
		m.additeration = &i
	}
}

// AddedIteration returns the value that was added to the "iteration" field in this mutation.
func (m *DrainedResultMutation) AddedIteration() (r int, exists bool) {
	v := m.additeration
	if v == nil {
		return
	}
	return *v, true
}

// ResetIteration resets all changes to the "iteration" field.
func (m *DrainedResultMutation) ResetIteration() {
	m.iteration = nil
	m.additeration = nil
}

// SetHeadingID sets the "heading" edge to the Heading entity by id.
func (m *DrainedResultMutation) SetHeadingID(id int) {
	m.heading = &id
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (m *DrainedResultMutation) ClearHeading() {
	m.clearedheading = true
}

// HeadingCleared reports if the "heading" edge to the Heading entity was cleared.
func (m *DrainedResultMutation) HeadingCleared() bool {
	return m.clearedheading
}

// HeadingID returns the "heading" edge ID in the mutation.
func (m *DrainedResultMutation) HeadingID() (id int, exists bool) {
	if m.heading != nil {
		return *m.heading, true
	}
	return
}

// HeadingIDs returns the "heading" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HeadingID instead. It exists only for internal usage by the builders.
func (m *DrainedResultMutation) HeadingIDs() (ids []int) {
	if id := m.heading; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHeading resets all changes to the "heading" edge.
func (m *DrainedResultMutation) ResetHeading() {
	m.heading = nil
	m.clearedheading = false
}

// Where appends a list predicates to the DrainedResultMutation builder.
func (m *DrainedResultMutation) Where(ps ...predicate.DrainedResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DrainedResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DrainedResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DrainedResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DrainedResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DrainedResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DrainedResult).
func (m *DrainedResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DrainedResultMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.drained_percent != nil {
		fields = append(fields, drainedresult.FieldDrainedPercent)
	}
	if m.passing_score != nil {
		fields = append(fields, drainedresult.FieldPassingScore)
	}
	if m.last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldLastAdmittedRatingPlace)
	}
	if m.iteration != nil {
		fields = append(fields, drainedresult.FieldIteration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DrainedResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drainedresult.FieldDrainedPercent:
		return m.DrainedPercent()
	case drainedresult.FieldPassingScore:
		return m.PassingScore()
	case drainedresult.FieldLastAdmittedRatingPlace:
		return m.LastAdmittedRatingPlace()
	case drainedresult.FieldIteration:
		return m.Iteration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DrainedResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drainedresult.FieldDrainedPercent:
		return m.OldDrainedPercent(ctx)
	case drainedresult.FieldPassingScore:
		return m.OldPassingScore(ctx)
	case drainedresult.FieldLastAdmittedRatingPlace:
		return m.OldLastAdmittedRatingPlace(ctx)
	case drainedresult.FieldIteration:
		return m.OldIteration(ctx)
	}
	return nil, fmt.Errorf("unknown DrainedResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DrainedResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drainedresult.FieldDrainedPercent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrainedPercent(v)
		return nil
	case drainedresult.FieldPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassingScore(v)
		return nil
	case drainedresult.FieldLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIteration(v)
		return nil
	}
	return fmt.Errorf("unknown DrainedResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DrainedResultMutation) AddedFields() []string {
	var fields []string
	if m.adddrained_percent != nil {
		fields = append(fields, drainedresult.FieldDrainedPercent)
	}
	if m.addpassing_score != nil {
		fields = append(fields, drainedresult.FieldPassingScore)
	}
	if m.addlast_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldLastAdmittedRatingPlace)
	}
	if m.additeration != nil {
		fields = append(fields, drainedresult.FieldIteration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DrainedResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case drainedresult.FieldDrainedPercent:
		return m.AddedDrainedPercent()
	case drainedresult.FieldPassingScore:
		return m.AddedPassingScore()
	case drainedresult.FieldLastAdmittedRatingPlace:
		return m.AddedLastAdmittedRatingPlace()
	case drainedresult.FieldIteration:
		return m.AddedIteration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DrainedResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case drainedresult.FieldDrainedPercent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDrainedPercent(v)
		return nil
	case drainedresult.FieldPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPassingScore(v)
		return nil
	case drainedresult.FieldLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIteration(v)
		return nil
	}
	return fmt.Errorf("unknown DrainedResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DrainedResultMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DrainedResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrainedResultMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DrainedResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DrainedResultMutation) ResetField(name string) error {
	switch name {
	case drainedresult.FieldDrainedPercent:
		m.ResetDrainedPercent()
		return nil
	case drainedresult.FieldPassingScore:
		m.ResetPassingScore()
		return nil
	case drainedresult.FieldLastAdmittedRatingPlace:
		m.ResetLastAdmittedRatingPlace()
		return nil
	case drainedresult.FieldIteration:
		m.ResetIteration()
		return nil
	}
	return fmt.Errorf("unknown DrainedResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DrainedResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.heading != nil {
		edges = append(edges, drainedresult.EdgeHeading)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DrainedResultMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drainedresult.EdgeHeading:
		if id := m.heading; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DrainedResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DrainedResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DrainedResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedheading {
		edges = append(edges, drainedresult.EdgeHeading)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DrainedResultMutation) EdgeCleared(name string) bool {
	switch name {
	case drainedresult.EdgeHeading:
		return m.clearedheading
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DrainedResultMutation) ClearEdge(name string) error {
	switch name {
	case drainedresult.EdgeHeading:
		m.ClearHeading()
		return nil
	}
	return fmt.Errorf("unknown DrainedResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DrainedResultMutation) ResetEdge(name string) error {
	switch name {
	case drainedresult.EdgeHeading:
		m.ResetHeading()
		return nil
	}
	return fmt.Errorf("unknown DrainedResult edge %s", name)
}

// HeadingMutation represents an operation that mutates the Heading nodes in the graph.
type HeadingMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	regular_capacity            *int
	addregular_capacity         *int
	target_quota_capacity       *int
	addtarget_quota_capacity    *int
	dedicated_quota_capacity    *int
	adddedicated_quota_capacity *int
	special_quota_capacity      *int
	addspecial_quota_capacity   *int
	code                        *string
	name                        *string
	clearedFields               map[string]struct{}
	varsity                     *int
	clearedvarsity              bool
	applications                map[int]struct{}
	removedapplications         map[int]struct{}
	clearedapplications         bool
	calculations                map[int]struct{}
	removedcalculations         map[int]struct{}
	clearedcalculations         bool
	drained_results             map[int]struct{}
	removeddrained_results      map[int]struct{}
	cleareddrained_results      bool
	done                        bool
	oldValue                    func(context.Context) (*Heading, error)
	predicates                  []predicate.Heading
}

var _ ent.Mutation = (*HeadingMutation)(nil)

// headingOption allows management of the mutation configuration using functional options.
type headingOption func(*HeadingMutation)

// newHeadingMutation creates new mutation for the Heading entity.
func newHeadingMutation(c config, op Op, opts ...headingOption) *HeadingMutation {
	m := &HeadingMutation{
		config:        c,
		op:            op,
		typ:           TypeHeading,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHeadingID sets the ID field of the mutation.
func withHeadingID(id int) headingOption {
	return func(m *HeadingMutation) {
		var (
			err   error
			once  sync.Once
			value *Heading
		)
		m.oldValue = func(ctx context.Context) (*Heading, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Heading.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHeading sets the old Heading of the mutation.
func withHeading(node *Heading) headingOption {
	return func(m *HeadingMutation) {
		m.oldValue = func(context.Context) (*Heading, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HeadingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HeadingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HeadingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HeadingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Heading.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRegularCapacity sets the "regular_capacity" field.
func (m *HeadingMutation) SetRegularCapacity(i int) {
	m.regular_capacity = &i
	m.addregular_capacity = nil
}

// RegularCapacity returns the value of the "regular_capacity" field in the mutation.
func (m *HeadingMutation) RegularCapacity() (r int, exists bool) {
	v := m.regular_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldRegularCapacity returns the old "regular_capacity" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldRegularCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegularCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegularCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegularCapacity: %w", err)
	}
	return oldValue.RegularCapacity, nil
}

// AddRegularCapacity adds i to the "regular_capacity" field.
func (m *HeadingMutation) AddRegularCapacity(i int) {
	if m.addregular_capacity != nil {
		*m.addregular_capacity += i
	} else {
		m.addregular_capacity = &i
	}
}

// AddedRegularCapacity returns the value that was added to the "regular_capacity" field in this mutation.
func (m *HeadingMutation) AddedRegularCapacity() (r int, exists bool) {
	v := m.addregular_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetRegularCapacity resets all changes to the "regular_capacity" field.
func (m *HeadingMutation) ResetRegularCapacity() {
	m.regular_capacity = nil
	m.addregular_capacity = nil
}

// SetTargetQuotaCapacity sets the "target_quota_capacity" field.
func (m *HeadingMutation) SetTargetQuotaCapacity(i int) {
	m.target_quota_capacity = &i
	m.addtarget_quota_capacity = nil
}

// TargetQuotaCapacity returns the value of the "target_quota_capacity" field in the mutation.
func (m *HeadingMutation) TargetQuotaCapacity() (r int, exists bool) {
	v := m.target_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetQuotaCapacity returns the old "target_quota_capacity" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldTargetQuotaCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetQuotaCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetQuotaCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetQuotaCapacity: %w", err)
	}
	return oldValue.TargetQuotaCapacity, nil
}

// AddTargetQuotaCapacity adds i to the "target_quota_capacity" field.
func (m *HeadingMutation) AddTargetQuotaCapacity(i int) {
	if m.addtarget_quota_capacity != nil {
		*m.addtarget_quota_capacity += i
	} else {
		m.addtarget_quota_capacity = &i
	}
}

// AddedTargetQuotaCapacity returns the value that was added to the "target_quota_capacity" field in this mutation.
func (m *HeadingMutation) AddedTargetQuotaCapacity() (r int, exists bool) {
	v := m.addtarget_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetTargetQuotaCapacity resets all changes to the "target_quota_capacity" field.
func (m *HeadingMutation) ResetTargetQuotaCapacity() {
	m.target_quota_capacity = nil
	m.addtarget_quota_capacity = nil
}

// SetDedicatedQuotaCapacity sets the "dedicated_quota_capacity" field.
func (m *HeadingMutation) SetDedicatedQuotaCapacity(i int) {
	m.dedicated_quota_capacity = &i
	m.adddedicated_quota_capacity = nil
}

// DedicatedQuotaCapacity returns the value of the "dedicated_quota_capacity" field in the mutation.
func (m *HeadingMutation) DedicatedQuotaCapacity() (r int, exists bool) {
	v := m.dedicated_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldDedicatedQuotaCapacity returns the old "dedicated_quota_capacity" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldDedicatedQuotaCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDedicatedQuotaCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDedicatedQuotaCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDedicatedQuotaCapacity: %w", err)
	}
	return oldValue.DedicatedQuotaCapacity, nil
}

// AddDedicatedQuotaCapacity adds i to the "dedicated_quota_capacity" field.
func (m *HeadingMutation) AddDedicatedQuotaCapacity(i int) {
	if m.adddedicated_quota_capacity != nil {
		*m.adddedicated_quota_capacity += i
	} else {
		m.adddedicated_quota_capacity = &i
	}
}

// AddedDedicatedQuotaCapacity returns the value that was added to the "dedicated_quota_capacity" field in this mutation.
func (m *HeadingMutation) AddedDedicatedQuotaCapacity() (r int, exists bool) {
	v := m.adddedicated_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetDedicatedQuotaCapacity resets all changes to the "dedicated_quota_capacity" field.
func (m *HeadingMutation) ResetDedicatedQuotaCapacity() {
	m.dedicated_quota_capacity = nil
	m.adddedicated_quota_capacity = nil
}

// SetSpecialQuotaCapacity sets the "special_quota_capacity" field.
func (m *HeadingMutation) SetSpecialQuotaCapacity(i int) {
	m.special_quota_capacity = &i
	m.addspecial_quota_capacity = nil
}

// SpecialQuotaCapacity returns the value of the "special_quota_capacity" field in the mutation.
func (m *HeadingMutation) SpecialQuotaCapacity() (r int, exists bool) {
	v := m.special_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldSpecialQuotaCapacity returns the old "special_quota_capacity" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldSpecialQuotaCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpecialQuotaCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpecialQuotaCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpecialQuotaCapacity: %w", err)
	}
	return oldValue.SpecialQuotaCapacity, nil
}

// AddSpecialQuotaCapacity adds i to the "special_quota_capacity" field.
func (m *HeadingMutation) AddSpecialQuotaCapacity(i int) {
	if m.addspecial_quota_capacity != nil {
		*m.addspecial_quota_capacity += i
	} else {
		m.addspecial_quota_capacity = &i
	}
}

// AddedSpecialQuotaCapacity returns the value that was added to the "special_quota_capacity" field in this mutation.
func (m *HeadingMutation) AddedSpecialQuotaCapacity() (r int, exists bool) {
	v := m.addspecial_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetSpecialQuotaCapacity resets all changes to the "special_quota_capacity" field.
func (m *HeadingMutation) ResetSpecialQuotaCapacity() {
	m.special_quota_capacity = nil
	m.addspecial_quota_capacity = nil
}

// SetCode sets the "code" field.
func (m *HeadingMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *HeadingMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *HeadingMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *HeadingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HeadingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HeadingMutation) ResetName() {
	m.name = nil
}

// SetVarsityID sets the "varsity" edge to the Varsity entity by id.
func (m *HeadingMutation) SetVarsityID(id int) {
	m.varsity = &id
}

// ClearVarsity clears the "varsity" edge to the Varsity entity.
func (m *HeadingMutation) ClearVarsity() {
	m.clearedvarsity = true
}

// VarsityCleared reports if the "varsity" edge to the Varsity entity was cleared.
func (m *HeadingMutation) VarsityCleared() bool {
	return m.clearedvarsity
}

// VarsityID returns the "varsity" edge ID in the mutation.
func (m *HeadingMutation) VarsityID() (id int, exists bool) {
	if m.varsity != nil {
		return *m.varsity, true
	}
	return
}

// VarsityIDs returns the "varsity" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VarsityID instead. It exists only for internal usage by the builders.
func (m *HeadingMutation) VarsityIDs() (ids []int) {
	if id := m.varsity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVarsity resets all changes to the "varsity" edge.
func (m *HeadingMutation) ResetVarsity() {
	m.varsity = nil
	m.clearedvarsity = false
}

// AddApplicationIDs adds the "applications" edge to the Application entity by ids.
func (m *HeadingMutation) AddApplicationIDs(ids ...int) {
	if m.applications == nil {
		m.applications = make(map[int]struct{})
	}
	for i := range ids {
		m.applications[ids[i]] = struct{}{}
	}
}

// ClearApplications clears the "applications" edge to the Application entity.
func (m *HeadingMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the Application entity was cleared.
func (m *HeadingMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// RemoveApplicationIDs removes the "applications" edge to the Application entity by IDs.
func (m *HeadingMutation) RemoveApplicationIDs(ids ...int) {
	if m.removedapplications == nil {
		m.removedapplications = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.applications, ids[i])
		m.removedapplications[ids[i]] = struct{}{}
	}
}

// RemovedApplications returns the removed IDs of the "applications" edge to the Application entity.
func (m *HeadingMutation) RemovedApplicationsIDs() (ids []int) {
	for id := range m.removedapplications {
		ids = append(ids, id)
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
func (m *HeadingMutation) ApplicationsIDs() (ids []int) {
	for id := range m.applications {
		ids = append(ids, id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *HeadingMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
	m.removedapplications = nil
}

// AddCalculationIDs adds the "calculations" edge to the Calculation entity by ids.
func (m *HeadingMutation) AddCalculationIDs(ids ...int) {
	if m.calculations == nil {
		m.calculations = make(map[int]struct{})
	}
	for i := range ids {
		m.calculations[ids[i]] = struct{}{}
	}
}

// ClearCalculations clears the "calculations" edge to the Calculation entity.
func (m *HeadingMutation) ClearCalculations() {
	m.clearedcalculations = true
}

// CalculationsCleared reports if the "calculations" edge to the Calculation entity was cleared.
func (m *HeadingMutation) CalculationsCleared() bool {
	return m.clearedcalculations
}

// RemoveCalculationIDs removes the "calculations" edge to the Calculation entity by IDs.
func (m *HeadingMutation) RemoveCalculationIDs(ids ...int) {
	if m.removedcalculations == nil {
		m.removedcalculations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.calculations, ids[i])
		m.removedcalculations[ids[i]] = struct{}{}
	}
}

// RemovedCalculations returns the removed IDs of the "calculations" edge to the Calculation entity.
func (m *HeadingMutation) RemovedCalculationsIDs() (ids []int) {
	for id := range m.removedcalculations {
		ids = append(ids, id)
	}
	return
}

// CalculationsIDs returns the "calculations" edge IDs in the mutation.
func (m *HeadingMutation) CalculationsIDs() (ids []int) {
	for id := range m.calculations {
		ids = append(ids, id)
	}
	return
}

// ResetCalculations resets all changes to the "calculations" edge.
func (m *HeadingMutation) ResetCalculations() {
	m.calculations = nil
	m.clearedcalculations = false
	m.removedcalculations = nil
}

// AddDrainedResultIDs adds the "drained_results" edge to the DrainedResult entity by ids.
func (m *HeadingMutation) AddDrainedResultIDs(ids ...int) {
	if m.drained_results == nil {
		m.drained_results = make(map[int]struct{})
	}
	for i := range ids {
		m.drained_results[ids[i]] = struct{}{}
	}
}

// ClearDrainedResults clears the "drained_results" edge to the DrainedResult entity.
func (m *HeadingMutation) ClearDrainedResults() {
	m.cleareddrained_results = true
}

// DrainedResultsCleared reports if the "drained_results" edge to the DrainedResult entity was cleared.
func (m *HeadingMutation) DrainedResultsCleared() bool {
	return m.cleareddrained_results
}

// RemoveDrainedResultIDs removes the "drained_results" edge to the DrainedResult entity by IDs.
func (m *HeadingMutation) RemoveDrainedResultIDs(ids ...int) {
	if m.removeddrained_results == nil {
		m.removeddrained_results = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.drained_results, ids[i])
		m.removeddrained_results[ids[i]] = struct{}{}
	}
}

// RemovedDrainedResults returns the removed IDs of the "drained_results" edge to the DrainedResult entity.
func (m *HeadingMutation) RemovedDrainedResultsIDs() (ids []int) {
	for id := range m.removeddrained_results {
		ids = append(ids, id)
	}
	return
}

// DrainedResultsIDs returns the "drained_results" edge IDs in the mutation.
func (m *HeadingMutation) DrainedResultsIDs() (ids []int) {
	for id := range m.drained_results {
		ids = append(ids, id)
	}
	return
}

// ResetDrainedResults resets all changes to the "drained_results" edge.
func (m *HeadingMutation) ResetDrainedResults() {
	m.drained_results = nil
	m.cleareddrained_results = false
	m.removeddrained_results = nil
}

// Where appends a list predicates to the HeadingMutation builder.
func (m *HeadingMutation) Where(ps ...predicate.Heading) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HeadingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HeadingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Heading, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HeadingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HeadingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Heading).
func (m *HeadingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HeadingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.regular_capacity != nil {
		fields = append(fields, heading.FieldRegularCapacity)
	}
	if m.target_quota_capacity != nil {
		fields = append(fields, heading.FieldTargetQuotaCapacity)
	}
	if m.dedicated_quota_capacity != nil {
		fields = append(fields, heading.FieldDedicatedQuotaCapacity)
	}
	if m.special_quota_capacity != nil {
		fields = append(fields, heading.FieldSpecialQuotaCapacity)
	}
	if m.code != nil {
		fields = append(fields, heading.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, heading.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HeadingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case heading.FieldRegularCapacity:
		return m.RegularCapacity()
	case heading.FieldTargetQuotaCapacity:
		return m.TargetQuotaCapacity()
	case heading.FieldDedicatedQuotaCapacity:
		return m.DedicatedQuotaCapacity()
	case heading.FieldSpecialQuotaCapacity:
		return m.SpecialQuotaCapacity()
	case heading.FieldCode:
		return m.Code()
	case heading.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HeadingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case heading.FieldRegularCapacity:
		return m.OldRegularCapacity(ctx)
	case heading.FieldTargetQuotaCapacity:
		return m.OldTargetQuotaCapacity(ctx)
	case heading.FieldDedicatedQuotaCapacity:
		return m.OldDedicatedQuotaCapacity(ctx)
	case heading.FieldSpecialQuotaCapacity:
		return m.OldSpecialQuotaCapacity(ctx)
	case heading.FieldCode:
		return m.OldCode(ctx)
	case heading.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Heading field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HeadingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case heading.FieldRegularCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegularCapacity(v)
		return nil
	case heading.FieldTargetQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetQuotaCapacity(v)
		return nil
	case heading.FieldDedicatedQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDedicatedQuotaCapacity(v)
		return nil
	case heading.FieldSpecialQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpecialQuotaCapacity(v)
		return nil
	case heading.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case heading.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Heading field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HeadingMutation) AddedFields() []string {
	var fields []string
	if m.addregular_capacity != nil {
		fields = append(fields, heading.FieldRegularCapacity)
	}
	if m.addtarget_quota_capacity != nil {
		fields = append(fields, heading.FieldTargetQuotaCapacity)
	}
	if m.adddedicated_quota_capacity != nil {
		fields = append(fields, heading.FieldDedicatedQuotaCapacity)
	}
	if m.addspecial_quota_capacity != nil {
		fields = append(fields, heading.FieldSpecialQuotaCapacity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HeadingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case heading.FieldRegularCapacity:
		return m.AddedRegularCapacity()
	case heading.FieldTargetQuotaCapacity:
		return m.AddedTargetQuotaCapacity()
	case heading.FieldDedicatedQuotaCapacity:
		return m.AddedDedicatedQuotaCapacity()
	case heading.FieldSpecialQuotaCapacity:
		return m.AddedSpecialQuotaCapacity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HeadingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case heading.FieldRegularCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRegularCapacity(v)
		return nil
	case heading.FieldTargetQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetQuotaCapacity(v)
		return nil
	case heading.FieldDedicatedQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDedicatedQuotaCapacity(v)
		return nil
	case heading.FieldSpecialQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSpecialQuotaCapacity(v)
		return nil
	}
	return fmt.Errorf("unknown Heading numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HeadingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HeadingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HeadingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Heading nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HeadingMutation) ResetField(name string) error {
	switch name {
	case heading.FieldRegularCapacity:
		m.ResetRegularCapacity()
		return nil
	case heading.FieldTargetQuotaCapacity:
		m.ResetTargetQuotaCapacity()
		return nil
	case heading.FieldDedicatedQuotaCapacity:
		m.ResetDedicatedQuotaCapacity()
		return nil
	case heading.FieldSpecialQuotaCapacity:
		m.ResetSpecialQuotaCapacity()
		return nil
	case heading.FieldCode:
		m.ResetCode()
		return nil
	case heading.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Heading field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HeadingMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.varsity != nil {
		edges = append(edges, heading.EdgeVarsity)
	}
	if m.applications != nil {
		edges = append(edges, heading.EdgeApplications)
	}
	if m.calculations != nil {
		edges = append(edges, heading.EdgeCalculations)
	}
	if m.drained_results != nil {
		edges = append(edges, heading.EdgeDrainedResults)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HeadingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case heading.EdgeVarsity:
		if id := m.varsity; id != nil {
			return []ent.Value{*id}
		}
	case heading.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.applications))
		for id := range m.applications {
			ids = append(ids, id)
		}
		return ids
	case heading.EdgeCalculations:
		ids := make([]ent.Value, 0, len(m.calculations))
		for id := range m.calculations {
			ids = append(ids, id)
		}
		return ids
	case heading.EdgeDrainedResults:
		ids := make([]ent.Value, 0, len(m.drained_results))
		for id := range m.drained_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HeadingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedapplications != nil {
		edges = append(edges, heading.EdgeApplications)
	}
	if m.removedcalculations != nil {
		edges = append(edges, heading.EdgeCalculations)
	}
	if m.removeddrained_results != nil {
		edges = append(edges, heading.EdgeDrainedResults)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HeadingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case heading.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.removedapplications))
		for id := range m.removedapplications {
			ids = append(ids, id)
		}
		return ids
	case heading.EdgeCalculations:
		ids := make([]ent.Value, 0, len(m.removedcalculations))
		for id := range m.removedcalculations {
			ids = append(ids, id)
		}
		return ids
	case heading.EdgeDrainedResults:
		ids := make([]ent.Value, 0, len(m.removeddrained_results))
		for id := range m.removeddrained_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HeadingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedvarsity {
		edges = append(edges, heading.EdgeVarsity)
	}
	if m.clearedapplications {
		edges = append(edges, heading.EdgeApplications)
	}
	if m.clearedcalculations {
		edges = append(edges, heading.EdgeCalculations)
	}
	if m.cleareddrained_results {
		edges = append(edges, heading.EdgeDrainedResults)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HeadingMutation) EdgeCleared(name string) bool {
	switch name {
	case heading.EdgeVarsity:
		return m.clearedvarsity
	case heading.EdgeApplications:
		return m.clearedapplications
	case heading.EdgeCalculations:
		return m.clearedcalculations
	case heading.EdgeDrainedResults:
		return m.cleareddrained_results
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HeadingMutation) ClearEdge(name string) error {
	switch name {
	case heading.EdgeVarsity:
		m.ClearVarsity()
		return nil
	}
	return fmt.Errorf("unknown Heading unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HeadingMutation) ResetEdge(name string) error {
	switch name {
	case heading.EdgeVarsity:
		m.ResetVarsity()
		return nil
	case heading.EdgeApplications:
		m.ResetApplications()
		return nil
	case heading.EdgeCalculations:
		m.ResetCalculations()
		return nil
	case heading.EdgeDrainedResults:
		m.ResetDrainedResults()
		return nil
	}
	return fmt.Errorf("unknown Heading edge %s", name)
}

// MetadataMutation represents an operation that mutates the Metadata nodes in the graph.
type MetadataMutation struct {
	config
	op                                Op
	typ                               string
	id                                *int
	last_applications_iteration       *int
	addlast_applications_iteration    *int
	last_calculations_iteration       *int
	addlast_calculations_iteration    *int
	last_drained_results_iteration    *int
	addlast_drained_results_iteration *int
	uploading_lock                    *bool
	clearedFields                     map[string]struct{}
	done                              bool
	oldValue                          func(context.Context) (*Metadata, error)
	predicates                        []predicate.Metadata
}

var _ ent.Mutation = (*MetadataMutation)(nil)

// metadataOption allows management of the mutation configuration using functional options.
type metadataOption func(*MetadataMutation)

// newMetadataMutation creates new mutation for the Metadata entity.
func newMetadataMutation(c config, op Op, opts ...metadataOption) *MetadataMutation {
	m := &MetadataMutation{
		config:        c,
		op:            op,
		typ:           TypeMetadata,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMetadataID sets the ID field of the mutation.
func withMetadataID(id int) metadataOption {
	return func(m *MetadataMutation) {
		var (
			err   error
			once  sync.Once
			value *Metadata
		)
		m.oldValue = func(ctx context.Context) (*Metadata, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Metadata.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMetadata sets the old Metadata of the mutation.
func withMetadata(node *Metadata) metadataOption {
	return func(m *MetadataMutation) {
		m.oldValue = func(context.Context) (*Metadata, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MetadataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MetadataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MetadataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MetadataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Metadata.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLastApplicationsIteration sets the "last_applications_iteration" field.
func (m *MetadataMutation) SetLastApplicationsIteration(i int) {
	m.last_applications_iteration = &i
	m.addlast_applications_iteration = nil
}

// LastApplicationsIteration returns the value of the "last_applications_iteration" field in the mutation.
func (m *MetadataMutation) LastApplicationsIteration() (r int, exists bool) {
	v := m.last_applications_iteration
	if v == nil {
		return
	}
	return *v, true
}

// OldLastApplicationsIteration returns the old "last_applications_iteration" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldLastApplicationsIteration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastApplicationsIteration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastApplicationsIteration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastApplicationsIteration: %w", err)
	}
	return oldValue.LastApplicationsIteration, nil
}

// AddLastApplicationsIteration adds i to the "last_applications_iteration" field.
func (m *MetadataMutation) AddLastApplicationsIteration(i int) {
	if m.addlast_applications_iteration != nil {
		*m.addlast_applications_iteration += i
	} else {
		m.addlast_applications_iteration = &i
	}
}

// AddedLastApplicationsIteration returns the value that was added to the "last_applications_iteration" field in this mutation.
func (m *MetadataMutation) AddedLastApplicationsIteration() (r int, exists bool) {
	v := m.addlast_applications_iteration
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastApplicationsIteration resets all changes to the "last_applications_iteration" field.
func (m *MetadataMutation) ResetLastApplicationsIteration() {
	m.last_applications_iteration = nil
	m.addlast_applications_iteration = nil
}

// SetLastCalculationsIteration sets the "last_calculations_iteration" field.
func (m *MetadataMutation) SetLastCalculationsIteration(i int) {
	m.last_calculations_iteration = &i
	m.addlast_calculations_iteration = nil
}

// LastCalculationsIteration returns the value of the "last_calculations_iteration" field in the mutation.
func (m *MetadataMutation) LastCalculationsIteration() (r int, exists bool) {
	v := m.last_calculations_iteration
	if v == nil {
		return
	}
	return *v, true
}

// OldLastCalculationsIteration returns the old "last_calculations_iteration" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldLastCalculationsIteration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastCalculationsIteration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastCalculationsIteration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastCalculationsIteration: %w", err)
	}
	return oldValue.LastCalculationsIteration, nil
}

// AddLastCalculationsIteration adds i to the "last_calculations_iteration" field.
func (m *MetadataMutation) AddLastCalculationsIteration(i int) {
	if m.addlast_calculations_iteration != nil {
		*m.addlast_calculations_iteration += i
	} else {
		m.addlast_calculations_iteration = &i
	}
}

// AddedLastCalculationsIteration returns the value that was added to the "last_calculations_iteration" field in this mutation.
func (m *MetadataMutation) AddedLastCalculationsIteration() (r int, exists bool) {
	v := m.addlast_calculations_iteration
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastCalculationsIteration resets all changes to the "last_calculations_iteration" field.
func (m *MetadataMutation) ResetLastCalculationsIteration() {
	m.last_calculations_iteration = nil
	m.addlast_calculations_iteration = nil
}

// SetLastDrainedResultsIteration sets the "last_drained_results_iteration" field.
func (m *MetadataMutation) SetLastDrainedResultsIteration(i int) {
	m.last_drained_results_iteration = &i
	m.addlast_drained_results_iteration = nil
}

// LastDrainedResultsIteration returns the value of the "last_drained_results_iteration" field in the mutation.
func (m *MetadataMutation) LastDrainedResultsIteration() (r int, exists bool) {
	v := m.last_drained_results_iteration
	if v == nil {
		return
	}
	return *v, true
}

// OldLastDrainedResultsIteration returns the old "last_drained_results_iteration" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldLastDrainedResultsIteration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastDrainedResultsIteration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastDrainedResultsIteration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastDrainedResultsIteration: %w", err)
	}
	return oldValue.LastDrainedResultsIteration, nil
}

// AddLastDrainedResultsIteration adds i to the "last_drained_results_iteration" field.
func (m *MetadataMutation) AddLastDrainedResultsIteration(i int) {
	if m.addlast_drained_results_iteration != nil {
		*m.addlast_drained_results_iteration += i
	} else {
		m.addlast_drained_results_iteration = &i
	}
}

// AddedLastDrainedResultsIteration returns the value that was added to the "last_drained_results_iteration" field in this mutation.
func (m *MetadataMutation) AddedLastDrainedResultsIteration() (r int, exists bool) {
	v := m.addlast_drained_results_iteration
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastDrainedResultsIteration resets all changes to the "last_drained_results_iteration" field.
func (m *MetadataMutation) ResetLastDrainedResultsIteration() {
	m.last_drained_results_iteration = nil
	m.addlast_drained_results_iteration = nil
}

// SetUploadingLock sets the "uploading_lock" field.
func (m *MetadataMutation) SetUploadingLock(b bool) {
	m.uploading_lock = &b
}

// UploadingLock returns the value of the "uploading_lock" field in the mutation.
func (m *MetadataMutation) UploadingLock() (r bool, exists bool) {
	v := m.uploading_lock
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadingLock returns the old "uploading_lock" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldUploadingLock(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadingLock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadingLock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadingLock: %w", err)
	}
	return oldValue.UploadingLock, nil
}

// ResetUploadingLock resets all changes to the "uploading_lock" field.
func (m *MetadataMutation) ResetUploadingLock() {
	m.uploading_lock = nil
}

// Where appends a list predicates to the MetadataMutation builder.
func (m *MetadataMutation) Where(ps ...predicate.Metadata) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MetadataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MetadataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Metadata, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MetadataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MetadataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Metadata).
func (m *MetadataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MetadataMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.last_applications_iteration != nil {
		fields = append(fields, metadata.FieldLastApplicationsIteration)
	}
	if m.last_calculations_iteration != nil {
		fields = append(fields, metadata.FieldLastCalculationsIteration)
	}
	if m.last_drained_results_iteration != nil {
		fields = append(fields, metadata.FieldLastDrainedResultsIteration)
	}
	if m.uploading_lock != nil {
		fields = append(fields, metadata.FieldUploadingLock)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MetadataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case metadata.FieldLastApplicationsIteration:
		return m.LastApplicationsIteration()
	case metadata.FieldLastCalculationsIteration:
		return m.LastCalculationsIteration()
	case metadata.FieldLastDrainedResultsIteration:
		return m.LastDrainedResultsIteration()
	case metadata.FieldUploadingLock:
		return m.UploadingLock()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MetadataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case metadata.FieldLastApplicationsIteration:
		return m.OldLastApplicationsIteration(ctx)
	case metadata.FieldLastCalculationsIteration:
		return m.OldLastCalculationsIteration(ctx)
	case metadata.FieldLastDrainedResultsIteration:
		return m.OldLastDrainedResultsIteration(ctx)
	case metadata.FieldUploadingLock:
		return m.OldUploadingLock(ctx)
	}
	return nil, fmt.Errorf("unknown Metadata field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetadataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case metadata.FieldLastApplicationsIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastApplicationsIteration(v)
		return nil
	case metadata.FieldLastCalculationsIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastCalculationsIteration(v)
		return nil
	case metadata.FieldLastDrainedResultsIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastDrainedResultsIteration(v)
		return nil
	case metadata.FieldUploadingLock:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadingLock(v)
		return nil
	}
	return fmt.Errorf("unknown Metadata field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MetadataMutation) AddedFields() []string {
	var fields []string
	if m.addlast_applications_iteration != nil {
		fields = append(fields, metadata.FieldLastApplicationsIteration)
	}
	if m.addlast_calculations_iteration != nil {
		fields = append(fields, metadata.FieldLastCalculationsIteration)
	}
	if m.addlast_drained_results_iteration != nil {
		fields = append(fields, metadata.FieldLastDrainedResultsIteration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MetadataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case metadata.FieldLastApplicationsIteration:
		return m.AddedLastApplicationsIteration()
	case metadata.FieldLastCalculationsIteration:
		return m.AddedLastCalculationsIteration()
	case metadata.FieldLastDrainedResultsIteration:
		return m.AddedLastDrainedResultsIteration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetadataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case metadata.FieldLastApplicationsIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastApplicationsIteration(v)
		return nil
	case metadata.FieldLastCalculationsIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastCalculationsIteration(v)
		return nil
	case metadata.FieldLastDrainedResultsIteration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastDrainedResultsIteration(v)
		return nil
	}
	return fmt.Errorf("unknown Metadata numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MetadataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MetadataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MetadataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Metadata nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MetadataMutation) ResetField(name string) error {
	switch name {
	case metadata.FieldLastApplicationsIteration:
		m.ResetLastApplicationsIteration()
		return nil
	case metadata.FieldLastCalculationsIteration:
		m.ResetLastCalculationsIteration()
		return nil
	case metadata.FieldLastDrainedResultsIteration:
		m.ResetLastDrainedResultsIteration()
		return nil
	case metadata.FieldUploadingLock:
		m.ResetUploadingLock()
		return nil
	}
	return fmt.Errorf("unknown Metadata field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MetadataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MetadataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MetadataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MetadataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MetadataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MetadataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MetadataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Metadata unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MetadataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Metadata edge %s", name)
}

// VarsityMutation represents an operation that mutates the Varsity nodes in the graph.
type VarsityMutation struct {
	config
	op              Op
	typ             string
	id              *int
	code            *string
	name            *string
	clearedFields   map[string]struct{}
	headings        map[int]struct{}
	removedheadings map[int]struct{}
	clearedheadings bool
	done            bool
	oldValue        func(context.Context) (*Varsity, error)
	predicates      []predicate.Varsity
}

var _ ent.Mutation = (*VarsityMutation)(nil)

// varsityOption allows management of the mutation configuration using functional options.
type varsityOption func(*VarsityMutation)

// newVarsityMutation creates new mutation for the Varsity entity.
func newVarsityMutation(c config, op Op, opts ...varsityOption) *VarsityMutation {
	m := &VarsityMutation{
		config:        c,
		op:            op,
		typ:           TypeVarsity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVarsityID sets the ID field of the mutation.
func withVarsityID(id int) varsityOption {
	return func(m *VarsityMutation) {
		var (
			err   error
			once  sync.Once
			value *Varsity
		)
		m.oldValue = func(ctx context.Context) (*Varsity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Varsity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVarsity sets the old Varsity of the mutation.
func withVarsity(node *Varsity) varsityOption {
	return func(m *VarsityMutation) {
		m.oldValue = func(context.Context) (*Varsity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VarsityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VarsityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VarsityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VarsityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Varsity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *VarsityMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *VarsityMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Varsity entity.
// If the Varsity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VarsityMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *VarsityMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *VarsityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VarsityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Varsity entity.
// If the Varsity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VarsityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VarsityMutation) ResetName() {
	m.name = nil
}

// AddHeadingIDs adds the "headings" edge to the Heading entity by ids.
func (m *VarsityMutation) AddHeadingIDs(ids ...int) {
	if m.headings == nil {
		m.headings = make(map[int]struct{})
	}
	for i := range ids {
		m.headings[ids[i]] = struct{}{}
	}
}

// ClearHeadings clears the "headings" edge to the Heading entity.
func (m *VarsityMutation) ClearHeadings() {
	m.clearedheadings = true
}

// HeadingsCleared reports if the "headings" edge to the Heading entity was cleared.
func (m *VarsityMutation) HeadingsCleared() bool {
	return m.clearedheadings
}

// RemoveHeadingIDs removes the "headings" edge to the Heading entity by IDs.
func (m *VarsityMutation) RemoveHeadingIDs(ids ...int) {
	if m.removedheadings == nil {
		m.removedheadings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.headings, ids[i])
		m.removedheadings[ids[i]] = struct{}{}
	}
}

// RemovedHeadings returns the removed IDs of the "headings" edge to the Heading entity.
func (m *VarsityMutation) RemovedHeadingsIDs() (ids []int) {
	for id := range m.removedheadings {
		ids = append(ids, id)
	}
	return
}

// HeadingsIDs returns the "headings" edge IDs in the mutation.
func (m *VarsityMutation) HeadingsIDs() (ids []int) {
	for id := range m.headings {
		ids = append(ids, id)
	}
	return
}

// ResetHeadings resets all changes to the "headings" edge.
func (m *VarsityMutation) ResetHeadings() {
	m.headings = nil
	m.clearedheadings = false
	m.removedheadings = nil
}

// Where appends a list predicates to the VarsityMutation builder.
func (m *VarsityMutation) Where(ps ...predicate.Varsity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VarsityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VarsityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Varsity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VarsityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VarsityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Varsity).
func (m *VarsityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VarsityMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.code != nil {
		fields = append(fields, varsity.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, varsity.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VarsityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case varsity.FieldCode:
		return m.Code()
	case varsity.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VarsityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case varsity.FieldCode:
		return m.OldCode(ctx)
	case varsity.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Varsity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VarsityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case varsity.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case varsity.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Varsity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VarsityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VarsityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VarsityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Varsity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VarsityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VarsityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VarsityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Varsity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VarsityMutation) ResetField(name string) error {
	switch name {
	case varsity.FieldCode:
		m.ResetCode()
		return nil
	case varsity.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Varsity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VarsityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.headings != nil {
		edges = append(edges, varsity.EdgeHeadings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VarsityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case varsity.EdgeHeadings:
		ids := make([]ent.Value, 0, len(m.headings))
		for id := range m.headings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VarsityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedheadings != nil {
		edges = append(edges, varsity.EdgeHeadings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VarsityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case varsity.EdgeHeadings:
		ids := make([]ent.Value, 0, len(m.removedheadings))
		for id := range m.removedheadings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VarsityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedheadings {
		edges = append(edges, varsity.EdgeHeadings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VarsityMutation) EdgeCleared(name string) bool {
	switch name {
	case varsity.EdgeHeadings:
		return m.clearedheadings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VarsityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Varsity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VarsityMutation) ResetEdge(name string) error {
	switch name {
	case varsity.EdgeHeadings:
		m.ResetHeadings()
		return nil
	}
	return fmt.Errorf("unknown Varsity edge %s", name)
}
