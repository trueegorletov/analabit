// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/trueegorletov/analabit/core"
	"github.com/trueegorletov/analabit/core/ent/application"
	"github.com/trueegorletov/analabit/core/ent/calculation"
	"github.com/trueegorletov/analabit/core/ent/drainedresult"
	"github.com/trueegorletov/analabit/core/ent/heading"
	"github.com/trueegorletov/analabit/core/ent/predicate"
	"github.com/trueegorletov/analabit/core/ent/run"
	"github.com/trueegorletov/analabit/core/ent/varsity"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApplication   = "Application"
	TypeCalculation   = "Calculation"
	TypeDrainedResult = "DrainedResult"
	TypeHeading       = "Heading"
	TypeRun           = "Run"
	TypeVarsity       = "Varsity"
)

// ApplicationMutation represents an operation that mutates the Application nodes in the graph.
type ApplicationMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	student_id          *string
	priority            *int
	addpriority         *int
	competition_type    *core.Competition
	addcompetition_type *core.Competition
	rating_place        *int
	addrating_place     *int
	score               *int
	addscore            *int
	original_submitted  *bool
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	heading             *int
	clearedheading      bool
	run                 *int
	clearedrun          bool
	done                bool
	oldValue            func(context.Context) (*Application, error)
	predicates          []predicate.Application
}

var _ ent.Mutation = (*ApplicationMutation)(nil)

// applicationOption allows management of the mutation configuration using functional options.
type applicationOption func(*ApplicationMutation)

// newApplicationMutation creates new mutation for the Application entity.
func newApplicationMutation(c config, op Op, opts ...applicationOption) *ApplicationMutation {
	m := &ApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationID sets the ID field of the mutation.
func withApplicationID(id int) applicationOption {
	return func(m *ApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *Application
		)
		m.oldValue = func(ctx context.Context) (*Application, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Application.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplication sets the old Application of the mutation.
func withApplication(node *Application) applicationOption {
	return func(m *ApplicationMutation) {
		m.oldValue = func(context.Context) (*Application, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Application.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentID sets the "student_id" field.
func (m *ApplicationMutation) SetStudentID(s string) {
	m.student_id = &s
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *ApplicationMutation) StudentID() (r string, exists bool) {
	v := m.student_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldStudentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *ApplicationMutation) ResetStudentID() {
	m.student_id = nil
}

// SetPriority sets the "priority" field.
func (m *ApplicationMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *ApplicationMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldPriority(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *ApplicationMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *ApplicationMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *ApplicationMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetCompetitionType sets the "competition_type" field.
func (m *ApplicationMutation) SetCompetitionType(c core.Competition) {
	m.competition_type = &c
	m.addcompetition_type = nil
}

// CompetitionType returns the value of the "competition_type" field in the mutation.
func (m *ApplicationMutation) CompetitionType() (r core.Competition, exists bool) {
	v := m.competition_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCompetitionType returns the old "competition_type" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldCompetitionType(ctx context.Context) (v core.Competition, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompetitionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompetitionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompetitionType: %w", err)
	}
	return oldValue.CompetitionType, nil
}

// AddCompetitionType adds c to the "competition_type" field.
func (m *ApplicationMutation) AddCompetitionType(c core.Competition) {
	if m.addcompetition_type != nil {
		*m.addcompetition_type += c
	} else {
		m.addcompetition_type = &c
	}
}

// AddedCompetitionType returns the value that was added to the "competition_type" field in this mutation.
func (m *ApplicationMutation) AddedCompetitionType() (r core.Competition, exists bool) {
	v := m.addcompetition_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetCompetitionType resets all changes to the "competition_type" field.
func (m *ApplicationMutation) ResetCompetitionType() {
	m.competition_type = nil
	m.addcompetition_type = nil
}

// SetRatingPlace sets the "rating_place" field.
func (m *ApplicationMutation) SetRatingPlace(i int) {
	m.rating_place = &i
	m.addrating_place = nil
}

// RatingPlace returns the value of the "rating_place" field in the mutation.
func (m *ApplicationMutation) RatingPlace() (r int, exists bool) {
	v := m.rating_place
	if v == nil {
		return
	}
	return *v, true
}

// OldRatingPlace returns the old "rating_place" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldRatingPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRatingPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRatingPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRatingPlace: %w", err)
	}
	return oldValue.RatingPlace, nil
}

// AddRatingPlace adds i to the "rating_place" field.
func (m *ApplicationMutation) AddRatingPlace(i int) {
	if m.addrating_place != nil {
		*m.addrating_place += i
	} else {
		m.addrating_place = &i
	}
}

// AddedRatingPlace returns the value that was added to the "rating_place" field in this mutation.
func (m *ApplicationMutation) AddedRatingPlace() (r int, exists bool) {
	v := m.addrating_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetRatingPlace resets all changes to the "rating_place" field.
func (m *ApplicationMutation) ResetRatingPlace() {
	m.rating_place = nil
	m.addrating_place = nil
}

// SetScore sets the "score" field.
func (m *ApplicationMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *ApplicationMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *ApplicationMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *ApplicationMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *ApplicationMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetRunID sets the "run_id" field.
func (m *ApplicationMutation) SetRunID(i int) {
	m.run = &i
}

// RunID returns the value of the "run_id" field in the mutation.
func (m *ApplicationMutation) RunID() (r int, exists bool) {
	v := m.run
	if v == nil {
		return
	}
	return *v, true
}

// OldRunID returns the old "run_id" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldRunID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRunID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRunID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRunID: %w", err)
	}
	return oldValue.RunID, nil
}

// ResetRunID resets all changes to the "run_id" field.
func (m *ApplicationMutation) ResetRunID() {
	m.run = nil
}

// SetOriginalSubmitted sets the "original_submitted" field.
func (m *ApplicationMutation) SetOriginalSubmitted(b bool) {
	m.original_submitted = &b
}

// OriginalSubmitted returns the value of the "original_submitted" field in the mutation.
func (m *ApplicationMutation) OriginalSubmitted() (r bool, exists bool) {
	v := m.original_submitted
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginalSubmitted returns the old "original_submitted" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldOriginalSubmitted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginalSubmitted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginalSubmitted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginalSubmitted: %w", err)
	}
	return oldValue.OriginalSubmitted, nil
}

// ResetOriginalSubmitted resets all changes to the "original_submitted" field.
func (m *ApplicationMutation) ResetOriginalSubmitted() {
	m.original_submitted = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ApplicationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ApplicationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ApplicationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetHeadingID sets the "heading" edge to the Heading entity by id.
func (m *ApplicationMutation) SetHeadingID(id int) {
	m.heading = &id
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (m *ApplicationMutation) ClearHeading() {
	m.clearedheading = true
}

// HeadingCleared reports if the "heading" edge to the Heading entity was cleared.
func (m *ApplicationMutation) HeadingCleared() bool {
	return m.clearedheading
}

// HeadingID returns the "heading" edge ID in the mutation.
func (m *ApplicationMutation) HeadingID() (id int, exists bool) {
	if m.heading != nil {
		return *m.heading, true
	}
	return
}

// HeadingIDs returns the "heading" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HeadingID instead. It exists only for internal usage by the builders.
func (m *ApplicationMutation) HeadingIDs() (ids []int) {
	if id := m.heading; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHeading resets all changes to the "heading" edge.
func (m *ApplicationMutation) ResetHeading() {
	m.heading = nil
	m.clearedheading = false
}

// ClearRun clears the "run" edge to the Run entity.
func (m *ApplicationMutation) ClearRun() {
	m.clearedrun = true
	m.clearedFields[application.FieldRunID] = struct{}{}
}

// RunCleared reports if the "run" edge to the Run entity was cleared.
func (m *ApplicationMutation) RunCleared() bool {
	return m.clearedrun
}

// RunIDs returns the "run" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RunID instead. It exists only for internal usage by the builders.
func (m *ApplicationMutation) RunIDs() (ids []int) {
	if id := m.run; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRun resets all changes to the "run" edge.
func (m *ApplicationMutation) ResetRun() {
	m.run = nil
	m.clearedrun = false
}

// Where appends a list predicates to the ApplicationMutation builder.
func (m *ApplicationMutation) Where(ps ...predicate.Application) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApplicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApplicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Application, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApplicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApplicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Application).
func (m *ApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.student_id != nil {
		fields = append(fields, application.FieldStudentID)
	}
	if m.priority != nil {
		fields = append(fields, application.FieldPriority)
	}
	if m.competition_type != nil {
		fields = append(fields, application.FieldCompetitionType)
	}
	if m.rating_place != nil {
		fields = append(fields, application.FieldRatingPlace)
	}
	if m.score != nil {
		fields = append(fields, application.FieldScore)
	}
	if m.run != nil {
		fields = append(fields, application.FieldRunID)
	}
	if m.original_submitted != nil {
		fields = append(fields, application.FieldOriginalSubmitted)
	}
	if m.updated_at != nil {
		fields = append(fields, application.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case application.FieldStudentID:
		return m.StudentID()
	case application.FieldPriority:
		return m.Priority()
	case application.FieldCompetitionType:
		return m.CompetitionType()
	case application.FieldRatingPlace:
		return m.RatingPlace()
	case application.FieldScore:
		return m.Score()
	case application.FieldRunID:
		return m.RunID()
	case application.FieldOriginalSubmitted:
		return m.OriginalSubmitted()
	case application.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case application.FieldStudentID:
		return m.OldStudentID(ctx)
	case application.FieldPriority:
		return m.OldPriority(ctx)
	case application.FieldCompetitionType:
		return m.OldCompetitionType(ctx)
	case application.FieldRatingPlace:
		return m.OldRatingPlace(ctx)
	case application.FieldScore:
		return m.OldScore(ctx)
	case application.FieldRunID:
		return m.OldRunID(ctx)
	case application.FieldOriginalSubmitted:
		return m.OldOriginalSubmitted(ctx)
	case application.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Application field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case application.FieldStudentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case application.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case application.FieldCompetitionType:
		v, ok := value.(core.Competition)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompetitionType(v)
		return nil
	case application.FieldRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRatingPlace(v)
		return nil
	case application.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case application.FieldRunID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRunID(v)
		return nil
	case application.FieldOriginalSubmitted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginalSubmitted(v)
		return nil
	case application.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, application.FieldPriority)
	}
	if m.addcompetition_type != nil {
		fields = append(fields, application.FieldCompetitionType)
	}
	if m.addrating_place != nil {
		fields = append(fields, application.FieldRatingPlace)
	}
	if m.addscore != nil {
		fields = append(fields, application.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case application.FieldPriority:
		return m.AddedPriority()
	case application.FieldCompetitionType:
		return m.AddedCompetitionType()
	case application.FieldRatingPlace:
		return m.AddedRatingPlace()
	case application.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case application.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	case application.FieldCompetitionType:
		v, ok := value.(core.Competition)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCompetitionType(v)
		return nil
	case application.FieldRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRatingPlace(v)
		return nil
	case application.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown Application numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Application nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationMutation) ResetField(name string) error {
	switch name {
	case application.FieldStudentID:
		m.ResetStudentID()
		return nil
	case application.FieldPriority:
		m.ResetPriority()
		return nil
	case application.FieldCompetitionType:
		m.ResetCompetitionType()
		return nil
	case application.FieldRatingPlace:
		m.ResetRatingPlace()
		return nil
	case application.FieldScore:
		m.ResetScore()
		return nil
	case application.FieldRunID:
		m.ResetRunID()
		return nil
	case application.FieldOriginalSubmitted:
		m.ResetOriginalSubmitted()
		return nil
	case application.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.heading != nil {
		edges = append(edges, application.EdgeHeading)
	}
	if m.run != nil {
		edges = append(edges, application.EdgeRun)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case application.EdgeHeading:
		if id := m.heading; id != nil {
			return []ent.Value{*id}
		}
	case application.EdgeRun:
		if id := m.run; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedheading {
		edges = append(edges, application.EdgeHeading)
	}
	if m.clearedrun {
		edges = append(edges, application.EdgeRun)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationMutation) EdgeCleared(name string) bool {
	switch name {
	case application.EdgeHeading:
		return m.clearedheading
	case application.EdgeRun:
		return m.clearedrun
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationMutation) ClearEdge(name string) error {
	switch name {
	case application.EdgeHeading:
		m.ClearHeading()
		return nil
	case application.EdgeRun:
		m.ClearRun()
		return nil
	}
	return fmt.Errorf("unknown Application unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationMutation) ResetEdge(name string) error {
	switch name {
	case application.EdgeHeading:
		m.ResetHeading()
		return nil
	case application.EdgeRun:
		m.ResetRun()
		return nil
	}
	return fmt.Errorf("unknown Application edge %s", name)
}

// CalculationMutation represents an operation that mutates the Calculation nodes in the graph.
type CalculationMutation struct {
	config
	op                Op
	typ               string
	id                *int
	student_id        *string
	admitted_place    *int
	addadmitted_place *int
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	heading           *int
	clearedheading    bool
	run               *int
	clearedrun        bool
	done              bool
	oldValue          func(context.Context) (*Calculation, error)
	predicates        []predicate.Calculation
}

var _ ent.Mutation = (*CalculationMutation)(nil)

// calculationOption allows management of the mutation configuration using functional options.
type calculationOption func(*CalculationMutation)

// newCalculationMutation creates new mutation for the Calculation entity.
func newCalculationMutation(c config, op Op, opts ...calculationOption) *CalculationMutation {
	m := &CalculationMutation{
		config:        c,
		op:            op,
		typ:           TypeCalculation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCalculationID sets the ID field of the mutation.
func withCalculationID(id int) calculationOption {
	return func(m *CalculationMutation) {
		var (
			err   error
			once  sync.Once
			value *Calculation
		)
		m.oldValue = func(ctx context.Context) (*Calculation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Calculation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCalculation sets the old Calculation of the mutation.
func withCalculation(node *Calculation) calculationOption {
	return func(m *CalculationMutation) {
		m.oldValue = func(context.Context) (*Calculation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CalculationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CalculationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CalculationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CalculationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Calculation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentID sets the "student_id" field.
func (m *CalculationMutation) SetStudentID(s string) {
	m.student_id = &s
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *CalculationMutation) StudentID() (r string, exists bool) {
	v := m.student_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the Calculation entity.
// If the Calculation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalculationMutation) OldStudentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *CalculationMutation) ResetStudentID() {
	m.student_id = nil
}

// SetAdmittedPlace sets the "admitted_place" field.
func (m *CalculationMutation) SetAdmittedPlace(i int) {
	m.admitted_place = &i
	m.addadmitted_place = nil
}

// AdmittedPlace returns the value of the "admitted_place" field in the mutation.
func (m *CalculationMutation) AdmittedPlace() (r int, exists bool) {
	v := m.admitted_place
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmittedPlace returns the old "admitted_place" field's value of the Calculation entity.
// If the Calculation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalculationMutation) OldAdmittedPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdmittedPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdmittedPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmittedPlace: %w", err)
	}
	return oldValue.AdmittedPlace, nil
}

// AddAdmittedPlace adds i to the "admitted_place" field.
func (m *CalculationMutation) AddAdmittedPlace(i int) {
	if m.addadmitted_place != nil {
		*m.addadmitted_place += i
	} else {
		m.addadmitted_place = &i
	}
}

// AddedAdmittedPlace returns the value that was added to the "admitted_place" field in this mutation.
func (m *CalculationMutation) AddedAdmittedPlace() (r int, exists bool) {
	v := m.addadmitted_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetAdmittedPlace resets all changes to the "admitted_place" field.
func (m *CalculationMutation) ResetAdmittedPlace() {
	m.admitted_place = nil
	m.addadmitted_place = nil
}

// SetRunID sets the "run_id" field.
func (m *CalculationMutation) SetRunID(i int) {
	m.run = &i
}

// RunID returns the value of the "run_id" field in the mutation.
func (m *CalculationMutation) RunID() (r int, exists bool) {
	v := m.run
	if v == nil {
		return
	}
	return *v, true
}

// OldRunID returns the old "run_id" field's value of the Calculation entity.
// If the Calculation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalculationMutation) OldRunID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRunID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRunID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRunID: %w", err)
	}
	return oldValue.RunID, nil
}

// ResetRunID resets all changes to the "run_id" field.
func (m *CalculationMutation) ResetRunID() {
	m.run = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CalculationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CalculationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Calculation entity.
// If the Calculation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalculationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CalculationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetHeadingID sets the "heading" edge to the Heading entity by id.
func (m *CalculationMutation) SetHeadingID(id int) {
	m.heading = &id
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (m *CalculationMutation) ClearHeading() {
	m.clearedheading = true
}

// HeadingCleared reports if the "heading" edge to the Heading entity was cleared.
func (m *CalculationMutation) HeadingCleared() bool {
	return m.clearedheading
}

// HeadingID returns the "heading" edge ID in the mutation.
func (m *CalculationMutation) HeadingID() (id int, exists bool) {
	if m.heading != nil {
		return *m.heading, true
	}
	return
}

// HeadingIDs returns the "heading" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HeadingID instead. It exists only for internal usage by the builders.
func (m *CalculationMutation) HeadingIDs() (ids []int) {
	if id := m.heading; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHeading resets all changes to the "heading" edge.
func (m *CalculationMutation) ResetHeading() {
	m.heading = nil
	m.clearedheading = false
}

// ClearRun clears the "run" edge to the Run entity.
func (m *CalculationMutation) ClearRun() {
	m.clearedrun = true
	m.clearedFields[calculation.FieldRunID] = struct{}{}
}

// RunCleared reports if the "run" edge to the Run entity was cleared.
func (m *CalculationMutation) RunCleared() bool {
	return m.clearedrun
}

// RunIDs returns the "run" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RunID instead. It exists only for internal usage by the builders.
func (m *CalculationMutation) RunIDs() (ids []int) {
	if id := m.run; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRun resets all changes to the "run" edge.
func (m *CalculationMutation) ResetRun() {
	m.run = nil
	m.clearedrun = false
}

// Where appends a list predicates to the CalculationMutation builder.
func (m *CalculationMutation) Where(ps ...predicate.Calculation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CalculationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CalculationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Calculation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CalculationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CalculationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Calculation).
func (m *CalculationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CalculationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.student_id != nil {
		fields = append(fields, calculation.FieldStudentID)
	}
	if m.admitted_place != nil {
		fields = append(fields, calculation.FieldAdmittedPlace)
	}
	if m.run != nil {
		fields = append(fields, calculation.FieldRunID)
	}
	if m.updated_at != nil {
		fields = append(fields, calculation.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CalculationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case calculation.FieldStudentID:
		return m.StudentID()
	case calculation.FieldAdmittedPlace:
		return m.AdmittedPlace()
	case calculation.FieldRunID:
		return m.RunID()
	case calculation.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CalculationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case calculation.FieldStudentID:
		return m.OldStudentID(ctx)
	case calculation.FieldAdmittedPlace:
		return m.OldAdmittedPlace(ctx)
	case calculation.FieldRunID:
		return m.OldRunID(ctx)
	case calculation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Calculation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CalculationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case calculation.FieldStudentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case calculation.FieldAdmittedPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmittedPlace(v)
		return nil
	case calculation.FieldRunID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRunID(v)
		return nil
	case calculation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Calculation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CalculationMutation) AddedFields() []string {
	var fields []string
	if m.addadmitted_place != nil {
		fields = append(fields, calculation.FieldAdmittedPlace)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CalculationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case calculation.FieldAdmittedPlace:
		return m.AddedAdmittedPlace()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CalculationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case calculation.FieldAdmittedPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAdmittedPlace(v)
		return nil
	}
	return fmt.Errorf("unknown Calculation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CalculationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CalculationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CalculationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Calculation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CalculationMutation) ResetField(name string) error {
	switch name {
	case calculation.FieldStudentID:
		m.ResetStudentID()
		return nil
	case calculation.FieldAdmittedPlace:
		m.ResetAdmittedPlace()
		return nil
	case calculation.FieldRunID:
		m.ResetRunID()
		return nil
	case calculation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Calculation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CalculationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.heading != nil {
		edges = append(edges, calculation.EdgeHeading)
	}
	if m.run != nil {
		edges = append(edges, calculation.EdgeRun)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CalculationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case calculation.EdgeHeading:
		if id := m.heading; id != nil {
			return []ent.Value{*id}
		}
	case calculation.EdgeRun:
		if id := m.run; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CalculationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CalculationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CalculationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedheading {
		edges = append(edges, calculation.EdgeHeading)
	}
	if m.clearedrun {
		edges = append(edges, calculation.EdgeRun)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CalculationMutation) EdgeCleared(name string) bool {
	switch name {
	case calculation.EdgeHeading:
		return m.clearedheading
	case calculation.EdgeRun:
		return m.clearedrun
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CalculationMutation) ClearEdge(name string) error {
	switch name {
	case calculation.EdgeHeading:
		m.ClearHeading()
		return nil
	case calculation.EdgeRun:
		m.ClearRun()
		return nil
	}
	return fmt.Errorf("unknown Calculation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CalculationMutation) ResetEdge(name string) error {
	switch name {
	case calculation.EdgeHeading:
		m.ResetHeading()
		return nil
	case calculation.EdgeRun:
		m.ResetRun()
		return nil
	}
	return fmt.Errorf("unknown Calculation edge %s", name)
}

// DrainedResultMutation represents an operation that mutates the DrainedResult nodes in the graph.
type DrainedResultMutation struct {
	config
	op                                Op
	typ                               string
	id                                *int
	drained_percent                   *int
	adddrained_percent                *int
	avg_passing_score                 *int
	addavg_passing_score              *int
	min_passing_score                 *int
	addmin_passing_score              *int
	max_passing_score                 *int
	addmax_passing_score              *int
	med_passing_score                 *int
	addmed_passing_score              *int
	avg_last_admitted_rating_place    *int
	addavg_last_admitted_rating_place *int
	min_last_admitted_rating_place    *int
	addmin_last_admitted_rating_place *int
	max_last_admitted_rating_place    *int
	addmax_last_admitted_rating_place *int
	med_last_admitted_rating_place    *int
	addmed_last_admitted_rating_place *int
	clearedFields                     map[string]struct{}
	heading                           *int
	clearedheading                    bool
	run                               *int
	clearedrun                        bool
	done                              bool
	oldValue                          func(context.Context) (*DrainedResult, error)
	predicates                        []predicate.DrainedResult
}

var _ ent.Mutation = (*DrainedResultMutation)(nil)

// drainedresultOption allows management of the mutation configuration using functional options.
type drainedresultOption func(*DrainedResultMutation)

// newDrainedResultMutation creates new mutation for the DrainedResult entity.
func newDrainedResultMutation(c config, op Op, opts ...drainedresultOption) *DrainedResultMutation {
	m := &DrainedResultMutation{
		config:        c,
		op:            op,
		typ:           TypeDrainedResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrainedResultID sets the ID field of the mutation.
func withDrainedResultID(id int) drainedresultOption {
	return func(m *DrainedResultMutation) {
		var (
			err   error
			once  sync.Once
			value *DrainedResult
		)
		m.oldValue = func(ctx context.Context) (*DrainedResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DrainedResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrainedResult sets the old DrainedResult of the mutation.
func withDrainedResult(node *DrainedResult) drainedresultOption {
	return func(m *DrainedResultMutation) {
		m.oldValue = func(context.Context) (*DrainedResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrainedResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrainedResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DrainedResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DrainedResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DrainedResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDrainedPercent sets the "drained_percent" field.
func (m *DrainedResultMutation) SetDrainedPercent(i int) {
	m.drained_percent = &i
	m.adddrained_percent = nil
}

// DrainedPercent returns the value of the "drained_percent" field in the mutation.
func (m *DrainedResultMutation) DrainedPercent() (r int, exists bool) {
	v := m.drained_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldDrainedPercent returns the old "drained_percent" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldDrainedPercent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDrainedPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDrainedPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrainedPercent: %w", err)
	}
	return oldValue.DrainedPercent, nil
}

// AddDrainedPercent adds i to the "drained_percent" field.
func (m *DrainedResultMutation) AddDrainedPercent(i int) {
	if m.adddrained_percent != nil {
		*m.adddrained_percent += i
	} else {
		m.adddrained_percent = &i
	}
}

// AddedDrainedPercent returns the value that was added to the "drained_percent" field in this mutation.
func (m *DrainedResultMutation) AddedDrainedPercent() (r int, exists bool) {
	v := m.adddrained_percent
	if v == nil {
		return
	}
	return *v, true
}

// ResetDrainedPercent resets all changes to the "drained_percent" field.
func (m *DrainedResultMutation) ResetDrainedPercent() {
	m.drained_percent = nil
	m.adddrained_percent = nil
}

// SetAvgPassingScore sets the "avg_passing_score" field.
func (m *DrainedResultMutation) SetAvgPassingScore(i int) {
	m.avg_passing_score = &i
	m.addavg_passing_score = nil
}

// AvgPassingScore returns the value of the "avg_passing_score" field in the mutation.
func (m *DrainedResultMutation) AvgPassingScore() (r int, exists bool) {
	v := m.avg_passing_score
	if v == nil {
		return
	}
	return *v, true
}

// OldAvgPassingScore returns the old "avg_passing_score" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldAvgPassingScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvgPassingScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvgPassingScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvgPassingScore: %w", err)
	}
	return oldValue.AvgPassingScore, nil
}

// AddAvgPassingScore adds i to the "avg_passing_score" field.
func (m *DrainedResultMutation) AddAvgPassingScore(i int) {
	if m.addavg_passing_score != nil {
		*m.addavg_passing_score += i
	} else {
		m.addavg_passing_score = &i
	}
}

// AddedAvgPassingScore returns the value that was added to the "avg_passing_score" field in this mutation.
func (m *DrainedResultMutation) AddedAvgPassingScore() (r int, exists bool) {
	v := m.addavg_passing_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetAvgPassingScore resets all changes to the "avg_passing_score" field.
func (m *DrainedResultMutation) ResetAvgPassingScore() {
	m.avg_passing_score = nil
	m.addavg_passing_score = nil
}

// SetMinPassingScore sets the "min_passing_score" field.
func (m *DrainedResultMutation) SetMinPassingScore(i int) {
	m.min_passing_score = &i
	m.addmin_passing_score = nil
}

// MinPassingScore returns the value of the "min_passing_score" field in the mutation.
func (m *DrainedResultMutation) MinPassingScore() (r int, exists bool) {
	v := m.min_passing_score
	if v == nil {
		return
	}
	return *v, true
}

// OldMinPassingScore returns the old "min_passing_score" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldMinPassingScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinPassingScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinPassingScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinPassingScore: %w", err)
	}
	return oldValue.MinPassingScore, nil
}

// AddMinPassingScore adds i to the "min_passing_score" field.
func (m *DrainedResultMutation) AddMinPassingScore(i int) {
	if m.addmin_passing_score != nil {
		*m.addmin_passing_score += i
	} else {
		m.addmin_passing_score = &i
	}
}

// AddedMinPassingScore returns the value that was added to the "min_passing_score" field in this mutation.
func (m *DrainedResultMutation) AddedMinPassingScore() (r int, exists bool) {
	v := m.addmin_passing_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinPassingScore resets all changes to the "min_passing_score" field.
func (m *DrainedResultMutation) ResetMinPassingScore() {
	m.min_passing_score = nil
	m.addmin_passing_score = nil
}

// SetMaxPassingScore sets the "max_passing_score" field.
func (m *DrainedResultMutation) SetMaxPassingScore(i int) {
	m.max_passing_score = &i
	m.addmax_passing_score = nil
}

// MaxPassingScore returns the value of the "max_passing_score" field in the mutation.
func (m *DrainedResultMutation) MaxPassingScore() (r int, exists bool) {
	v := m.max_passing_score
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxPassingScore returns the old "max_passing_score" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldMaxPassingScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxPassingScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxPassingScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxPassingScore: %w", err)
	}
	return oldValue.MaxPassingScore, nil
}

// AddMaxPassingScore adds i to the "max_passing_score" field.
func (m *DrainedResultMutation) AddMaxPassingScore(i int) {
	if m.addmax_passing_score != nil {
		*m.addmax_passing_score += i
	} else {
		m.addmax_passing_score = &i
	}
}

// AddedMaxPassingScore returns the value that was added to the "max_passing_score" field in this mutation.
func (m *DrainedResultMutation) AddedMaxPassingScore() (r int, exists bool) {
	v := m.addmax_passing_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxPassingScore resets all changes to the "max_passing_score" field.
func (m *DrainedResultMutation) ResetMaxPassingScore() {
	m.max_passing_score = nil
	m.addmax_passing_score = nil
}

// SetMedPassingScore sets the "med_passing_score" field.
func (m *DrainedResultMutation) SetMedPassingScore(i int) {
	m.med_passing_score = &i
	m.addmed_passing_score = nil
}

// MedPassingScore returns the value of the "med_passing_score" field in the mutation.
func (m *DrainedResultMutation) MedPassingScore() (r int, exists bool) {
	v := m.med_passing_score
	if v == nil {
		return
	}
	return *v, true
}

// OldMedPassingScore returns the old "med_passing_score" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldMedPassingScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedPassingScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedPassingScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedPassingScore: %w", err)
	}
	return oldValue.MedPassingScore, nil
}

// AddMedPassingScore adds i to the "med_passing_score" field.
func (m *DrainedResultMutation) AddMedPassingScore(i int) {
	if m.addmed_passing_score != nil {
		*m.addmed_passing_score += i
	} else {
		m.addmed_passing_score = &i
	}
}

// AddedMedPassingScore returns the value that was added to the "med_passing_score" field in this mutation.
func (m *DrainedResultMutation) AddedMedPassingScore() (r int, exists bool) {
	v := m.addmed_passing_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetMedPassingScore resets all changes to the "med_passing_score" field.
func (m *DrainedResultMutation) ResetMedPassingScore() {
	m.med_passing_score = nil
	m.addmed_passing_score = nil
}

// SetAvgLastAdmittedRatingPlace sets the "avg_last_admitted_rating_place" field.
func (m *DrainedResultMutation) SetAvgLastAdmittedRatingPlace(i int) {
	m.avg_last_admitted_rating_place = &i
	m.addavg_last_admitted_rating_place = nil
}

// AvgLastAdmittedRatingPlace returns the value of the "avg_last_admitted_rating_place" field in the mutation.
func (m *DrainedResultMutation) AvgLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.avg_last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// OldAvgLastAdmittedRatingPlace returns the old "avg_last_admitted_rating_place" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldAvgLastAdmittedRatingPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvgLastAdmittedRatingPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvgLastAdmittedRatingPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvgLastAdmittedRatingPlace: %w", err)
	}
	return oldValue.AvgLastAdmittedRatingPlace, nil
}

// AddAvgLastAdmittedRatingPlace adds i to the "avg_last_admitted_rating_place" field.
func (m *DrainedResultMutation) AddAvgLastAdmittedRatingPlace(i int) {
	if m.addavg_last_admitted_rating_place != nil {
		*m.addavg_last_admitted_rating_place += i
	} else {
		m.addavg_last_admitted_rating_place = &i
	}
}

// AddedAvgLastAdmittedRatingPlace returns the value that was added to the "avg_last_admitted_rating_place" field in this mutation.
func (m *DrainedResultMutation) AddedAvgLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.addavg_last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetAvgLastAdmittedRatingPlace resets all changes to the "avg_last_admitted_rating_place" field.
func (m *DrainedResultMutation) ResetAvgLastAdmittedRatingPlace() {
	m.avg_last_admitted_rating_place = nil
	m.addavg_last_admitted_rating_place = nil
}

// SetMinLastAdmittedRatingPlace sets the "min_last_admitted_rating_place" field.
func (m *DrainedResultMutation) SetMinLastAdmittedRatingPlace(i int) {
	m.min_last_admitted_rating_place = &i
	m.addmin_last_admitted_rating_place = nil
}

// MinLastAdmittedRatingPlace returns the value of the "min_last_admitted_rating_place" field in the mutation.
func (m *DrainedResultMutation) MinLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.min_last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// OldMinLastAdmittedRatingPlace returns the old "min_last_admitted_rating_place" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldMinLastAdmittedRatingPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinLastAdmittedRatingPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinLastAdmittedRatingPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinLastAdmittedRatingPlace: %w", err)
	}
	return oldValue.MinLastAdmittedRatingPlace, nil
}

// AddMinLastAdmittedRatingPlace adds i to the "min_last_admitted_rating_place" field.
func (m *DrainedResultMutation) AddMinLastAdmittedRatingPlace(i int) {
	if m.addmin_last_admitted_rating_place != nil {
		*m.addmin_last_admitted_rating_place += i
	} else {
		m.addmin_last_admitted_rating_place = &i
	}
}

// AddedMinLastAdmittedRatingPlace returns the value that was added to the "min_last_admitted_rating_place" field in this mutation.
func (m *DrainedResultMutation) AddedMinLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.addmin_last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinLastAdmittedRatingPlace resets all changes to the "min_last_admitted_rating_place" field.
func (m *DrainedResultMutation) ResetMinLastAdmittedRatingPlace() {
	m.min_last_admitted_rating_place = nil
	m.addmin_last_admitted_rating_place = nil
}

// SetMaxLastAdmittedRatingPlace sets the "max_last_admitted_rating_place" field.
func (m *DrainedResultMutation) SetMaxLastAdmittedRatingPlace(i int) {
	m.max_last_admitted_rating_place = &i
	m.addmax_last_admitted_rating_place = nil
}

// MaxLastAdmittedRatingPlace returns the value of the "max_last_admitted_rating_place" field in the mutation.
func (m *DrainedResultMutation) MaxLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.max_last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxLastAdmittedRatingPlace returns the old "max_last_admitted_rating_place" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldMaxLastAdmittedRatingPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxLastAdmittedRatingPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxLastAdmittedRatingPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxLastAdmittedRatingPlace: %w", err)
	}
	return oldValue.MaxLastAdmittedRatingPlace, nil
}

// AddMaxLastAdmittedRatingPlace adds i to the "max_last_admitted_rating_place" field.
func (m *DrainedResultMutation) AddMaxLastAdmittedRatingPlace(i int) {
	if m.addmax_last_admitted_rating_place != nil {
		*m.addmax_last_admitted_rating_place += i
	} else {
		m.addmax_last_admitted_rating_place = &i
	}
}

// AddedMaxLastAdmittedRatingPlace returns the value that was added to the "max_last_admitted_rating_place" field in this mutation.
func (m *DrainedResultMutation) AddedMaxLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.addmax_last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxLastAdmittedRatingPlace resets all changes to the "max_last_admitted_rating_place" field.
func (m *DrainedResultMutation) ResetMaxLastAdmittedRatingPlace() {
	m.max_last_admitted_rating_place = nil
	m.addmax_last_admitted_rating_place = nil
}

// SetMedLastAdmittedRatingPlace sets the "med_last_admitted_rating_place" field.
func (m *DrainedResultMutation) SetMedLastAdmittedRatingPlace(i int) {
	m.med_last_admitted_rating_place = &i
	m.addmed_last_admitted_rating_place = nil
}

// MedLastAdmittedRatingPlace returns the value of the "med_last_admitted_rating_place" field in the mutation.
func (m *DrainedResultMutation) MedLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.med_last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// OldMedLastAdmittedRatingPlace returns the old "med_last_admitted_rating_place" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldMedLastAdmittedRatingPlace(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedLastAdmittedRatingPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedLastAdmittedRatingPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedLastAdmittedRatingPlace: %w", err)
	}
	return oldValue.MedLastAdmittedRatingPlace, nil
}

// AddMedLastAdmittedRatingPlace adds i to the "med_last_admitted_rating_place" field.
func (m *DrainedResultMutation) AddMedLastAdmittedRatingPlace(i int) {
	if m.addmed_last_admitted_rating_place != nil {
		*m.addmed_last_admitted_rating_place += i
	} else {
		m.addmed_last_admitted_rating_place = &i
	}
}

// AddedMedLastAdmittedRatingPlace returns the value that was added to the "med_last_admitted_rating_place" field in this mutation.
func (m *DrainedResultMutation) AddedMedLastAdmittedRatingPlace() (r int, exists bool) {
	v := m.addmed_last_admitted_rating_place
	if v == nil {
		return
	}
	return *v, true
}

// ResetMedLastAdmittedRatingPlace resets all changes to the "med_last_admitted_rating_place" field.
func (m *DrainedResultMutation) ResetMedLastAdmittedRatingPlace() {
	m.med_last_admitted_rating_place = nil
	m.addmed_last_admitted_rating_place = nil
}

// SetRunID sets the "run_id" field.
func (m *DrainedResultMutation) SetRunID(i int) {
	m.run = &i
}

// RunID returns the value of the "run_id" field in the mutation.
func (m *DrainedResultMutation) RunID() (r int, exists bool) {
	v := m.run
	if v == nil {
		return
	}
	return *v, true
}

// OldRunID returns the old "run_id" field's value of the DrainedResult entity.
// If the DrainedResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DrainedResultMutation) OldRunID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRunID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRunID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRunID: %w", err)
	}
	return oldValue.RunID, nil
}

// ResetRunID resets all changes to the "run_id" field.
func (m *DrainedResultMutation) ResetRunID() {
	m.run = nil
}

// SetHeadingID sets the "heading" edge to the Heading entity by id.
func (m *DrainedResultMutation) SetHeadingID(id int) {
	m.heading = &id
}

// ClearHeading clears the "heading" edge to the Heading entity.
func (m *DrainedResultMutation) ClearHeading() {
	m.clearedheading = true
}

// HeadingCleared reports if the "heading" edge to the Heading entity was cleared.
func (m *DrainedResultMutation) HeadingCleared() bool {
	return m.clearedheading
}

// HeadingID returns the "heading" edge ID in the mutation.
func (m *DrainedResultMutation) HeadingID() (id int, exists bool) {
	if m.heading != nil {
		return *m.heading, true
	}
	return
}

// HeadingIDs returns the "heading" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HeadingID instead. It exists only for internal usage by the builders.
func (m *DrainedResultMutation) HeadingIDs() (ids []int) {
	if id := m.heading; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHeading resets all changes to the "heading" edge.
func (m *DrainedResultMutation) ResetHeading() {
	m.heading = nil
	m.clearedheading = false
}

// ClearRun clears the "run" edge to the Run entity.
func (m *DrainedResultMutation) ClearRun() {
	m.clearedrun = true
	m.clearedFields[drainedresult.FieldRunID] = struct{}{}
}

// RunCleared reports if the "run" edge to the Run entity was cleared.
func (m *DrainedResultMutation) RunCleared() bool {
	return m.clearedrun
}

// RunIDs returns the "run" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RunID instead. It exists only for internal usage by the builders.
func (m *DrainedResultMutation) RunIDs() (ids []int) {
	if id := m.run; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRun resets all changes to the "run" edge.
func (m *DrainedResultMutation) ResetRun() {
	m.run = nil
	m.clearedrun = false
}

// Where appends a list predicates to the DrainedResultMutation builder.
func (m *DrainedResultMutation) Where(ps ...predicate.DrainedResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DrainedResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DrainedResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DrainedResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DrainedResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DrainedResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DrainedResult).
func (m *DrainedResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DrainedResultMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.drained_percent != nil {
		fields = append(fields, drainedresult.FieldDrainedPercent)
	}
	if m.avg_passing_score != nil {
		fields = append(fields, drainedresult.FieldAvgPassingScore)
	}
	if m.min_passing_score != nil {
		fields = append(fields, drainedresult.FieldMinPassingScore)
	}
	if m.max_passing_score != nil {
		fields = append(fields, drainedresult.FieldMaxPassingScore)
	}
	if m.med_passing_score != nil {
		fields = append(fields, drainedresult.FieldMedPassingScore)
	}
	if m.avg_last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldAvgLastAdmittedRatingPlace)
	}
	if m.min_last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldMinLastAdmittedRatingPlace)
	}
	if m.max_last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldMaxLastAdmittedRatingPlace)
	}
	if m.med_last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldMedLastAdmittedRatingPlace)
	}
	if m.run != nil {
		fields = append(fields, drainedresult.FieldRunID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DrainedResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drainedresult.FieldDrainedPercent:
		return m.DrainedPercent()
	case drainedresult.FieldAvgPassingScore:
		return m.AvgPassingScore()
	case drainedresult.FieldMinPassingScore:
		return m.MinPassingScore()
	case drainedresult.FieldMaxPassingScore:
		return m.MaxPassingScore()
	case drainedresult.FieldMedPassingScore:
		return m.MedPassingScore()
	case drainedresult.FieldAvgLastAdmittedRatingPlace:
		return m.AvgLastAdmittedRatingPlace()
	case drainedresult.FieldMinLastAdmittedRatingPlace:
		return m.MinLastAdmittedRatingPlace()
	case drainedresult.FieldMaxLastAdmittedRatingPlace:
		return m.MaxLastAdmittedRatingPlace()
	case drainedresult.FieldMedLastAdmittedRatingPlace:
		return m.MedLastAdmittedRatingPlace()
	case drainedresult.FieldRunID:
		return m.RunID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DrainedResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drainedresult.FieldDrainedPercent:
		return m.OldDrainedPercent(ctx)
	case drainedresult.FieldAvgPassingScore:
		return m.OldAvgPassingScore(ctx)
	case drainedresult.FieldMinPassingScore:
		return m.OldMinPassingScore(ctx)
	case drainedresult.FieldMaxPassingScore:
		return m.OldMaxPassingScore(ctx)
	case drainedresult.FieldMedPassingScore:
		return m.OldMedPassingScore(ctx)
	case drainedresult.FieldAvgLastAdmittedRatingPlace:
		return m.OldAvgLastAdmittedRatingPlace(ctx)
	case drainedresult.FieldMinLastAdmittedRatingPlace:
		return m.OldMinLastAdmittedRatingPlace(ctx)
	case drainedresult.FieldMaxLastAdmittedRatingPlace:
		return m.OldMaxLastAdmittedRatingPlace(ctx)
	case drainedresult.FieldMedLastAdmittedRatingPlace:
		return m.OldMedLastAdmittedRatingPlace(ctx)
	case drainedresult.FieldRunID:
		return m.OldRunID(ctx)
	}
	return nil, fmt.Errorf("unknown DrainedResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DrainedResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drainedresult.FieldDrainedPercent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrainedPercent(v)
		return nil
	case drainedresult.FieldAvgPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvgPassingScore(v)
		return nil
	case drainedresult.FieldMinPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinPassingScore(v)
		return nil
	case drainedresult.FieldMaxPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxPassingScore(v)
		return nil
	case drainedresult.FieldMedPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedPassingScore(v)
		return nil
	case drainedresult.FieldAvgLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvgLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldMinLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldMaxLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldMedLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldRunID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRunID(v)
		return nil
	}
	return fmt.Errorf("unknown DrainedResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DrainedResultMutation) AddedFields() []string {
	var fields []string
	if m.adddrained_percent != nil {
		fields = append(fields, drainedresult.FieldDrainedPercent)
	}
	if m.addavg_passing_score != nil {
		fields = append(fields, drainedresult.FieldAvgPassingScore)
	}
	if m.addmin_passing_score != nil {
		fields = append(fields, drainedresult.FieldMinPassingScore)
	}
	if m.addmax_passing_score != nil {
		fields = append(fields, drainedresult.FieldMaxPassingScore)
	}
	if m.addmed_passing_score != nil {
		fields = append(fields, drainedresult.FieldMedPassingScore)
	}
	if m.addavg_last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldAvgLastAdmittedRatingPlace)
	}
	if m.addmin_last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldMinLastAdmittedRatingPlace)
	}
	if m.addmax_last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldMaxLastAdmittedRatingPlace)
	}
	if m.addmed_last_admitted_rating_place != nil {
		fields = append(fields, drainedresult.FieldMedLastAdmittedRatingPlace)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DrainedResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case drainedresult.FieldDrainedPercent:
		return m.AddedDrainedPercent()
	case drainedresult.FieldAvgPassingScore:
		return m.AddedAvgPassingScore()
	case drainedresult.FieldMinPassingScore:
		return m.AddedMinPassingScore()
	case drainedresult.FieldMaxPassingScore:
		return m.AddedMaxPassingScore()
	case drainedresult.FieldMedPassingScore:
		return m.AddedMedPassingScore()
	case drainedresult.FieldAvgLastAdmittedRatingPlace:
		return m.AddedAvgLastAdmittedRatingPlace()
	case drainedresult.FieldMinLastAdmittedRatingPlace:
		return m.AddedMinLastAdmittedRatingPlace()
	case drainedresult.FieldMaxLastAdmittedRatingPlace:
		return m.AddedMaxLastAdmittedRatingPlace()
	case drainedresult.FieldMedLastAdmittedRatingPlace:
		return m.AddedMedLastAdmittedRatingPlace()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DrainedResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case drainedresult.FieldDrainedPercent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDrainedPercent(v)
		return nil
	case drainedresult.FieldAvgPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAvgPassingScore(v)
		return nil
	case drainedresult.FieldMinPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinPassingScore(v)
		return nil
	case drainedresult.FieldMaxPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxPassingScore(v)
		return nil
	case drainedresult.FieldMedPassingScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMedPassingScore(v)
		return nil
	case drainedresult.FieldAvgLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAvgLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldMinLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldMaxLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxLastAdmittedRatingPlace(v)
		return nil
	case drainedresult.FieldMedLastAdmittedRatingPlace:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMedLastAdmittedRatingPlace(v)
		return nil
	}
	return fmt.Errorf("unknown DrainedResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DrainedResultMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DrainedResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrainedResultMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DrainedResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DrainedResultMutation) ResetField(name string) error {
	switch name {
	case drainedresult.FieldDrainedPercent:
		m.ResetDrainedPercent()
		return nil
	case drainedresult.FieldAvgPassingScore:
		m.ResetAvgPassingScore()
		return nil
	case drainedresult.FieldMinPassingScore:
		m.ResetMinPassingScore()
		return nil
	case drainedresult.FieldMaxPassingScore:
		m.ResetMaxPassingScore()
		return nil
	case drainedresult.FieldMedPassingScore:
		m.ResetMedPassingScore()
		return nil
	case drainedresult.FieldAvgLastAdmittedRatingPlace:
		m.ResetAvgLastAdmittedRatingPlace()
		return nil
	case drainedresult.FieldMinLastAdmittedRatingPlace:
		m.ResetMinLastAdmittedRatingPlace()
		return nil
	case drainedresult.FieldMaxLastAdmittedRatingPlace:
		m.ResetMaxLastAdmittedRatingPlace()
		return nil
	case drainedresult.FieldMedLastAdmittedRatingPlace:
		m.ResetMedLastAdmittedRatingPlace()
		return nil
	case drainedresult.FieldRunID:
		m.ResetRunID()
		return nil
	}
	return fmt.Errorf("unknown DrainedResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DrainedResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.heading != nil {
		edges = append(edges, drainedresult.EdgeHeading)
	}
	if m.run != nil {
		edges = append(edges, drainedresult.EdgeRun)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DrainedResultMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drainedresult.EdgeHeading:
		if id := m.heading; id != nil {
			return []ent.Value{*id}
		}
	case drainedresult.EdgeRun:
		if id := m.run; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DrainedResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DrainedResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DrainedResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedheading {
		edges = append(edges, drainedresult.EdgeHeading)
	}
	if m.clearedrun {
		edges = append(edges, drainedresult.EdgeRun)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DrainedResultMutation) EdgeCleared(name string) bool {
	switch name {
	case drainedresult.EdgeHeading:
		return m.clearedheading
	case drainedresult.EdgeRun:
		return m.clearedrun
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DrainedResultMutation) ClearEdge(name string) error {
	switch name {
	case drainedresult.EdgeHeading:
		m.ClearHeading()
		return nil
	case drainedresult.EdgeRun:
		m.ClearRun()
		return nil
	}
	return fmt.Errorf("unknown DrainedResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DrainedResultMutation) ResetEdge(name string) error {
	switch name {
	case drainedresult.EdgeHeading:
		m.ResetHeading()
		return nil
	case drainedresult.EdgeRun:
		m.ResetRun()
		return nil
	}
	return fmt.Errorf("unknown DrainedResult edge %s", name)
}

// HeadingMutation represents an operation that mutates the Heading nodes in the graph.
type HeadingMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	regular_capacity            *int
	addregular_capacity         *int
	target_quota_capacity       *int
	addtarget_quota_capacity    *int
	dedicated_quota_capacity    *int
	adddedicated_quota_capacity *int
	special_quota_capacity      *int
	addspecial_quota_capacity   *int
	code                        *string
	name                        *string
	clearedFields               map[string]struct{}
	varsity                     *int
	clearedvarsity              bool
	applications                map[int]struct{}
	removedapplications         map[int]struct{}
	clearedapplications         bool
	calculations                map[int]struct{}
	removedcalculations         map[int]struct{}
	clearedcalculations         bool
	drained_results             map[int]struct{}
	removeddrained_results      map[int]struct{}
	cleareddrained_results      bool
	done                        bool
	oldValue                    func(context.Context) (*Heading, error)
	predicates                  []predicate.Heading
}

var _ ent.Mutation = (*HeadingMutation)(nil)

// headingOption allows management of the mutation configuration using functional options.
type headingOption func(*HeadingMutation)

// newHeadingMutation creates new mutation for the Heading entity.
func newHeadingMutation(c config, op Op, opts ...headingOption) *HeadingMutation {
	m := &HeadingMutation{
		config:        c,
		op:            op,
		typ:           TypeHeading,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHeadingID sets the ID field of the mutation.
func withHeadingID(id int) headingOption {
	return func(m *HeadingMutation) {
		var (
			err   error
			once  sync.Once
			value *Heading
		)
		m.oldValue = func(ctx context.Context) (*Heading, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Heading.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHeading sets the old Heading of the mutation.
func withHeading(node *Heading) headingOption {
	return func(m *HeadingMutation) {
		m.oldValue = func(context.Context) (*Heading, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HeadingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HeadingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HeadingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HeadingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Heading.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRegularCapacity sets the "regular_capacity" field.
func (m *HeadingMutation) SetRegularCapacity(i int) {
	m.regular_capacity = &i
	m.addregular_capacity = nil
}

// RegularCapacity returns the value of the "regular_capacity" field in the mutation.
func (m *HeadingMutation) RegularCapacity() (r int, exists bool) {
	v := m.regular_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldRegularCapacity returns the old "regular_capacity" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldRegularCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegularCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegularCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegularCapacity: %w", err)
	}
	return oldValue.RegularCapacity, nil
}

// AddRegularCapacity adds i to the "regular_capacity" field.
func (m *HeadingMutation) AddRegularCapacity(i int) {
	if m.addregular_capacity != nil {
		*m.addregular_capacity += i
	} else {
		m.addregular_capacity = &i
	}
}

// AddedRegularCapacity returns the value that was added to the "regular_capacity" field in this mutation.
func (m *HeadingMutation) AddedRegularCapacity() (r int, exists bool) {
	v := m.addregular_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetRegularCapacity resets all changes to the "regular_capacity" field.
func (m *HeadingMutation) ResetRegularCapacity() {
	m.regular_capacity = nil
	m.addregular_capacity = nil
}

// SetTargetQuotaCapacity sets the "target_quota_capacity" field.
func (m *HeadingMutation) SetTargetQuotaCapacity(i int) {
	m.target_quota_capacity = &i
	m.addtarget_quota_capacity = nil
}

// TargetQuotaCapacity returns the value of the "target_quota_capacity" field in the mutation.
func (m *HeadingMutation) TargetQuotaCapacity() (r int, exists bool) {
	v := m.target_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetQuotaCapacity returns the old "target_quota_capacity" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldTargetQuotaCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetQuotaCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetQuotaCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetQuotaCapacity: %w", err)
	}
	return oldValue.TargetQuotaCapacity, nil
}

// AddTargetQuotaCapacity adds i to the "target_quota_capacity" field.
func (m *HeadingMutation) AddTargetQuotaCapacity(i int) {
	if m.addtarget_quota_capacity != nil {
		*m.addtarget_quota_capacity += i
	} else {
		m.addtarget_quota_capacity = &i
	}
}

// AddedTargetQuotaCapacity returns the value that was added to the "target_quota_capacity" field in this mutation.
func (m *HeadingMutation) AddedTargetQuotaCapacity() (r int, exists bool) {
	v := m.addtarget_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetTargetQuotaCapacity resets all changes to the "target_quota_capacity" field.
func (m *HeadingMutation) ResetTargetQuotaCapacity() {
	m.target_quota_capacity = nil
	m.addtarget_quota_capacity = nil
}

// SetDedicatedQuotaCapacity sets the "dedicated_quota_capacity" field.
func (m *HeadingMutation) SetDedicatedQuotaCapacity(i int) {
	m.dedicated_quota_capacity = &i
	m.adddedicated_quota_capacity = nil
}

// DedicatedQuotaCapacity returns the value of the "dedicated_quota_capacity" field in the mutation.
func (m *HeadingMutation) DedicatedQuotaCapacity() (r int, exists bool) {
	v := m.dedicated_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldDedicatedQuotaCapacity returns the old "dedicated_quota_capacity" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldDedicatedQuotaCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDedicatedQuotaCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDedicatedQuotaCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDedicatedQuotaCapacity: %w", err)
	}
	return oldValue.DedicatedQuotaCapacity, nil
}

// AddDedicatedQuotaCapacity adds i to the "dedicated_quota_capacity" field.
func (m *HeadingMutation) AddDedicatedQuotaCapacity(i int) {
	if m.adddedicated_quota_capacity != nil {
		*m.adddedicated_quota_capacity += i
	} else {
		m.adddedicated_quota_capacity = &i
	}
}

// AddedDedicatedQuotaCapacity returns the value that was added to the "dedicated_quota_capacity" field in this mutation.
func (m *HeadingMutation) AddedDedicatedQuotaCapacity() (r int, exists bool) {
	v := m.adddedicated_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetDedicatedQuotaCapacity resets all changes to the "dedicated_quota_capacity" field.
func (m *HeadingMutation) ResetDedicatedQuotaCapacity() {
	m.dedicated_quota_capacity = nil
	m.adddedicated_quota_capacity = nil
}

// SetSpecialQuotaCapacity sets the "special_quota_capacity" field.
func (m *HeadingMutation) SetSpecialQuotaCapacity(i int) {
	m.special_quota_capacity = &i
	m.addspecial_quota_capacity = nil
}

// SpecialQuotaCapacity returns the value of the "special_quota_capacity" field in the mutation.
func (m *HeadingMutation) SpecialQuotaCapacity() (r int, exists bool) {
	v := m.special_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldSpecialQuotaCapacity returns the old "special_quota_capacity" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldSpecialQuotaCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpecialQuotaCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpecialQuotaCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpecialQuotaCapacity: %w", err)
	}
	return oldValue.SpecialQuotaCapacity, nil
}

// AddSpecialQuotaCapacity adds i to the "special_quota_capacity" field.
func (m *HeadingMutation) AddSpecialQuotaCapacity(i int) {
	if m.addspecial_quota_capacity != nil {
		*m.addspecial_quota_capacity += i
	} else {
		m.addspecial_quota_capacity = &i
	}
}

// AddedSpecialQuotaCapacity returns the value that was added to the "special_quota_capacity" field in this mutation.
func (m *HeadingMutation) AddedSpecialQuotaCapacity() (r int, exists bool) {
	v := m.addspecial_quota_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetSpecialQuotaCapacity resets all changes to the "special_quota_capacity" field.
func (m *HeadingMutation) ResetSpecialQuotaCapacity() {
	m.special_quota_capacity = nil
	m.addspecial_quota_capacity = nil
}

// SetCode sets the "code" field.
func (m *HeadingMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *HeadingMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *HeadingMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *HeadingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HeadingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Heading entity.
// If the Heading object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeadingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HeadingMutation) ResetName() {
	m.name = nil
}

// SetVarsityID sets the "varsity" edge to the Varsity entity by id.
func (m *HeadingMutation) SetVarsityID(id int) {
	m.varsity = &id
}

// ClearVarsity clears the "varsity" edge to the Varsity entity.
func (m *HeadingMutation) ClearVarsity() {
	m.clearedvarsity = true
}

// VarsityCleared reports if the "varsity" edge to the Varsity entity was cleared.
func (m *HeadingMutation) VarsityCleared() bool {
	return m.clearedvarsity
}

// VarsityID returns the "varsity" edge ID in the mutation.
func (m *HeadingMutation) VarsityID() (id int, exists bool) {
	if m.varsity != nil {
		return *m.varsity, true
	}
	return
}

// VarsityIDs returns the "varsity" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VarsityID instead. It exists only for internal usage by the builders.
func (m *HeadingMutation) VarsityIDs() (ids []int) {
	if id := m.varsity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVarsity resets all changes to the "varsity" edge.
func (m *HeadingMutation) ResetVarsity() {
	m.varsity = nil
	m.clearedvarsity = false
}

// AddApplicationIDs adds the "applications" edge to the Application entity by ids.
func (m *HeadingMutation) AddApplicationIDs(ids ...int) {
	if m.applications == nil {
		m.applications = make(map[int]struct{})
	}
	for i := range ids {
		m.applications[ids[i]] = struct{}{}
	}
}

// ClearApplications clears the "applications" edge to the Application entity.
func (m *HeadingMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the Application entity was cleared.
func (m *HeadingMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// RemoveApplicationIDs removes the "applications" edge to the Application entity by IDs.
func (m *HeadingMutation) RemoveApplicationIDs(ids ...int) {
	if m.removedapplications == nil {
		m.removedapplications = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.applications, ids[i])
		m.removedapplications[ids[i]] = struct{}{}
	}
}

// RemovedApplications returns the removed IDs of the "applications" edge to the Application entity.
func (m *HeadingMutation) RemovedApplicationsIDs() (ids []int) {
	for id := range m.removedapplications {
		ids = append(ids, id)
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
func (m *HeadingMutation) ApplicationsIDs() (ids []int) {
	for id := range m.applications {
		ids = append(ids, id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *HeadingMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
	m.removedapplications = nil
}

// AddCalculationIDs adds the "calculations" edge to the Calculation entity by ids.
func (m *HeadingMutation) AddCalculationIDs(ids ...int) {
	if m.calculations == nil {
		m.calculations = make(map[int]struct{})
	}
	for i := range ids {
		m.calculations[ids[i]] = struct{}{}
	}
}

// ClearCalculations clears the "calculations" edge to the Calculation entity.
func (m *HeadingMutation) ClearCalculations() {
	m.clearedcalculations = true
}

// CalculationsCleared reports if the "calculations" edge to the Calculation entity was cleared.
func (m *HeadingMutation) CalculationsCleared() bool {
	return m.clearedcalculations
}

// RemoveCalculationIDs removes the "calculations" edge to the Calculation entity by IDs.
func (m *HeadingMutation) RemoveCalculationIDs(ids ...int) {
	if m.removedcalculations == nil {
		m.removedcalculations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.calculations, ids[i])
		m.removedcalculations[ids[i]] = struct{}{}
	}
}

// RemovedCalculations returns the removed IDs of the "calculations" edge to the Calculation entity.
func (m *HeadingMutation) RemovedCalculationsIDs() (ids []int) {
	for id := range m.removedcalculations {
		ids = append(ids, id)
	}
	return
}

// CalculationsIDs returns the "calculations" edge IDs in the mutation.
func (m *HeadingMutation) CalculationsIDs() (ids []int) {
	for id := range m.calculations {
		ids = append(ids, id)
	}
	return
}

// ResetCalculations resets all changes to the "calculations" edge.
func (m *HeadingMutation) ResetCalculations() {
	m.calculations = nil
	m.clearedcalculations = false
	m.removedcalculations = nil
}

// AddDrainedResultIDs adds the "drained_results" edge to the DrainedResult entity by ids.
func (m *HeadingMutation) AddDrainedResultIDs(ids ...int) {
	if m.drained_results == nil {
		m.drained_results = make(map[int]struct{})
	}
	for i := range ids {
		m.drained_results[ids[i]] = struct{}{}
	}
}

// ClearDrainedResults clears the "drained_results" edge to the DrainedResult entity.
func (m *HeadingMutation) ClearDrainedResults() {
	m.cleareddrained_results = true
}

// DrainedResultsCleared reports if the "drained_results" edge to the DrainedResult entity was cleared.
func (m *HeadingMutation) DrainedResultsCleared() bool {
	return m.cleareddrained_results
}

// RemoveDrainedResultIDs removes the "drained_results" edge to the DrainedResult entity by IDs.
func (m *HeadingMutation) RemoveDrainedResultIDs(ids ...int) {
	if m.removeddrained_results == nil {
		m.removeddrained_results = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.drained_results, ids[i])
		m.removeddrained_results[ids[i]] = struct{}{}
	}
}

// RemovedDrainedResults returns the removed IDs of the "drained_results" edge to the DrainedResult entity.
func (m *HeadingMutation) RemovedDrainedResultsIDs() (ids []int) {
	for id := range m.removeddrained_results {
		ids = append(ids, id)
	}
	return
}

// DrainedResultsIDs returns the "drained_results" edge IDs in the mutation.
func (m *HeadingMutation) DrainedResultsIDs() (ids []int) {
	for id := range m.drained_results {
		ids = append(ids, id)
	}
	return
}

// ResetDrainedResults resets all changes to the "drained_results" edge.
func (m *HeadingMutation) ResetDrainedResults() {
	m.drained_results = nil
	m.cleareddrained_results = false
	m.removeddrained_results = nil
}

// Where appends a list predicates to the HeadingMutation builder.
func (m *HeadingMutation) Where(ps ...predicate.Heading) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HeadingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HeadingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Heading, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HeadingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HeadingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Heading).
func (m *HeadingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HeadingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.regular_capacity != nil {
		fields = append(fields, heading.FieldRegularCapacity)
	}
	if m.target_quota_capacity != nil {
		fields = append(fields, heading.FieldTargetQuotaCapacity)
	}
	if m.dedicated_quota_capacity != nil {
		fields = append(fields, heading.FieldDedicatedQuotaCapacity)
	}
	if m.special_quota_capacity != nil {
		fields = append(fields, heading.FieldSpecialQuotaCapacity)
	}
	if m.code != nil {
		fields = append(fields, heading.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, heading.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HeadingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case heading.FieldRegularCapacity:
		return m.RegularCapacity()
	case heading.FieldTargetQuotaCapacity:
		return m.TargetQuotaCapacity()
	case heading.FieldDedicatedQuotaCapacity:
		return m.DedicatedQuotaCapacity()
	case heading.FieldSpecialQuotaCapacity:
		return m.SpecialQuotaCapacity()
	case heading.FieldCode:
		return m.Code()
	case heading.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HeadingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case heading.FieldRegularCapacity:
		return m.OldRegularCapacity(ctx)
	case heading.FieldTargetQuotaCapacity:
		return m.OldTargetQuotaCapacity(ctx)
	case heading.FieldDedicatedQuotaCapacity:
		return m.OldDedicatedQuotaCapacity(ctx)
	case heading.FieldSpecialQuotaCapacity:
		return m.OldSpecialQuotaCapacity(ctx)
	case heading.FieldCode:
		return m.OldCode(ctx)
	case heading.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Heading field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HeadingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case heading.FieldRegularCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegularCapacity(v)
		return nil
	case heading.FieldTargetQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetQuotaCapacity(v)
		return nil
	case heading.FieldDedicatedQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDedicatedQuotaCapacity(v)
		return nil
	case heading.FieldSpecialQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpecialQuotaCapacity(v)
		return nil
	case heading.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case heading.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Heading field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HeadingMutation) AddedFields() []string {
	var fields []string
	if m.addregular_capacity != nil {
		fields = append(fields, heading.FieldRegularCapacity)
	}
	if m.addtarget_quota_capacity != nil {
		fields = append(fields, heading.FieldTargetQuotaCapacity)
	}
	if m.adddedicated_quota_capacity != nil {
		fields = append(fields, heading.FieldDedicatedQuotaCapacity)
	}
	if m.addspecial_quota_capacity != nil {
		fields = append(fields, heading.FieldSpecialQuotaCapacity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HeadingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case heading.FieldRegularCapacity:
		return m.AddedRegularCapacity()
	case heading.FieldTargetQuotaCapacity:
		return m.AddedTargetQuotaCapacity()
	case heading.FieldDedicatedQuotaCapacity:
		return m.AddedDedicatedQuotaCapacity()
	case heading.FieldSpecialQuotaCapacity:
		return m.AddedSpecialQuotaCapacity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HeadingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case heading.FieldRegularCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRegularCapacity(v)
		return nil
	case heading.FieldTargetQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetQuotaCapacity(v)
		return nil
	case heading.FieldDedicatedQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDedicatedQuotaCapacity(v)
		return nil
	case heading.FieldSpecialQuotaCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSpecialQuotaCapacity(v)
		return nil
	}
	return fmt.Errorf("unknown Heading numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HeadingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HeadingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HeadingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Heading nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HeadingMutation) ResetField(name string) error {
	switch name {
	case heading.FieldRegularCapacity:
		m.ResetRegularCapacity()
		return nil
	case heading.FieldTargetQuotaCapacity:
		m.ResetTargetQuotaCapacity()
		return nil
	case heading.FieldDedicatedQuotaCapacity:
		m.ResetDedicatedQuotaCapacity()
		return nil
	case heading.FieldSpecialQuotaCapacity:
		m.ResetSpecialQuotaCapacity()
		return nil
	case heading.FieldCode:
		m.ResetCode()
		return nil
	case heading.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Heading field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HeadingMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.varsity != nil {
		edges = append(edges, heading.EdgeVarsity)
	}
	if m.applications != nil {
		edges = append(edges, heading.EdgeApplications)
	}
	if m.calculations != nil {
		edges = append(edges, heading.EdgeCalculations)
	}
	if m.drained_results != nil {
		edges = append(edges, heading.EdgeDrainedResults)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HeadingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case heading.EdgeVarsity:
		if id := m.varsity; id != nil {
			return []ent.Value{*id}
		}
	case heading.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.applications))
		for id := range m.applications {
			ids = append(ids, id)
		}
		return ids
	case heading.EdgeCalculations:
		ids := make([]ent.Value, 0, len(m.calculations))
		for id := range m.calculations {
			ids = append(ids, id)
		}
		return ids
	case heading.EdgeDrainedResults:
		ids := make([]ent.Value, 0, len(m.drained_results))
		for id := range m.drained_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HeadingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedapplications != nil {
		edges = append(edges, heading.EdgeApplications)
	}
	if m.removedcalculations != nil {
		edges = append(edges, heading.EdgeCalculations)
	}
	if m.removeddrained_results != nil {
		edges = append(edges, heading.EdgeDrainedResults)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HeadingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case heading.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.removedapplications))
		for id := range m.removedapplications {
			ids = append(ids, id)
		}
		return ids
	case heading.EdgeCalculations:
		ids := make([]ent.Value, 0, len(m.removedcalculations))
		for id := range m.removedcalculations {
			ids = append(ids, id)
		}
		return ids
	case heading.EdgeDrainedResults:
		ids := make([]ent.Value, 0, len(m.removeddrained_results))
		for id := range m.removeddrained_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HeadingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedvarsity {
		edges = append(edges, heading.EdgeVarsity)
	}
	if m.clearedapplications {
		edges = append(edges, heading.EdgeApplications)
	}
	if m.clearedcalculations {
		edges = append(edges, heading.EdgeCalculations)
	}
	if m.cleareddrained_results {
		edges = append(edges, heading.EdgeDrainedResults)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HeadingMutation) EdgeCleared(name string) bool {
	switch name {
	case heading.EdgeVarsity:
		return m.clearedvarsity
	case heading.EdgeApplications:
		return m.clearedapplications
	case heading.EdgeCalculations:
		return m.clearedcalculations
	case heading.EdgeDrainedResults:
		return m.cleareddrained_results
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HeadingMutation) ClearEdge(name string) error {
	switch name {
	case heading.EdgeVarsity:
		m.ClearVarsity()
		return nil
	}
	return fmt.Errorf("unknown Heading unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HeadingMutation) ResetEdge(name string) error {
	switch name {
	case heading.EdgeVarsity:
		m.ResetVarsity()
		return nil
	case heading.EdgeApplications:
		m.ResetApplications()
		return nil
	case heading.EdgeCalculations:
		m.ResetCalculations()
		return nil
	case heading.EdgeDrainedResults:
		m.ResetDrainedResults()
		return nil
	}
	return fmt.Errorf("unknown Heading edge %s", name)
}

// RunMutation represents an operation that mutates the Run nodes in the graph.
type RunMutation struct {
	config
	op            Op
	typ           string
	id            *int
	triggered_at  *time.Time
	payload_meta  *map[string]interface{}
	finished      *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Run, error)
	predicates    []predicate.Run
}

var _ ent.Mutation = (*RunMutation)(nil)

// runOption allows management of the mutation configuration using functional options.
type runOption func(*RunMutation)

// newRunMutation creates new mutation for the Run entity.
func newRunMutation(c config, op Op, opts ...runOption) *RunMutation {
	m := &RunMutation{
		config:        c,
		op:            op,
		typ:           TypeRun,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRunID sets the ID field of the mutation.
func withRunID(id int) runOption {
	return func(m *RunMutation) {
		var (
			err   error
			once  sync.Once
			value *Run
		)
		m.oldValue = func(ctx context.Context) (*Run, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Run.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRun sets the old Run of the mutation.
func withRun(node *Run) runOption {
	return func(m *RunMutation) {
		m.oldValue = func(context.Context) (*Run, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RunMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RunMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RunMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RunMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Run.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTriggeredAt sets the "triggered_at" field.
func (m *RunMutation) SetTriggeredAt(t time.Time) {
	m.triggered_at = &t
}

// TriggeredAt returns the value of the "triggered_at" field in the mutation.
func (m *RunMutation) TriggeredAt() (r time.Time, exists bool) {
	v := m.triggered_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTriggeredAt returns the old "triggered_at" field's value of the Run entity.
// If the Run object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RunMutation) OldTriggeredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTriggeredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTriggeredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTriggeredAt: %w", err)
	}
	return oldValue.TriggeredAt, nil
}

// ResetTriggeredAt resets all changes to the "triggered_at" field.
func (m *RunMutation) ResetTriggeredAt() {
	m.triggered_at = nil
}

// SetPayloadMeta sets the "payload_meta" field.
func (m *RunMutation) SetPayloadMeta(value map[string]interface{}) {
	m.payload_meta = &value
}

// PayloadMeta returns the value of the "payload_meta" field in the mutation.
func (m *RunMutation) PayloadMeta() (r map[string]interface{}, exists bool) {
	v := m.payload_meta
	if v == nil {
		return
	}
	return *v, true
}

// OldPayloadMeta returns the old "payload_meta" field's value of the Run entity.
// If the Run object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RunMutation) OldPayloadMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayloadMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayloadMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayloadMeta: %w", err)
	}
	return oldValue.PayloadMeta, nil
}

// ClearPayloadMeta clears the value of the "payload_meta" field.
func (m *RunMutation) ClearPayloadMeta() {
	m.payload_meta = nil
	m.clearedFields[run.FieldPayloadMeta] = struct{}{}
}

// PayloadMetaCleared returns if the "payload_meta" field was cleared in this mutation.
func (m *RunMutation) PayloadMetaCleared() bool {
	_, ok := m.clearedFields[run.FieldPayloadMeta]
	return ok
}

// ResetPayloadMeta resets all changes to the "payload_meta" field.
func (m *RunMutation) ResetPayloadMeta() {
	m.payload_meta = nil
	delete(m.clearedFields, run.FieldPayloadMeta)
}

// SetFinished sets the "finished" field.
func (m *RunMutation) SetFinished(b bool) {
	m.finished = &b
}

// Finished returns the value of the "finished" field in the mutation.
func (m *RunMutation) Finished() (r bool, exists bool) {
	v := m.finished
	if v == nil {
		return
	}
	return *v, true
}

// OldFinished returns the old "finished" field's value of the Run entity.
// If the Run object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RunMutation) OldFinished(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinished: %w", err)
	}
	return oldValue.Finished, nil
}

// ResetFinished resets all changes to the "finished" field.
func (m *RunMutation) ResetFinished() {
	m.finished = nil
}

// Where appends a list predicates to the RunMutation builder.
func (m *RunMutation) Where(ps ...predicate.Run) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RunMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RunMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Run, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RunMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RunMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Run).
func (m *RunMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RunMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.triggered_at != nil {
		fields = append(fields, run.FieldTriggeredAt)
	}
	if m.payload_meta != nil {
		fields = append(fields, run.FieldPayloadMeta)
	}
	if m.finished != nil {
		fields = append(fields, run.FieldFinished)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RunMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case run.FieldTriggeredAt:
		return m.TriggeredAt()
	case run.FieldPayloadMeta:
		return m.PayloadMeta()
	case run.FieldFinished:
		return m.Finished()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RunMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case run.FieldTriggeredAt:
		return m.OldTriggeredAt(ctx)
	case run.FieldPayloadMeta:
		return m.OldPayloadMeta(ctx)
	case run.FieldFinished:
		return m.OldFinished(ctx)
	}
	return nil, fmt.Errorf("unknown Run field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RunMutation) SetField(name string, value ent.Value) error {
	switch name {
	case run.FieldTriggeredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTriggeredAt(v)
		return nil
	case run.FieldPayloadMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayloadMeta(v)
		return nil
	case run.FieldFinished:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinished(v)
		return nil
	}
	return fmt.Errorf("unknown Run field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RunMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RunMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RunMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Run numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RunMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(run.FieldPayloadMeta) {
		fields = append(fields, run.FieldPayloadMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RunMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RunMutation) ClearField(name string) error {
	switch name {
	case run.FieldPayloadMeta:
		m.ClearPayloadMeta()
		return nil
	}
	return fmt.Errorf("unknown Run nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RunMutation) ResetField(name string) error {
	switch name {
	case run.FieldTriggeredAt:
		m.ResetTriggeredAt()
		return nil
	case run.FieldPayloadMeta:
		m.ResetPayloadMeta()
		return nil
	case run.FieldFinished:
		m.ResetFinished()
		return nil
	}
	return fmt.Errorf("unknown Run field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RunMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RunMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RunMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RunMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RunMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RunMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RunMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Run unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RunMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Run edge %s", name)
}

// VarsityMutation represents an operation that mutates the Varsity nodes in the graph.
type VarsityMutation struct {
	config
	op              Op
	typ             string
	id              *int
	code            *string
	name            *string
	clearedFields   map[string]struct{}
	headings        map[int]struct{}
	removedheadings map[int]struct{}
	clearedheadings bool
	done            bool
	oldValue        func(context.Context) (*Varsity, error)
	predicates      []predicate.Varsity
}

var _ ent.Mutation = (*VarsityMutation)(nil)

// varsityOption allows management of the mutation configuration using functional options.
type varsityOption func(*VarsityMutation)

// newVarsityMutation creates new mutation for the Varsity entity.
func newVarsityMutation(c config, op Op, opts ...varsityOption) *VarsityMutation {
	m := &VarsityMutation{
		config:        c,
		op:            op,
		typ:           TypeVarsity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVarsityID sets the ID field of the mutation.
func withVarsityID(id int) varsityOption {
	return func(m *VarsityMutation) {
		var (
			err   error
			once  sync.Once
			value *Varsity
		)
		m.oldValue = func(ctx context.Context) (*Varsity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Varsity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVarsity sets the old Varsity of the mutation.
func withVarsity(node *Varsity) varsityOption {
	return func(m *VarsityMutation) {
		m.oldValue = func(context.Context) (*Varsity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VarsityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VarsityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VarsityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VarsityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Varsity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *VarsityMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *VarsityMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Varsity entity.
// If the Varsity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VarsityMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *VarsityMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *VarsityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VarsityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Varsity entity.
// If the Varsity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VarsityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VarsityMutation) ResetName() {
	m.name = nil
}

// AddHeadingIDs adds the "headings" edge to the Heading entity by ids.
func (m *VarsityMutation) AddHeadingIDs(ids ...int) {
	if m.headings == nil {
		m.headings = make(map[int]struct{})
	}
	for i := range ids {
		m.headings[ids[i]] = struct{}{}
	}
}

// ClearHeadings clears the "headings" edge to the Heading entity.
func (m *VarsityMutation) ClearHeadings() {
	m.clearedheadings = true
}

// HeadingsCleared reports if the "headings" edge to the Heading entity was cleared.
func (m *VarsityMutation) HeadingsCleared() bool {
	return m.clearedheadings
}

// RemoveHeadingIDs removes the "headings" edge to the Heading entity by IDs.
func (m *VarsityMutation) RemoveHeadingIDs(ids ...int) {
	if m.removedheadings == nil {
		m.removedheadings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.headings, ids[i])
		m.removedheadings[ids[i]] = struct{}{}
	}
}

// RemovedHeadings returns the removed IDs of the "headings" edge to the Heading entity.
func (m *VarsityMutation) RemovedHeadingsIDs() (ids []int) {
	for id := range m.removedheadings {
		ids = append(ids, id)
	}
	return
}

// HeadingsIDs returns the "headings" edge IDs in the mutation.
func (m *VarsityMutation) HeadingsIDs() (ids []int) {
	for id := range m.headings {
		ids = append(ids, id)
	}
	return
}

// ResetHeadings resets all changes to the "headings" edge.
func (m *VarsityMutation) ResetHeadings() {
	m.headings = nil
	m.clearedheadings = false
	m.removedheadings = nil
}

// Where appends a list predicates to the VarsityMutation builder.
func (m *VarsityMutation) Where(ps ...predicate.Varsity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VarsityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VarsityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Varsity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VarsityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VarsityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Varsity).
func (m *VarsityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VarsityMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.code != nil {
		fields = append(fields, varsity.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, varsity.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VarsityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case varsity.FieldCode:
		return m.Code()
	case varsity.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VarsityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case varsity.FieldCode:
		return m.OldCode(ctx)
	case varsity.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Varsity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VarsityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case varsity.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case varsity.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Varsity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VarsityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VarsityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VarsityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Varsity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VarsityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VarsityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VarsityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Varsity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VarsityMutation) ResetField(name string) error {
	switch name {
	case varsity.FieldCode:
		m.ResetCode()
		return nil
	case varsity.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Varsity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VarsityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.headings != nil {
		edges = append(edges, varsity.EdgeHeadings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VarsityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case varsity.EdgeHeadings:
		ids := make([]ent.Value, 0, len(m.headings))
		for id := range m.headings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VarsityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedheadings != nil {
		edges = append(edges, varsity.EdgeHeadings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VarsityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case varsity.EdgeHeadings:
		ids := make([]ent.Value, 0, len(m.removedheadings))
		for id := range m.removedheadings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VarsityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedheadings {
		edges = append(edges, varsity.EdgeHeadings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VarsityMutation) EdgeCleared(name string) bool {
	switch name {
	case varsity.EdgeHeadings:
		return m.clearedheadings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VarsityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Varsity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VarsityMutation) ResetEdge(name string) error {
	switch name {
	case varsity.EdgeHeadings:
		m.ResetHeadings()
		return nil
	}
	return fmt.Errorf("unknown Varsity edge %s", name)
}
